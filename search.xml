<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Catalina 10.15.1 19B88 正式版 with Clover 5098原版镜像[双EFI双平台版]]]></title>
    <url>%2FmacOS-Catalina-10.15.1-19B88-Release-version-with-Clover-5098-original-image-Double-EFI-Version.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Catalina 10.15.1 19B88 正式版 with Clover 5098原版镜像[双EFI双平台版] macOS Catalina正式版Mac 上你喜爱的一切，都因 macOS Catalina 而变得更精彩。你可以享用两款全新媒体 app；用新的查找 app 定位遗失的 Mac；而你常用的 iPad app 现在也有了 Mac 版。你甚至可以将 iPad 当作第二个显示屏，扩展桌面空间。现在，无论做什么，你将拥有远超以往的体验 Apple Music• 订阅 Apple Music，在线聆听并下载上千万首歌曲。• 优化后的资料库井然有序，轻松查找你所有下载的或从 CD 导入的音乐。 Apple 播客• 通过节目的名称、主题、嘉宾、主持人或内容搜索播客。• 订阅喜爱的播客，自动接收上新通知。• 你可以在 Mac 上开始听一集节目，然后随时利用 iPhone、iPad 或 Apple Watch 继续收听。 同步与备份• 当 iPhone 或 iPad 连接上 Mac 时，可在访达中同步内容，进行备份、更新，或恢复软件。 Mac Catalyst• 你现在可以在 Mac 上，畅享多款你常用 iPad app 的 Mac 版。 随航Sidecar• 将你的 iPad 用作 Mac 的第二个显示屏，从而扩展工作空间。• 可在每个屏幕上各运行一个 app；也可在 iPad 上使用工具和调色板，在 Mac 上进行绘画创作。• 操作你常用的创意类专业 Mac app 时，以 Apple Pencil 在平板电脑上进行输入。 速绘和标记支持连续互通• 在 iPad 或 iPhone 上进行速绘，然后将其插入到 Mac 的任何文档中。• 使用 iPad 或 iPhone 来签署 Mac 上的 PDF 或标记 Mac 上的截屏。 辅助功能• 利用语音控制功能，通过你的语音全权掌控 Mac。• 启用悬停文本，可在一个专用窗口里显示高分辨率大字体。• 当使用两个屏幕时，利用放大显示功能，可将其中一个屏幕上的内容放大，以便阅读。 安全性• 你所用的 app 均已由 Apple 事先检查是否含有已知恶意软件，让你安心使用。• 当 app 要求访问数据时，将基于新的数据保护功能进行授权。 查找• 借助简单易用的新 app，追踪你的设备或寻找亲友。• 即使设备未连接无线局域网或蜂窝网络，也能帮你定位。• 可使用激活锁，保护搭载 Apple T2 安全芯片的 Mac 机型。 照片• 呈现你的精彩照片和回忆，带给你活泼生动、引人入胜的新体验。• 浏览“回忆影片”，更可编辑影片时长、风格和标题。 Safari 浏览器• 使用优化的起始页面浏览历史记录、书签、阅读列表、iCloud 标签页中显示的站点，甚至你在信息 app 中收到的链接。• 使用 Safari 浏览器建议的强密码，有助保护账户安全。 备忘录• 在画廊视图中，浏览以缩略图呈现的备忘录。• 尽享更强大的搜索功能，可识别扫描件中的文字和图像中的物体。• 使用共享文件夹，可分享整个备忘录文件夹。• 轻松地将核对清单项目重新排序或缩进排版，并自动将已完成的项目移动到底部。 提醒事项• 使用新的编辑按钮，为提醒事项添加日期、位置、旗标和附件等。• 智能列表可自动整理并显示临近的提醒事项，方便你及时跟进。 邮件• 通过邮件主题静音、屏蔽发件人或从商业推广列表中取消订阅，全权掌控你的收件箱。 屏幕使用时间• 透彻了解在 app 和网站上花费的时间，并设定使用限额。• 设置家人共享，为家人的设备设定屏幕使用时间。 此更新还包括以下错误修复和改进：恢复在“照片”的“所有照片”视图中查看文件名的功能恢复在“照片”的“天”视图中按收藏夹，照片，视频，已编辑和关键字进行过滤的功能修复了启用重复警报选项时消息仅发送单个通知的问题解决了导致联系人启动到先前打开的联系人而不是联系人列表的问题在Apple News中添加了两指轻扫手势以用于向后导航解决了在文件夹中显示播放列表并在“歌曲”列表中显示新添加的歌曲时在“音乐”应用中可能出现的问题提高了将iTunes资料库数据库迁移到音乐，播客和电视应用程序的可靠性修复了电视应用程序的“下载”文件夹中看不到下载标题的问题更多的信息请移步：这里 镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；更新CLOVER到v2.5k r5098新增PE引导分区，同时支持CLOVER / PE双引导驱动更新更新lilu v1.3.9更新AppleALC v1.4.3更新WhatEverGreen v1.3.4，根本上解决黑屏问题去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；本镜像采用官方原版app制作，集成Clover r5098，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于 drivers/off；300系列主板请于UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers/off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Catalina 10.15安装中常见的问题及解决方法;更新WhateverGreen到v1.3.4(10月30日编译，根治安装/更新中的黑屏现象)，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；核显驱动更多的教程请参考：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势其它机型的配置文件统一保存到config-Other目录下，请自行复制相应机型配置文件；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表HD3000驱动方法请移步这里 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12# md5 macOS\ Catalina\ 10.15.1\(19B88\)\ Installer\ for\ Clover\ 5098\ and\ WEPE.dmg # 空格以\ 代替MD5 (macOS Catalina 10.15.1(19B88) Installer for Clover 5098 and WEPE.dmg) = 6bd732d83e66543bec3f2ac78dc3a613Windows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可。Windows10需要以管理员权限运行安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.15安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 10.15.1 19B88 双EFI分区版下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源天翼云下载链接：百毒云下载链接: https://pan.baidu.com/s/1OG8Dm88bH66A38E0_ek0yg 提取码: 5tub1MD5 (macOS Catalina 10.15.1(19B88) Installer for Clover 5098 and WEPE.dmg) = 6bd732d83e66543bec3f2ac78dc3a613]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Catalina</tag>
        <tag>dmg</tag>
        <tag>10.15.1</tag>
        <tag>19B88</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Catalina 10.15 19A583 正式版 with Clover 5096原版镜像[双EFI双平台版]]]></title>
    <url>%2FmacOS-Catalina-10.15-19A583-Release-version-with-Clover-5093-original-image-Double-EFI-Version.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Catalina 10.15 19A583 正式版 with Clover 5096原版镜像[双EFI双平台版] macOS Catalina正式版Mac 上你喜爱的一切，都因 macOS Catalina 而变得更精彩。你可以享用两款全新媒体 app；用新的查找 app 定位遗失的 Mac；而你常用的 iPad app 现在也有了 Mac 版。你甚至可以将 iPad 当作第二个显示屏，扩展桌面空间。现在，无论做什么，你将拥有远超以往的体验 Apple Music• 订阅 Apple Music，在线聆听并下载上千万首歌曲。• 优化后的资料库井然有序，轻松查找你所有下载的或从 CD 导入的音乐。 Apple 播客• 通过节目的名称、主题、嘉宾、主持人或内容搜索播客。• 订阅喜爱的播客，自动接收上新通知。• 你可以在 Mac 上开始听一集节目，然后随时利用 iPhone、iPad 或 Apple Watch 继续收听。 同步与备份• 当 iPhone 或 iPad 连接上 Mac 时，可在访达中同步内容，进行备份、更新，或恢复软件。 Mac Catalyst• 你现在可以在 Mac 上，畅享多款你常用 iPad app 的 Mac 版。 随航Sidecar• 将你的 iPad 用作 Mac 的第二个显示屏，从而扩展工作空间。• 可在每个屏幕上各运行一个 app；也可在 iPad 上使用工具和调色板，在 Mac 上进行绘画创作。• 操作你常用的创意类专业 Mac app 时，以 Apple Pencil 在平板电脑上进行输入。 速绘和标记支持连续互通• 在 iPad 或 iPhone 上进行速绘，然后将其插入到 Mac 的任何文档中。• 使用 iPad 或 iPhone 来签署 Mac 上的 PDF 或标记 Mac 上的截屏。 辅助功能• 利用语音控制功能，通过你的语音全权掌控 Mac。• 启用悬停文本，可在一个专用窗口里显示高分辨率大字体。• 当使用两个屏幕时，利用放大显示功能，可将其中一个屏幕上的内容放大，以便阅读。 安全性• 你所用的 app 均已由 Apple 事先检查是否含有已知恶意软件，让你安心使用。• 当 app 要求访问数据时，将基于新的数据保护功能进行授权。 查找• 借助简单易用的新 app，追踪你的设备或寻找亲友。• 即使设备未连接无线局域网或蜂窝网络，也能帮你定位。• 可使用激活锁，保护搭载 Apple T2 安全芯片的 Mac 机型。 照片• 呈现你的精彩照片和回忆，带给你活泼生动、引人入胜的新体验。• 浏览“回忆影片”，更可编辑影片时长、风格和标题。 Safari 浏览器• 使用优化的起始页面浏览历史记录、书签、阅读列表、iCloud 标签页中显示的站点，甚至你在信息 app 中收到的链接。• 使用 Safari 浏览器建议的强密码，有助保护账户安全。 备忘录• 在画廊视图中，浏览以缩略图呈现的备忘录。• 尽享更强大的搜索功能，可识别扫描件中的文字和图像中的物体。• 使用共享文件夹，可分享整个备忘录文件夹。• 轻松地将核对清单项目重新排序或缩进排版，并自动将已完成的项目移动到底部。 提醒事项• 使用新的编辑按钮，为提醒事项添加日期、位置、旗标和附件等。• 智能列表可自动整理并显示临近的提醒事项，方便你及时跟进。 邮件• 通过邮件主题静音、屏蔽发件人或从商业推广列表中取消订阅，全权掌控你的收件箱。 屏幕使用时间• 透彻了解在 app 和网站上花费的时间，并设定使用限额。• 设置家人共享，为家人的设备设定屏幕使用时间。 镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；更新CLOVER到v2.5k r5096新增PE引导分区，同时支持CLOVER / PE双引导驱动更新更新lilu v1.3.8更新AppleALC v1.4.2更新WhatEverGreen v1.3.2，根本上解决紫条问题去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；本镜像采用官方原版app制作，集成Clover 5093，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于 drivers/off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers/off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Catalina 10.15安装中常见的问题及解决方法;更新WhateverGreen到v1.3.2(9月7日编译)，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；核显驱动更多的教程请参考：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势其它机型的配置文件统一保存到config-Other目录下，请自行复制相应机型配置文件；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表HD3000驱动方法请移步这里 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12# md5 macOS\ Catalina\ 10.15\(19A583\)\ Installer\ for\ Clover\ 5096\ and\ WEPE.dmg # 空格以\ 代替MD5 (macOS Catalina 10.15(19A583) Installer for Clover 5096 and WEPE.dmg) = 493837d8e99592adc9450372a2519cadWindows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可。Windows10需要以管理员权限运行安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.15安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 10.15 19A583 双EFI分区版下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源天翼云下载链接：百毒云下载链接: https://pan.baidu.com/s/1yAE6hUveviU6gKaEG0z_Yw 提取码: wqre1MD5 (macOS Catalina 10.15(19A583) Installer for Clover 5096 and WEPE.dmg) = 493837d8e99592adc9450372a2519cad]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Catalina</tag>
        <tag>10.15</tag>
        <tag>dmg</tag>
        <tag>19A583</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势]]></title>
    <url>%2FDW1820A_BCM94350ZAE-driver-inserts-the-correct-posture.html</url>
    <content type="text"><![CDATA[前言随着 DW1830 / DW1560 价格的不断走高，能找到一款性价比超高的无线网卡对广大的 Hackintosher 来说就显得至关重要了。从几个月前我就开始尝试驱动 DW1820A ，WIFI 驱动没问题，但是蓝牙各种翻车各种摔。功夫不负有心人，在众多热心网友的不断努力下，终于解决了蓝牙固件无法上传的问题，也因此就有了这篇驱动教程。 为什么是 DW1820A新款部分笔记本只能塞下背面没有元器件的无线网卡，比如[联想小新Air 2018 IWL]，此为刚需价格：百元以内，不排除未来有涨价的可能规格/参数：DW1820A/BCM94350ZAEM.2 2230802.11ac 双频 支持2.4GHz/5GHz867MbpsBlueTooth 4.1操作系统：支持 macOS / Windows / linux 已知支持的设备信息 WLAN:Vendor: 0x14E4Device: 0x43A3Sub Vendor: 1028 or 106BSub Device: 0021 0022 0023 075a Bluetooth:Vendor ID: 0x0A5CProduct ID: 0x6412 0x6414 DW1820A设备信息整理Part NumberManufacturerModuleWLANBT 4.1CN-0VW3T3Dell Wireless 1820A 802.11acBCM94350ZAE_21028:0021[0a5c:6412]CN-0VW3T3Dell Wireless 1820A 802.11acBCM94356ZEPA50DX_21028:0021[0a5c:6412]CN-096JNTDell Wireless 1820A 802.11acBCM94356ZEPA50DX_21028:0021[0a5c:6412]CN-096JNTDell Wireless 1820A 802.11acBCM94356ZEPA50DX_21028:0022[0a5c:6412]CN-0VW3T3Dell Wireless 1820A 802.11acBCM94356ZEPA50DX_21028:0023[0a5c:6412]CN-08PKF4Dell Wireless 1820A 802.11acBCM94356ZEPA50DX_21028:0023[0a5c:6412]00JT494LenovoBCM94350ZAE_21028:075a[0a5c:6414]联想全系列需要屏蔽针脚测试，详见下图 驱动方法采用 AirportBrcmFixup 驱动注入参数以便于直接驱动 AirPortBrcm4360 而不是驱动 AirPort.BrcmNIC，这样做的好处就是避免某一天苹果不提供AirPortBrcm4350的支持，便于支持未来的系统，包括macOS Catalina等。 WLAN无线网卡如果开机直接就驱动了WIFI无线网卡，那么下面这段内容就可以直接跳过，转到驱动蓝牙部分。将AirportBrcmFixup_v2.0.4.kext添加到/EFI/CLOVER/kexts/Other目录下config.plist 中添加引导参数：brcmfx-country=#a ，它的作用是设置国家代码为自动识别，以使它工作在5G模式下；部分机型可能还需要添加引导参数：brcmfx-driver=1 才能更好地工作；根据 https://github.com/acidanthera/AirportBrcmFixupbrcmfx-driver=0|1|2|3 备注：每次只能填写一个数值 【10-30-2019更新】开启指定的 kextbrcmfx-driver对应的 kext对应的 Device Property id0AirPortBrcmNIC-MFG43ba, 43a3, 43a01AirPortBrcm43604331, 43532AirPortBrcmNIC43ba, 43a3, 43a03AirPortBrcm43314331, 4353, 432b所以，更改 brcmfx-driver 要根据 AirportBrcmFixup 的属性，4331 4353 43a3 等匹配着来试, 你随便改成了不匹配的肯定不行Devices-&gt;Properties添加：在左侧Devices中添加：PciRoot(0x0)/Pci(0x1c,0x0)/Pci(0x0,0x0)在右侧分别添加：Properties Key*Properties ValueValue TypeAAPL,slot-nameWLANSTRINGcompatiblepci14e4,4353STRINGdevice_typeAirport ExtremeSTRINGmodelDW1820A (BCM4350) 802.11ac WirelessSTRINGnameAirportSTRING完成后的截图如下：至于这个PciRoot(0x0)/Pci(0x1c,0x0)/Pci(0x0,0x0)是如何获得的，我们需要搬出工具Hackintool完整的config.plist源码如下：123456789101112131415161718192021222324252627282930&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;&lt;plist version="1.0"&gt;&lt;dict&gt; &lt;key&gt;Boot&lt;/key&gt; &lt;dict&gt; &lt;key&gt;Arguments&lt;/key&gt; &lt;string&gt;brcmfx-country=#a&lt;/string&gt; &lt;/dict&gt; &lt;key&gt;Devices&lt;/key&gt; &lt;dict&gt; &lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x1c,0x0)/Pci(0x0,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,slot-name&lt;/key&gt; &lt;string&gt;WLAN&lt;/string&gt; &lt;key&gt;compatible&lt;/key&gt; &lt;string&gt;pci14e4,4353&lt;/string&gt; &lt;key&gt;device_type&lt;/key&gt; &lt;string&gt;Airport Extreme&lt;/string&gt; &lt;key&gt;model&lt;/key&gt; &lt;string&gt;DW1820A (BCM4350) 802.11ac Wireless&lt;/string&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Airport&lt;/string&gt; &lt;/dict&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;/plist&gt;请将该脚本合并到你的/EFI/CLOVER/config.plist中，不要直接替换。 [为某些不会合并配置文件的小白准备的文件，供参考]至此，您可以重启电脑，以使DW1820A的WIFI可以正常工作。 Bluetooth蓝牙将【DW1820A蓝牙专用程序】 解压缩到/EFI/CLOVER/kexts/Other目录下，重启即可。稳定版：下载链接测试版本：DW1820A_BT_for_Mojave_v2.5.0.zip 支持10.14及以下版本DW1820A_BT_for_Catalina_v2.5.0.zip 支持10.15及以下版本如果蓝牙睡眠唤醒后无法工作，请于config.plist中添加引导参数：bpr_probedelay=100 bpr_initialdelay=300 bpr_postresetdelay=300 Windows驱动程序下载链接：DW1820A_for_Windows_Drivers.zip 截图部分机型可能需要屏蔽针脚才能正常使用 注意事项：安装系统之前，请于BIOS中禁用WLAN/WIFI 和 Bluetooth，待安装系统成功后再行开启；感谢@我意的反馈基本常识：双天线的网卡都存在蓝牙和WIFI的2.4G共用相同频率导致的信号干扰问题，解决方案：WIFI连接到5G使用即可。该现象常见于DW1560/DW1820/BCM94360CS等双天线网卡如果WIFI的连接速率只能到300Mbps，或者国家代码是US，请参考教程注入国家代码：brcmfx-country=#a即可。如果找不到WIFI设备，可以尝试将屏蔽针脚的胶带的前3剪下来，保留后2 信息反馈目前正在收集各种机型进行网卡测试，测试后，请大家提供测试结果给我，整合后会分享给大家参照。技术交流请加下方QQ群 小兵测试过的网卡通过测试的网卡我都会扔到闲鱼出掉，如果你运气好，可能会找到我测试过的、屏蔽了针脚的网卡；最近咸鱼账号：daliansky2008和黑果小兵全部被禁言，无法回复任何消息，请通过QQ群701278330 黑苹果无线网卡交流群 沟通交流 参考及引用https://wikidevi.com/wiki/Dellhttps://wikidevi.com/wiki/Dell_Wireless_1820A_(DW1820A)Hervé 更新的Broadcom 4350:https://osxlatitude.com/forums/topic/12169-bcm4350-cards-registry-of-cardslaptops-interop/Hervé 更新的DW1820A支持机型列表:https://osxlatitude.com/forums/topic/11322-broadcom-bcm4350-cards-under-high-sierramojave/nickhx 提供的蓝牙驱动：https://osxlatitude.com/forums/topic/11540-dw1820a-for-7490-help/?do=findComment&amp;comment=92833Acidanthera 维护的项目：OpenCorePkg lilu AirportBrcmFixup WhateverGreen VirtualSMC AppleALC BrcmPatchRAM MaciASL 等headkaze 提供的工具：hackintool BrcmPatchRAM]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>驱动</tag>
        <tag>DW1820A</tag>
        <tag>BCM94350ZAE</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.6 18G87 正式版 with Clover 5050原版镜像[双EFI双平台终极版]]]></title>
    <url>%2FmacOS-Mojave-10.14.6-18G87-Release-version-with-Clover-5033-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.6 18G87 正式版 with Clover 5050原版镜像[双EFI双平台终极版] macOS Mojave 10.14.6 补充更新修复了部分 Mac 无法从睡眠状态正常唤醒的问题。 macOS Mojave 10.14.6 更新提高了 Mac 的稳定性和可靠性。解决了无法在配备融合硬盘的 iMac 和 Mac mini 上新建“启动转换”分区的问题解决了在重新启动过程中可能无响应的问题解决了从睡眠状态唤醒时可能发生的图形问题修复了可能导致 Mac mini 全屏播放视频时屏幕变黑的问题提高了通过 SMB 共享文件的可靠性 镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；更新CLOVER到v2.5k r5050新增PE引导分区，同时支持CLOVER / PE双引导新增AMD_Vanilla，支持High Sierra 10.13.6 (17G65, 17G66, 17G8030)/Mojave 10.14.6 (18G84, 18G87)config_AMD_FX_A 支持FX Series / A Seriesconfig_AMD_Ryzen 支持 Ryzen, Threadripper, Athlon 2xxGE驱动更新更新lilu v1.3.8更新AppleALC v1.4.0更新WhatEverGreen v1.3.1，根本上解决紫条问题去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；本镜像采用官方原版app制作，集成Clover 5050，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于 drivers/off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers/off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到v1.3.1(7月23日编译)，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；核显驱动更多的教程请参考：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势其它机型的配置文件统一保存到config-Other目录下，请自行复制相应机型配置文件；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表HD3000驱动方法请移步这里 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：123456 # md5 macOS\ Mojave\ 10.14.6\(18G87\)\ Installer\ for\ Intel\ and\ AMD\ with\ Clover\ 5050\ and\ WEPE.dmg # 空格以\ 代替 MD5 (macOS Mojave 10.14.6(18G87) Installer for Intel and AMD with Clover 5050 and WEPE.dmg) = c9a861f9dfecfb359b1124b80d37d709 # md5 macOS\ Mojave\ 10.14.6\(18G87\)\ Installer\ with\ Clover\ 5033.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14.6(18G87) Installer with Clover 5033.dmg) = 886cc509cacaf3bb20fbd41dfb8da8ac # md5 macOS\ Mojave\ 10.14.6\(18G84\)\ Installer\ with\ Clover\ 5027.dmg # 空格以\ 代替 MD5 (macOS Mojave 10.14.6(18G84) Installer with Clover 5027.dmg) = af934738cd02c4cefacf527d23532289Windows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法如果卡在CLOVER主界面，请尝试更新CLOVER版本到4911及以上 【3-30-2019备注】安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接 10.14.6 18G87 双平台(Intel/AMD) 双EFI分区版下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接: https://pan.baidu.com/s/1W07eZpfzmKoiQLTKsmxzSA 提取码: cdqnMD5 (macOS Mojave 10.14.6(18G87) Installer for Intel and AMD with Clover 5050 and WEPE.dmg) = c9a861f9dfecfb359b1124b80d37d709 10.14.6 18G87 下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接：https://pan.baidu.com/s/1-9e6yYAvS3Ey_Ly4c-z_EA 提取码：9iteMD5 (macOS Mojave 10.14.6(18G87) Installer with Clover 5033.dmg) = 886cc509cacaf3bb20fbd41dfb8da8ac 10.14.6 18G84 下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接: https://pan.baidu.com/s/1yx7A_wlfepp6ybTCRcz4cg 提取码: qrwtMD5 (macOS Mojave 10.14.6(18G84) Installer with Clover 5027.dmg) = af934738cd02c4cefacf527d23532289 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.6</tag>
        <tag>18G84</tag>
        <tag>18G87</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[精解OpenCore]]></title>
    <url>%2FOpenCore-BootLoader.html</url>
    <content type="text"><![CDATA[精解 OpenCore教程更新于 2019.11.15, 基于 OpenCore 0.5.3 (2019.11.15) 自编译目前官方版本为 0.5.2由于个人能力有限, 教程中难免会有些疏漏, 这里推荐大家在参阅本教程的同时也阅读以下资料:OpenCore 官方文档 – OpenCore 最权威的资料, 没有之一!!!xjn‘s Blog – xjn 大佬的博客, 对台式机非常友好的教程, 内存管理写的非常详细OC-little – 宪武大佬的 OC ACPI 热补丁示例, 非常值得学习Opencore Vanilla Desktop Guide 什么是 OpenCoreOpenCore(简称 OC) 是一个着眼于未来开源引导工具, 最初诞生于 HermitCrabs 实验室, 现在接手于 Acidanthera, 其目的是创造一个更加严谨的模组化的轻量引导系统。尽管 OpenCore 的主要用途是黑苹果, 它也支持其它操作系统的引导。OpenCore 现在处于公测 Beta 阶段, 引导相关功能也已非常稳定, 喜欢折腾的朋友现在已经是动手的时机了。这个教程只能作为你探索的起点。请仔细阅读并时刻牢记你的硬件可能有不同的配置要求。 为什么选择 OpenCore从 2019 年 9 月以后, Acidanthera 开发的内核驱动 (Lilu, AppleALC 等等) **「不再会」**在 Clover 上做兼容性测试OpenCore 启动黑苹果 (尤其是 macOS 10.15) 会比 Clover 快不少OpenCore 提供强大的排错功能和详细的日志OpenCore 更加注重系统的安全性, 提供对 OpenCore 自身引导文件对加密, 同时对文件保险箱 (FileVault) 有更强大的支持, 在未来会支持 UEFI 安全启动OpenCore 支持基于 boot.efi 的原生开机快捷键支持OpenCore 使用更加先进的方法注入第三方内核扩展驱动 (Kext) 且与此同时不会破坏系统完整性保护OpenCore 通过读取启动磁盘设置的 NVRAM 变量, 可以像白苹果一样支持在设置的启动磁盘切换默认引导项支持给其它 .efi 驱动或引导工具加入参数如下 .efi 驱动被合并入 OpenCore, 未来的开发直接与 OpenCore 绑定, 且不再支持 CloverAptioMemoryFix 已经被合并入 OpenCore 并将未合并的模组更名为 FwRuntimeVariable.efi, 提供更多可按需求定制 Slide 值计算的 QuirkAppleGenericInput (原来的 AptioInputFix) 为了提高兼容性和 ALT / Command 键的对调已经合并入 OpenCore 并增加了更多的 QuirkAppleUiSupport 为了提供更好的 FileVault 体验, 已合并入 OpenCore 并增加了更多的 QuirkApfsDriverLoader 计划在未来合并苹果最新的 APFS 驱动源码并支持 Fusion Drive, 有可能并入 OpenCore OpenCore 常见疑问OpenCore 没有精美的主题, 以后会添加吗?可能但是短时间内不会有, OpenCore 的开发成员 vit9696 已经声明不会开发官方主题, 但是保留了 GUI 接口, 其他开发者可以自己制作OpenCore 自带的 GUI 仅用于 Debug, 正常使用的时候是像白苹果一样隐藏的。OpenCore 已经提供了大量可以绕开 GUI 的功能, 将 ShowPicker 设置为 NO 隐藏菜单之后, 可以通过系统自带的启动磁盘设置来切换默认系统, 用苹果原生快捷键来重置 NVRAM 和添加引导表示符, 需要其它功能的时候可以随时按 ESC/Option 调出, 主题存在的意义不大OpenCore 为什么不会为其它操作系统忽略 ACPI 补丁?真正正确的 ACPI (DSDT/SSDT) 应当适用于所有的操作系统, 单独为一个操作系统制作 ACPI 是不合理的, 因此 OpenCore 基于 ACPI 标准, 不会在 ACPI 上区别对待操作系统, (OpenCore ACPI 教程正在施工中, 敬请期待)OpenCore 的配置为什么看起来这复杂?OpenCore 为了提高兼容性, 为用户开放了更多底层的 QuirkOpenCore 现阶段没有可用的非常直观的 GUI 编辑器换位思考, 如果用 Xcode 来编辑 Clover 安装包内自带的 Config, OpenCore 的配置就会显得简单明了很多OpenCore 很多功能都有且只有一处设置, 但是 Clover 有大量干扰组合 配置 OpenCore讲了这么多, 终于到真正动手的环节了由于本文较长, 建议配合博客右下角的目录阅读 准备工作我们先来做些简单的准备工作 推荐 BIOS 设置禁用:英文中文Fast Boot快速启动CFG Lock (MSR 0xE2 write protection)CFG 锁 (MSR 0xE2 写入保护)VT-dVT-dCSM兼容性支持模块Intel SGXIntel SGX启用:英文中文VT-xVT-xAbove 4G decoding大于 4G 地址空间解码Hyper Threading处理器超线程Execute Disable Bit执行禁止位EHCI/XHCI Hand-off接手 EHCI/XHCI 控制OS type: Windows 8.1/10操作系统类型: Windows 8.1/10将 操作系统类型设置为 Windows 8.1/10 是因为部分主板在 Other 模式下会将系统认作是 Windows 7 从而禁用 UEFI 的某些功能并开启 CSM200 系及以后的主板理论上不存在这个问题 下载如下文件OpenCorePkg (建议从 Acidanthera 的官方例子开始构建, 并使用官方 Release, 因为 OpenCore 的配置文件需要不断随着主程序的更新而更新)OpenCore-Factory 提供连续的源码自动编译, 喜欢尝鲜的朋友可以下载, 最新编译为 MacInfoPkgAppleSupportPkgPlist 编辑器:ProperTree (基于 Python 的轻量级跨平台 Plist 编辑器, 针对 OpenCore 有优化, Acidanthera 官方推荐)Xcode (Acidanthera 官方推荐, 但是 Xcode 11 处理 &lt;data&gt; 存在严重问题)Plist Editor Pro (使用远古 Plist 标准, 会破坏 XML 换行而且不会自动转换 Base64, 可用但是不推荐)OpenCore Configurator [1], OpenCore Configurator [2] 是两个第三方图形化配置工具, 但是 vit9696 声明 不建议使用这些工具因为它们在编辑时会破坏 XML 结构并且会造成一系列未知问题。目前:工具 [1] 已经停止开发。工具 [2] 的开发进度与 OpenCore 开发版持平, 但是程序内依旧存在如下问题UEFI 驱动安装器 里存在大量与 OpenCore 不兼容的驱动DeviceProperties 的 &lt;Integer&gt; 在编辑后会丢失还有潜在性 Bug请自行评估其中的利弊 需要具备的条件一个 U 盘对黑苹果有一定的知识基础, 至少会自己配置 Clover, 清楚各个 内核驱动 .kext 和 UEFI .efi 驱动的用途, 不清楚可以查看附录[1] 和 附录[2]一个完全精简过的 Clover EFI一个正常稳定工作的黑苹果测试平台EFI 挂载工具 创建 USB 启动盘为了不干扰当前引导工具, 建议单独创建一个 USB 启动盘, 格式化为 GUID 分区图, 分区类型为 macOS 日志式。挂载完 EFI 分区真有意思的部分就「开始了」 基础文件夹结构OpenCore 的正确文件结构如下所示现在, 你可以将 AppleSupportPkg 和 VirtualSMC 中必需的 .efi 驱动程序放入 drivers 文件夹, 将 你的 Kext 和 DSDT/SSDT 放入各自的文件夹中。请注意, OpenCore 不支持支持列表以外的 UEFI 驱动程序!完成后的效果 (请忽略这些随便放的驱动): 配置思路OpenCore 的配置建议遵循从简原则, 先确保能进系统再来增加其它功能 (不进系统功能都是免谈), 变数越少出错的概率也就越低内核驱动只保留 Lilu, WhateverGreen, VirtualSMC 和必须依赖才能开机的驱动 (删除 AppleALC, VoodooI2C 等功能性驱动) 配置 Config.plist请记住 OpenCore 中的 config.plist, 与 Clover 的 config.plist 尽管名称相同但是内容和结构完全不同。它们不能混合滥用。如果你不清楚某一个项里应该填什么「数据类型」, 请参考 OpenCore 官方文档下面的 Quirk 给的都是推荐值, 请根据自身情况修改部分未在文中提及的 Quirk 和 参数保留原样复制 Sample.plist, 将副本重命名为 config.plist 并用上文提到的编辑工具打开如果你打算使用的 SMBIOS 苹果已经停止支持 或者你是用的是戴尔 OEM 笔记本请使用 SampleFull.plist 并「认真」补全所有 SMBIOS 信息里面躺着所有我们需要配置的子项:ACPI: 用于加载, 屏蔽和修补 ACPI (DSDT/SSDT) 表Booter: 用于设置 FwRuntimeServices.efi (Slide 值计算, KASLR)DeviceProperties: 用于设置 PCI 设备属性, 如英特尔缓冲帧补丁, 声卡 Layout IDKernel: 用于说明 OpenCore 的具体加密信息, 配置 Kext 加载顺序以及屏蔽驱动Misc: OpenCore 的自身设置NVRAM: 用于注入 NVRAM (如引导标识符和 SIP)Platforminfo: 用于设置 SMBIOS 机型信息UEFI: 用于加载 UEFI 驱动以及以何种顺序加载#WARNING - 1～5 是开发者的嘱咐和对 Sample 选择的说明, 在删除之前请务必确保你已经阅读并遵守了这些条例Warning - 1: 这只是一个实例。不要直接拿来开机。Warning - 2: 在用 Config 开机之前, 确保你已经理解 Config 内「每一个项的」的意义Warning - 3: 在大多数情况下, 建议从 Sample.plist 开始配置Warning - 4: SampleFull.plist 用于苹果不再支持的机型 (2011 年或更早) ACPIAdd: 你需要把这些而例子里内容修改/创建为你的 EFI/OC/ACPI/ 下的文件Block:禁用某个 ACPI 表, 常用于禁用 DAMR 来关闭 VT-dPatch: 对 DSDT (SSDT) 的内容进行查找和替换Quirks: ACPI 相关设置FadtEnableReset: NO在旧硬件上修复重启和关机, 除非需要, 否则不推荐开启NormalizeHeaders: NO清除 ACPI 头字段, 只有 macOS 10.13 需要RebaseRegions: YES尝试试探性地重新定位 ACPI 内存区域, 使用自定义 DSDT 则必须开启ResetHwSig: NO存在重新启动后因无法维持硬件签名而导致从休眠中唤醒的问题的硬件需要开启ResetLogoStatus: NO无法在有 BGRT 表的系统上显示 OEM Windows 标志的硬件需要开启 Booter 启动器MmioWhitelist: 如果开机卡在 PCI... 可以尝试开启 Item 1 下的 PatchQuirks:AvoidRuntimeDefrag: YES开启后会修复 UEFI 的运行服务, 例如日期, 时间, NVRAM, 电源控制等DevirtualiseMmio: YES开启后会减少 Stolen 内存占用空间，扩大 Slide = N 值的范围, 适用于大多数主板DisableSingleUser: NO开启后会禁止 Cmd + S 和 -s 的使用，使设备更加接近于 T2 白苹果DisableVariableWrite: NO开启后会禁止 NVRAM 写入, 在 Z390/HM370 等没有原生 macOS 支持 NVRAM 的主板上需要开启DiscardHibernateMap: NO开启后会重用原始休眠内存映射，仅某些旧硬件需要EnableSafeModeSlide: YES开启后会允许在安全模式下使用 Slide 值EnableWriteUnprotector: YES开启后会在执行期间删除 CR0 寄存器中的写入保护ForceExitBootServices: NO开启后会确保 ExitBootServices 即使在 MemoryMap 发生更改时也能调用成功, 除非有必要, 否则请勿使用ProtectCsmRegion: NO开启后会用于修复人为制造和睡眠唤醒的问题, AvoidRuntimeDefrag 已经修复了这个问题所以请尽可能避免使用这个 QuirkProvideCustomSlide: YES如果 Slide 值存在冲突, 此选项将强制 macOS 执行以下操作:使用一个伪随机值。 只有在遇到 Only N/256 slide values are usable! 时需要SetupVirtualMap: YES开启后会将 SetVirtualAddresses 调用修复为虚拟地址ShrinkMemoryMap: NO有巨大且不兼容内存映射的主板需要开启, 非必须不要使用 DeviceProperties 设备属性不同的设备硬件地址不一样! 你需要先通过 Hackintool 或者 Windows 设备管理器 等工具查看 PCI 设备地址!此处内容可以用 Hackintool 生成然后直接复制过来, 请提前确保内容和结构无误Add: 添加 _DSM 设备属性PciRoot(0x0)/Pci(0x2,0x0)注入缓冲帧补丁, 查看 此处来确认你需要的缓冲帧补丁PciRoot(0x0)/Pci(0x1f, 0x3) → Layout-id应用 AppleALC 音频 Layout ID 注入Block: 用于删除/屏蔽设备属性 (可以删除此项, 大多数情况都用不到)这里的设置等同于 Clover 里的 ACPI 重命名 _DSM → XDSM + TgtBridge Kernel 内核这里是指定要加载哪些 Kext 以及仿冒 CPU ID 的地方, 这里的顺序非常重要, 所以请确保 Lilu.Kext 始终在第一位! 其他优先级更高的 Kext 为 Lilu 的插件, 如 VirtualSMC, AppleALC, WhateverGreen 等Add:BundlePath这里填入 Kext 的名称如: Lilu.kextEnabled控制 Kext 的启用禁用ExecutablePath隐藏在 kext 中的实际可执行文件的路径，可以通过右键单击并选择 显示包内容 来查看 Kext 的路径。 通常为 Contents/MacOS/(Kext)，但有的时候 Plugin 文件夹下也会有 Kext。如: Contents/MacOS/Lilu空壳 Kext 没有可执行文件 (e.g. USBPorts.kext), 此项留空即可PlistPath隐藏在 Kext 中的 Info.plist 路径如: Contents/Info.plistVoodooI2C 注入样板 🚪VoodooPS2 注入样板 🚪 (VoodooPS2Trackpad 和 VoodooPS2Trackpad 以此类推)Emulate: 仿冒不支持的 CPU, 例如奔腾和赛扬CpuidMask: 设置为零时，将使用原始 CPU 位&lt;Clover_FCPUID_Extended_to_4_bytes_Swapped_Bytes&gt; | 00 00 00 00 | 00 00 00 00 | 00 00 00 00例如: CPUID 0x0306A9 就是 A9 06 03 00 | 00 00 00 00 | 00 00 00 00 | 00 00 00 00CpuidData: CPU 的被仿冒位FF FF FF FF | 00 00 00 00 | 00 00 00 00 | 00 00 00 00如果需要替换更长的位, 将 00 替换为 FFBlock: 屏蔽系统里的 KextPatch: 这是你要添加系统内核补丁, Kext 补丁, 和 AMD CPU 补丁的地方。(等同于 Clover 的 KextToPatch 和 KernelToPatch)Quirks:AppleCpuPmCfgLock: NO如果设备的 CFG-Lock 是开启的状态则需要设置为 YES (尽可能用 Grub 关闭 BIOS 的 CFG-Lock 并避免开启这个 Quirk)AppleXcpmCfgLock: NO同上AppleXcpmExtraMsrs: NO禁用奔腾和某些至强等不支持 CPU 所需的多个 MSR 访问CustomSMBIOSGuid: NO对 UpdateSMBIOSMode 自定义模式执行 GUID 修补, 用于戴尔笔记本电脑 (等同于 Clover 的 DellSMBIOSPatch)DisbaleIOMapper: NO需要绕过 VT-d 且 BIOS 中禁用时使用ExternalDiskIcons: YES硬盘图标补丁, macOS 将内部硬盘视为外接硬盘 (黄色) 时使用LapicKernelPanic: NO禁用由 AP 核心 lapic 中断造成的内核崩溃, 通常用于「惠普电脑」 (等同于 Clover 的 Kernel LAPIC)PanicNoKextDump: YES在发生内核崩溃时阻止输出 Kext 列表, 提供可供排错参考的崩溃日志PowerTimeoutKernelPanic: YES修复 macOS Catalina 中由于设备电源状态变化超时而导致的内核崩溃ThirdPartyTrim: NO为 SSD 启用 TRIM 指令, NVMe SSD 会自动被 macOS 加载因此不需要, SATA SSD 可以在终端执行 sudo trimforce enable 开启XhciPortLimit: YES这实际上是 15 端口限制补丁, 不建议依赖, 因为这不是 USB 的最佳解决方案。有能力的情况下请选择定制 USB, 这个选项适用于没有定制 USB 的设备 Misc 杂项BlessOverride: 用于覆盖 Windows bootmgfw.efi 的位置以便识别 Windows 引导项, OpenCore 和 Windows 的引导文件在同一硬盘的同一 ESP 分区下使用123▼ Misc &lt;Dictionary&gt;|__ ▼ BlessOverride &lt;Array&gt; |__ Item 0 &lt;String&gt; \EFI\Microsoft\Boot\bootmgfw.efiBoot: 引导界面的设置HibernateMode: None与系统内的休眠模式配合, 引导进系统会还原休眠前的状态, 这个功能会影响 SSD 寿命, 建议关闭HideSelf: YES在 OpenCore 的启动选择中隐藏自身 EFI 分区的启动项PollAppleHotKeys: NO设置为 YES 后允许在引导过程中使用苹果原生快捷键, 需要与 Quirk KeySupport=Yes「或」UsbKbDxe.efi 结合使用, 具体体验取决于主板固件。常用快捷键组合:Cmd + V: 启用 -v 跑码Cmd + Opt + P + R: 重置 NVRAMCmd + R: 启动恢复分区Cmd + S: 启动至单用户模式Option / ALT: 在 ShowPicker 设置成 NO 时显示引导项, ALT 不可用时可用 ESC 键代替Timeout: 0设置引导项等待时间0 为关闭倒计时, 相当于 Clover 的 -1 (并不是跳过倒计时)ShowPicker: YES显示 OpenCore 的 UI, 用于查看可用引导项设置为 NO 可以跳过倒计时, 和 PollAppleHotKeys=Yes 配合快捷键可以大幅提升体验UsePicker: YES使用 OpenCore 的默认 GUI, 如果你希望使用其他 GUI (暂时没有), 则设置为 NODebug: Debug 有特殊用途, 除非你知道你在做什么, 否则保持原样DisableWatchDog: NO如果 macOS 在启动时卡在某些地方, 可能需要设置为 YES, 通常用于排除错误干扰DisplayDelay: 0DisplayLevel:2147483714 在屏幕上显示所有 Debug 信息0 隐藏所有 Debug 信息Target:0: 关闭日志记录3: 允许屏幕输出日志19: 允许屏幕输出 UEFI 变量日志65: 在 ESP 分区根目录生成日志文件 opencore-YYYY-MM-DD-HHMMSS.txt, 但屏幕上不显示日志Security: 安全AllowNvramReset: YES允许在引导选择界面和快捷键 Cmd + Opt + P + R 按下时重置 NVRAMRequireSignature: NO我们不会使用 Vault.plist, 选择禁用RequireVault: NO我们不会使用 Vault.plist, 选择禁用ScanPolicy: 00: 允许扫描所有可用的硬盘Tools 用于运行 OC 调试工具, 例如验证 CFG 锁 (VerifyMsrE2)NameOpenCore 启动项中显示的名称Enabled启用或禁用PathTools 文件夹下的文件名如: VerifyMsrE2.efiEntires: 用于指定 OpenCore 无法自动找到的无规律引导路径NameOpenCore 启动项中显示的名称Enabled启用或禁用Path引导磁盘的 PCI 路径，可以通过 OpenCoreShell 的 map 命令找到如: PciRoot(0x0)/Pci(0x1D,0x4)/Pci(0x0,0x0)/NVMe(0x1,09-63-E3-44-8B-44-1B-00)/HD(1,GPT,11F42760-7AB1-4DB5-924B-D12C52895FA9,0x28,0x64000)/\EFI\Microsoft\Boot\bootmgfw.efi NVRAMAdd:4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14UIScale: OpenCore UI 和引导第一阶段缩放01: 正常大小02: HIDPI (使 FileVault 和 苹果标志 在原生 HIDPI 显示器上以正常大小显示)7C436110-AB2A-4BBB-A880-FE41995C9F82boot-args: -v debug=0x100 (引导标识符, 更多请查看 附录[3])csr-active-config: &lt;00000000&gt; (SIP 设置)00000000 - SIP 完全开启30000000 - 允许未签名的 Kext 加载并允许写入受保护的文件系统路径E7030000 - SIP 完全关闭67000000 - 不再推荐使用nvda_drv: &lt;&gt;设为 31 时启用 NVIDIA WebDrivers没有 N 卡可以删除此项prev-lang:kbd: &lt;0x7a682d48616e733a323532&gt; (将默认语言设置为简体中文, 留空为英文)Block: 强制重写 NVRAM 变量, 由于 Add 不会覆盖 NVRAM 中已经存在的值, boot-args 需要利用此项来刷新具体工作原理请参考 Acidanthera bugtracker #575LegacyEnable: 允许从 nvram.plist 中读取 NVRAM 变量没有原生 NVRAM 的设备设置为 YESmacOS 下硬件 NVRAM 工作「不」正常的设备设置为 YESmacOS 下硬件 NVRAM 工作正常的设备设置为 NOLegacySchema:用于分配 NVRAM 变量, 与 LegacyEnable 配合使用, 下文会有详细讲解 PlatformInfo 机型信息Auto: YES (基于 Generic 部分生成 PlatformInfo, 而不是 DataHub, NVRAM 和 SMBIOS 部分)OpenCore 提供了大量方法来注入 PlatformInfo, 这里只介绍最简单的自动注入法Generic:SpoofVendor: YES (仿冒制造商为 Acidanthera 来避免出现冲突)SystemUUID: 填入设备的硬件 UUID 以免造成 Windows 和其它软件的激活问题 (官方不再建议留空)MLB: 用 macserial 读取或生成ROM: &lt;0x############&gt; 可以是任意 6 Byte MAC 地址, 如 0x112233000000SystemProductName: 用 macserial 读取或生成SystemSerialNumber: 用 macserial 读取或生成UpdateDataHub: YES (更新 DataHub)UpdateNVRAM: YES (更新 NVRAM)UpdateSMBIOS: YES (更新 SMBIOS)UpdateSMBIOSMode: Create (用新分配的 EfiReservedMemoryType 替换原有的表, 戴尔笔记本需要使用 Custom 并开启 CustomSMBIOSGuid) macserial使用 macserial 查看原有 PlatformInfo:打开下载好的 MacInfoPkg找到里面的 macserial 并将其复制到桌面终端输入: (建议复制粘贴)123cd ~/Desktop./macserial | grep -w 'Model:\|Valid:\|Hardware UUID:\|ROM:\|MLB:\|Serial Number:' | sed '/ \- /d' | tr -d ' ' | sed $'s/Model:/SystemProductName:/g' | sed $'s/HardwareUUID:/SystemUUID:/g' | sed $'s/SerialNumber:/SystemSerialNumber:/g' | sed $'s/\:/\: /g'此时你现有的 PlatformInfo 就已经列出来了, 对着 Config 对号入座即可如果输出的 Valid 不是 Possibly 说明这个 PlatformInfo 不符合规范, 很有可能无法激活苹果服务, 建议重新生成使用 macserial 生成新的 PlatformInfo:如果要生成新的 PlatformInfo 请输入如下命令来列出所有支持的设备型号:123cd ~/Desktop./macserial -l | grep 'Model:' | tr -d ' ' | sed $'s/Model:/\\- /g'然后输入如下命令来生成序列号和 MLB1./macserial -m &lt;设备型号&gt;请忽略 &lt;&gt;, 例子: ./macserial -m MacBookPro15,3输出的结果中, | 前面的是 序列号 SystemSerialNumber, 后面的是 MLB UEFIConnectDrivers: YES强制加载 .efi 驱动程序, 更改为 NO 将自动连接 UEFI 驱动程序, 这样以获得更快的启动速度, 但并非所有驱动程序都可以自行连接, 某些文件系统驱动程序可能无法加载Drivers: 在这里添加你的 .efi 驱动Input:KeyForgetThreshold: 5按住按键后每个键之间的时间间隔 (单位: 毫秒)KeyMergeTheshold: 2按住按键被重置的时间间隔 (单位: 毫秒)KeySupport: YES开启 OC 的内置键盘支持使用 UsbKbDxe.efi 请设置为 NOKeySupportMode: Auto 键值转换协议模式V1: UEFI 旧版输入协议V2: UEFI 新输入协议AMI: APTIO 输入协议KeySwap: NO交换 Command 和 Option 键PointerSupport: NO修复 UEFI 选择器协议PointerSupportMode: 留空TimerResolution: 50000固件时钟刷新的频率 (单位: 100纳秒)华硕主板为自己的界面使用 60000苹果使用 100000Protocols: (协议)AppleBootPolicy: NO用于确保虚拟机或旧白苹果上兼容 APFSConsoleControl: YESmacOS 引导加载程序基于文本输出的控制台控制协议, 某些固件缺少该协议。当协议已经在固件中可用时, 需要设置此选项, 并且使用其他控制台控制选项, 例如 IgnoreTextInGraphics, SanitiseClearScreen 以及 ConsoleBehaviourUi 的 ConsoleBehaviourOsDataHub: NO重新安装数据库DeviceProperties: NO确保在 VM 或旧白苹果上完全兼容FirmwareVolume: NO修复 Filevault 的 UI 问题, 设置为 YES 可以获得更好地兼容 FileVaultHashServices: NO修复运行 FileVault 时鼠标光标大小不正确的问题, 设置为 YES 可以更好地兼容 FileVaultUnicodeCollation: NO一些较旧的固件破坏了 Unicode 排序规则, 设置为 YES 可以修复这些系统上 UEFI Shell 的兼容性 (通常为用于 IvyBridge 或更旧的设备)Quirks:AvoidHighAlloc: NO主板无法正确访问 UEFI Boot Services 中更高内存的解决方法。除非有必要, 否则避免使用ClearScreenOnModeSwitch: NO从图形模式切换到文本模式时, 某些固件仅清除屏幕的一部分, 导致屏幕上残留之前绘制的图片。 此选项会在切换到文本模式之前用黑色填充整个屏幕ExitBootServicesDelay: 0IgnoreInvalidFlexRatio: NOBIOS 中无法禁用 MSR_FLEX_RATIO(0x194) 时开启IgnoreTextInGraphics: NO修复不用 -v 开机时日志覆盖苹果标志输出的问题ProvideConsoleGop: YESmacOS 引导加载程序要求 GOP (图形输出协议) 存在于控制台句柄上如果选择启动项之后不出现 macOS 启动 Verbose 请启用ReconnectOnResChange: NO有些固件在 GOP 分辨率改变后要求重新连接控制器才能输出文本, 开启这个选项会导致从 UEFI Shell 中启动 OpenCore 时直接黑屏, 尽量避免开启ReleaseUsbOwnership: NO从固件驱动程序中释放 USB 控制器所属权, 除非您不知道自己在做什么, 否则避免使用。Clover 的等效设置是 FixOwnershipReplaceTabWithSpace: NO取决于固件, 某些设备在 UEFI Shell 中编辑文件使用 Tab键 出问题时启用。注意, 此选项需要将 ConsoleControl 设置为 YESRequestBootVarRouting: YES从 EFI_GLOBAL_VARIABLE_GUID 中为 OC_VENDOR_VARIABLE_GUID 请求 redirectBoot 前缀变量启用此项以便能够在与 macOS 引导项设计上不兼容的固件中可靠地使用 启动磁盘 设置SanitiseClearScreen: YES修复 OpenCore 在高分屏中以 1024x768 显示的问题, 注意要同时开启 ConsoleControl 并将 ConsoleMode 的内容留空UnblockFsConnect: NO惠普笔记本在 OpenCore 引导界面没有引导项时设置为 YES你的 EFI 现在应该是什么样子: 解决 Clover 和 OpenCore 的冲突在重启进入 OpenCore 之前, 我们还需要解决一些冲突问题:删除 Clover 设置面板Clover 设置面板会和 OpenCore 产生冲突, 需要删除Clover 设置面板位于 /Library/PreferencePanes/Clover.prefPane终端输入 sudo rm -rf /Library/PreferencePanes/Clover.prefPane 删除清理 Clover 的模拟 NVRAM RC 脚本 和 守护程序 CloverDaemonNew在终端中输入:12345678910111213141516171819# 删除 ESP 分区下的 nvram.plistrm -rf /Volumes/(你的 ESP 分区)/nvram.plist# 删除 RC 脚本rm -rf "/etc/rc.clover.lib"rm -rf "/etc/rc.boot.d/10.save_and_rotate_boot_log.local"rm -rf "/etc/rc.boot.d/20.mount_ESP.local"rm -rf "/etc/rc.boot.d/70.disable_sleep_proxy_client.local.disabled"rm -rf "/etc/rc.boot.d/80.save_nvram_plist.local"rm -rf "/etc/rc.shutdown.local"rm -rf "/etc/rc.boot.d"rm -rf "/etc/rc.shutdown.d"# 删除 Clover 新开发的 NVRAM 守护程序 `CloverDaemonNew`launchctl unload '/Library/LaunchDaemons/com.slice.CloverDaemonNew.plist'rm -rf '/Library/LaunchDaemons/com.slice.CloverDaemonNew.plist'rm -rf '/Library/Application Support/Clover/CloverDaemonNew'rm -rf '/Library/Application Support/Clover/CloverLogOut'rm -rf '/Library/Application Support/Clover/CloverWrapper.sh'重置「硬件」NVRAM为了尽可能减少问题出现的概率, 建议在 Clover 和 OpenCore 之间切换时重置「硬件」NVRAM通过 Clover F11 清除删除 Clover 内的 EmuVariableUefi.efi (通常位于 Drives/UEFI/ 或 drivers64UEFI/ 目录下)如果不删除 EmuVariableUefi.efi, Clover 只会重置模拟出来的原本就是空的 NVRAM重启进入 Clover 引导项选择界面然后按下 F11 或 Fn+F11 直到设备自动重启开机直接选择 UEFI 引导项进入 OpenCore通过 OpenCore 重置参考下文 现在是时候开机见分晓了 完善与优化这里只简单写了一些网上暂时还找不到中文解决方案的一些问题, 强烈推荐在看这里的同时参阅 xjn 大佬的博客 排除常见错误遇到如下问题可以尝试这样设置:进入 OpenCore 时卡在 no vault provided!:Misc → SecurityRequireSignature = NORequireVault = NO选完启动项后卡在 EndRandomSeed 或直接卡死如果等一会能进入系统但是不跑码「或」不显示第一阶段的苹果标志:UEFI → QuirksProvideConsoleGop = YES如果完全卡死:尝试 Misc → Boot 下 PollAppleHotKeys = NO, UEFI → Input 下 KeySupport = NO, 并换用 UsbKbDxe.efi这个设备的 CFG 很可能有锁, 如下方案 「二选一」解锁 CFG (建议), 参考 xjn 教程中的 解锁BIOS中的CFG功能 小节Kernel → Quirks 下 AppleCpuPmCfgLock = YES, AppleCpuPmCfgLock = YES这个方法的代价是丧失原生电源管理, 「不」建议长期使用卡在 PCI Configuration BeginBIOS 关闭 CSM 并设置操作系统模式为 Win8.1/10依次尝试如下引导标识符npci=0x2000npci=0x3000如果依旧不行, 将 Booter → MmioWhitelist → Item 1 (Generic...) 下的 Enabled 改为 True4 代 CPU 主板可以尝试同时开启 Item 0 下的补丁开机出现 Failed to parse real field of type 1这是因为 OC 本身不支持 real 类型的数据, Xcode 在编辑较长的数字的时候会自动将 Integer 转换为 real用 VS Code 打开 config.plistCommand + F 查找替换所有 real 为 Integer开机卡在 This version of Mac OS X is not supported检查 Config 内 PlatformInfo 是否填写无误Automatic = YES如果使用的是 SampleFull, 确保所有内容都已完整填写300 系主板卡在 apfs_module_start较新的主板使用了新的时钟 AWAC 来代替 RTC, 这个设备与 macOS 不兼容, 下面的方法 「二选一」(推荐) 添加 SSDT-AWAC 来屏蔽 AWAC 并启动 RTC用 SSDT-RTC0 仿冒 RTC华硕或惠普关机后 BIOS 重置或被强制进入安全模式将 Kernel → Patch → Item 0 (com.apple.driver.AppleRTC) 下的 Enabled 改为 YES 来开启 AppleRTC PatchUEFI 引导项选择完 OpenCore 之后直接跳回选择界面参考上文重新核对 ESP 分区中的文件夹结构, 确保 UEFI 启动项添加的是 OpenCore 的 Bootx64.efi 模拟 NVRAM 开始之前先在这里澄清一些被广泛误解的理论并解释一些常见问题什么是 NVRAM:非易失性随机存取存储器 (NVRAM) 是随机存取存储器 (RAM) 的一种; 在依赖主板上 CMOS 电池时, 即使断开电脑电源, 该存储器仍可以保证存储的数据不丢失NVRAM 里存有大量敏感参数, 如: UEFI 安全启动的 KEK, PK, DB 和 DBX, 因此 NVRAM 需要是一种提供随机访问功能的非易失性存储器, 且需要通过特定的 GUID 读写没有「原生 NVRAM 」的含义:所谓 “没有「原生」NVRAM” 实际上指的是 macOS 在 使用 APTIO 内存修复驱动 的环境下 NVRAM 的「写入」依旧没有被修复, 导致变量无法存入主板现在支持 UEFI 的主板都支持 NVRAM, 而且 NVRAM 在 Windows 或者 Linux 下完全正常工作macOS 可以正常读取 NVRAM, 也就是说在 Windows 下给 NVRAM 中的 7C436110-AB2A-4BBB-A880-FE41995C9F82:bootargs 加上 -v 后重启进入 macOS 会直接进入啰嗦模式「没有 原生 NVRAM」很容易误解为这个主板如同传统 BIOS + MBR 引导的主板一样完全不支持 NVRAM「原生 NVRAM」实际上应该理解为 macOS 可以正常读写「硬件」NVRAM没有原生或模拟 NVRAM 的影响:无法使用偏好设置的 启动磁盘 为 OpenCore 指定默认引导项FakeSMC 的部分 SMC Key 无法保存AsusSMC.kext 会丢失键盘在上次关机时的亮度没有原生或模拟 NVRAM 完全不影响系统的正常运作, 更不存在不模拟 NVRAM 就没法开机的谬论哪些主板的硬件 NVRAM 在 macOS 下不正常工作:这里只讨论 AMI APTIO 固件的主板, Insyde 固件的主板 (常见于联想笔记本) 理论上不存在 NVRAM 问题300系 采用新 APTIO V NVRAM 保存方式的主板B360B365H310H370Q370Z390HM370 (移动端)QM370 (移动端)Z370 由于是 200 系的马甲, NVRAM 正常工作C系列 服务器芯片组主板C621C612部分 X99 和 X299 芯片组主板验证你的主板的 NVRAM 在 macOS 下是否正常工作:有时候只参考并不能得出准确的结论, 实际试验一下更加准确删除引导工具内的 VariableRuntimeDxe.efi, EmuVariableRuntimeDxe.efi, EmuVariableUefi.efi删除 NVRAM 导出脚本 LogoutHook(参考下文), RC Script(参考上文)删除 EFI 分区根目录下的 nvram.plist重启在终端输入 sudo nvram myvar=test再次重启在终端输入 nvram -p | grep -i myvar如果终端成功输出了 test 那就说明你的主板在 macOS 下硬件 NVRAM 正常工作, 反之就是「不」正常工作模拟 NVRAM 是什么, LogoutHook 扮演什么角色:模拟 NVRAM 是通过 VariableRuntimeDxe(EmuVariableRuntimeDxe/EmuVariableUefi) 模拟出一个 macOS 可读写的重启「不记忆」NVRAM, 里面的内容与硬件层面的 NVRAM 完全隔离, 引导工具在加载完这个驱动后自身也会进入这个环境中并失去对硬件 NVRAM 的控制LogoutHook 是一个在账户注销前运行的脚本, 运行时会用 nvram -x 命令将 NVRAM 中的信息导出至 EFI 分区根目录的 nvram.plist 中, OpenCore 在下一次开机时会读取 nvram.plist 里面的内容并写进硬件 NVRAM 中可以直接使用别人生成的 nvram.plist 吗使用别人的 nvram.plist 时, 只有 7C436110-AB2A-4BBB-A880-FE41995C9F82 下的内容可以正常工作8BE4DF61-93CA-11D2-AA0D-00E098032B8C 下的内容由于 UUID 不同完全无法工作, 完全无法为 OpenCore 指定默认引导项即使不模拟 NVRAM, OpenCore 和 FwRuntimeServices 提供的 7C436110-AB2A-4BBB-A880-FE41995C9F82 模拟已经足以在 nvram.plist 中正确生成此项所以这么做完全没有意义 用 LogoutHook 模拟 NVRAM 并为 OpenCore 指定默认引导项确认主板在 macOS 下 NVRAM 不正常工作后我们可以通过安装 OpenCore 提供的 LogoutHook 来模拟 NVRAM这里强烈建议在开始之前用 OpenCore 重置 NVRAM 并通过 VariableRuntimeDxe.efi 创建一个虚拟的可正常读写的 NVRAM如果严格按照这个流程执行且 Config 内 BlessOverride 和启动项的路径均已设置正确, 那么理论上 启动磁盘 为 OpenCore 指定默认引导项的功能已经可以正常工作如果 OpenCore 无法正确识别 Windows 建议先修复这个问题再模拟 NVRAM按照上文的方法清理 Clover 的 RC 脚本彻底删除之前安装的 LogoutHook终端输入: sudo defaults read com.apple.loginwindow LogoutHook 来获取 LogoutHook 的路径如果终端输出的不是一串路径, 而是The domain/default pair of (com.apple.loginwindow, LogoutHook) does not exist说明系统内没有安装 LogoutHook, 跳过下面的命令直接继续下一步 Config 的设置输入如下命令来删除 LogoutHook.command 并清空触发设置 (请按顺序执行!!!)12345# 删除文件 LogoutHook.commandsudo rm -rf $(sudo defaults read com.apple.loginwindow LogoutHook)# 清空 LogoutHook 的触发设置sudo defaults delete com.apple.loginwindow LogoutHookConfig 中:Booter → Quirks → DisableVariableWrite 设置为 YESMisc → Security → AllowNvramReset 设置为 YESMisc → Security → ExposeSensitiveData 设置为 3NVRAM → LegacyEnable 设置为 NO删除引导工具内 config.plist「和」Drivers 目录 下的 VariableRuntimeDxe.efi, EmuVariableRuntimeDxe.efi删除 EFI 分区下的 nvram.plist重启进入 OpenCore 然后 选择引导界面的重置 NVRAM 选项「或者」按下快捷键 Command + Option + P + R设备自动重启后, 进入 BIOS, Windows 或者 Win PE 重新为 OpenCore 添加引导项OpenCore 重置 NVRAM 时相比 Clover 会重置更多的变量, 理论上更干净, 但是会导致 UEFI 引导项丢失进入 macOS, 在 Config 里将 NVRAM → LegacyEnable 设置为 YES, UEFI → Drivers 下添加 VariableRuntimeDxe.efi1234▼ UEFI &lt;Dictionary&gt;|__ ▼ Drivers &lt;Array&gt; |__ Item # &lt;String&gt; FwRuntimeServices.efi |__ Item #+1 &lt;String&gt; VariableRuntimeDxe.efi在 EFI/OC/Drivers 文件夹下放入 VariableRuntimeDxe.efi再次重启进入 macOS, 打开 偏好设置/启动磁盘, 解锁后选择你的 macOS 分区然后 「锁上」终端输入命令检查 NVRAM 变量是否成功写入:1/usr/sbin/nvram -x '8BE4DF61-93CA-11D2-AA0D-00E098032B8C:Boot0080' | /usr/bin/sed '/\&lt;data\&gt;/,/\&lt;\/data\&gt;/!d;//d' | /usr/bin/base64 --decode如果输出的「结尾」部分包含 \System\Library\CoreServices\boot.efi 我们可以继续执行下面的步骤如果显示 nvram: Error getting variable - '8BE4DF61-93CA-11D2-AA0D-00E098032B8C:Boot0080': (iokit/common) data was not found 说明模拟 NVRAM 没有成功, 请回到第一步重来在终端中输入 sudo + 空格 然后将 LogoutHook 拉进终端的「窗口中」, 按下回车, 输入密码, 再次回车 (临时运行 LogoutHook)终端中会出现一排上上步提到的错误, 这是正常的因为我们没有其它的引导项 (Boot0081~3) 和上次引导的记录 (BootCurrent) 等等, 只需要确保 「没有任何关于」Boot0080 和 BootOrder 的错误出现就可以了 (BootNext 也会报错但是实测没有影响)挂载 EFI 分区并打开根目录下的 nvram.plist, 检查 Boot0080 和 BootOrder 是否存在12345678▼ ROOT &lt;Dictionary&gt;|__ ▼ Add &lt;Dictionary&gt; |__ ▼ 7C436110-AB2A-4BBB-A880-FE41995C9F82 &lt;Dictionary&gt; | |__ ... &lt;Data&gt; ... | |__ 用 Hackintool 核对内容是否一致 |__ ▼ 8BE4DF61-93CA-11D2-AA0D-00E098032B8C &lt;Dictionary&gt; |__ Boot0080 &lt;Data&gt; ... |__ BootOrder &lt;Data&gt; ...如果没有问题, 在终端输入如下命令「安装」LogoutHook:123mv (空格, 把 LogoutHook 拖窗口, 然后再空格) $HOME/.LogoutHook.commandsudo defaults write com.apple.loginwindow LogoutHook $HOME/.LogoutHook.command如果使用 10.12 或更老的系统则需要将 nvram.mojave 也复制到 $HOME 下mv (空格, 把 nvram.mojave 拖窗口, 然后再空格) $HOME再次删除引导工具内 config.plist「和」Drivers 目录 下的 VariableRuntimeDxe.efi非常重要! 不要漏了而前功尽弃!大功告成!为什么要这样才能开启默认引导项:这是一个非常有意思的命题, 已知:LogoutHook 在所有情况下都能读取 macOS 写进的变量在没有模拟 NVRAM 时macOS 可以读取硬件 NVRAM, 不能写入硬件 NVRAM, 可以写入模拟的 7C436110-AB2A-4BBB-A880-FE41995C9F82 但是不能写入 8BE4DF61-93CA-11D2-AA0D-00E098032B8COC 可以读取写入硬件 NVRAM, 可以读取 nvram.plist 并写入硬件 NVRAM使用 VariableRuntimeDxe 时macOS 可以读取写入模拟 NVRAM, 无法访问硬件 NVRAMOC 可以读取写入模拟 NVRAM, 无法从 nvram.plist 中读取并设置默认引导项但是可以将 nvram.plist 的内容写进模拟 NVRAM, 无法访问硬件 NVRAM由此可以推出 OC 的引导项顺序有可能只能从硬件 NVRAM 中读取所以上述步骤其实都是为了绕开 8BE4DF61-93CA-11D2-AA0D-00E098032B8C 的写入问题, 创建一个模拟的 NVRAM 并获取正常的值并写入 nvram.plist 再用 OC 注入硬件 NVRAM如果 OC 和 FwRuntimeServices 提供模拟的 8BE4DF61-93CA-11D2-AA0D-00E098032B8C 一切都会变得简单很多 修复 OC 引导界面的显示问题在 Config 中:UEFI → ProtocolsConsoleControl = YESUEFI → QuirksProvideConsoleGop = YESIgnoreTextInGraphics = YESSanitiseClearScreen = YESMisc → BootConsoleMode = 留空Resolution 设置为显示器的正常分辨率, 如 4k: 3840x21604 代及以下ConsoleBehaviourOs = GraphicsConsoleBehaviourUi = ForceText5 代 +ConsoleBehaviourOs = ForceGraphicsConsoleBehaviourUi = ForceText在有的固件上将两「留空」或者设为 Graphics 和 Text 效果更好如果 OC 界面出现在显示屏中央, 即使画面没有扭曲也说明分辨率不正常将 ConsoleMode 设置为 Max 并关闭 SanitiseClearScreen 在某些固件上也可以做到分辨率正确, 但是这个方法官方 「不」推荐使用 修改 OpenCore 引导界面的启动项名称在与引导项的 .efi 文件的同一目录下添加纯文本文件 .contentDetails 可以修改对应启动项的名称注意⚠️!!! 启动项名称只能是 ASCII 字符!!!下方的命令修改的是当前 macOS 的启动项名称, 修改其它分区的 macOS 前需要先进入其目录, 这里不再赘述删掉 .contentDetails 就可以恢复原来的名称终端输入:12345678910111213141516sudo -s# 在 macOS 10.15 挂载系统分区为读写mount -uw / &amp;&amp; killall Finder# macOSecho "启动项名称" &gt;&gt; /System/Library/CoreServices/.contentDetails# Windows 没有使用 BlessOverrideecho "启动项名称" &gt;&gt; /Volumes/(你的 ESP 分区)/EFI/Boot/.contentDetails# Windows 使用了 BlessOverrideecho "启动项名称" &gt;&gt; /Volumes/(你的 ESP 分区)/EFI/Microsoft/Boot/.contentDetails# 退出 sudo -sexit 附录[1] – OpenCore 支持的内核驱动 (Kext) 及其用途参考 https://github.com/acidanthera/OpenCorePkg/blob/master/Docs/Kexts.mdGitHub 项目的下载地址位于 Release 下, 驱动具体支持的设备请进入项目地址查看 有线网卡驱动及项目地址备注AppleRTL8169EthernetRealtek RTL8169 官方驱动AtherosE2200Ethernet.kext高通 Atheros Killer E2200 系列驱动AtherosL1cEthernet.kext高通 Atheros AR813x/815x 驱动IntelMausi.kext英特尔有线网卡 Acidanthera 分支IntelMausiEthernet.kext英特尔有线网卡原作者NullEthernetInjector.kext仿冒内建网卡 (没有可用的内建网卡时使用)RealtekR1000SL.kextRealtek 8111B/C/D/E/EP/F/G/GU/8411B 系列驱动RealtekRTL8100.kextRealtek RTL810X 系列驱动RealtekRTL8111.kextRealtek RTL8111/8168 系列驱动 Wi-Fi 和蓝牙驱动及项目地址备注AirPortAtheros40.kext高通 Atheros AR92xx/AR93xx 驱动, 仅用于 10.14+AirportBrcmFixup.kext非苹果官方博通网卡修复ATH9KFixup.kext高通 Atheros AR9xxx 无线网卡修复BrcmPatchRAM.kext博通网卡蓝牙固件上传BT4LEContinuityFixup.kextIOBluetoothFamily 修补MT7610联发科 MT7610RT5370联发科 RT5370RTL8192CURealtek RTL8192CU 驱动 (链接为谷歌云盘) 键盘, 鼠标和触摸设备驱动及项目地址备注ApplePS2SmartTouchPad.kext触摸板和键盘AsusSMC.kext华硕 Fn 键, 键盘背光灯和环境光传感器 驱动NoTouchID.kext禁用 Touch ID 检测, 修复输密码时卡顿SerialMouse.kext使用 Microsoft 串行鼠标协议的串行鼠标驱动VoodooI2C.kextI2C 触摸板/屏 驱动VoodooPS2Controller.kextPS2 键盘/触摸板 驱动 显卡和声卡驱动及项目地址备注AppleALC.kext定制万能声卡驱动NVIDIA CUDA driversNVIDIA CUDA 驱动NVIDIA Web-driversNVIDIA 显卡驱动SNBGraphicsMojaveInstaller二代酷睿核显驱动, 仅用于 10.14+VoodooHDA.kext万能声卡驱动WhateverGreen.kext显卡补丁驱动Polaris22Fixup.kextPolaris22/VegaM 显卡修复 CPU 和 SMC驱动及项目地址备注CPUFriend.kextCPU 变频管理FakeSMC.kext and sensorsClover 官方 FakeSMCHWPEnabler.kext启用 HWPNullCPUPowerManagement.kextAMD 和虚拟机专用版本OpcodeEmulator.kextOpcode 模拟驱动TSCAdjustReset.kextTSC 频率同步驱动VirtualSMC.kext 及传感器Acidanthera 的 SMC 和传感器驱动VoodooTSCSync.kextTSC 频率同步驱动 USB 和 其它接口驱动及项目地址备注IOElectrify.kext在雷电 3 设备上启用常开电源USBWakeFixup.kext修复 Skylake 平台 USB 唤醒黑屏SASMegaRAID.kextLSI MegaRAID SAS 系列 RAID 控制器驱动Sinetek-rtsx.kextRealtek RTSX SDHC 读卡器驱动VoodooSDHC.kextSDHC 读卡器驱动 其它驱动驱动及项目地址备注AppleIntelInfo.kextCPU / 核显 变频测试HibernationFixup.kext修复因 RTC 变量和 NVRAM 造成的睡眠问题Lilu.kextSDK &amp; LibraryLiluFriend.kext用于确保 Lilu 在 L/E 下正常加载RTCMemoryFixup.kext修复 BIOS CMOS (RTC) 内存和 AppleRTC 之间的冲突问题NightShiftUnlocker.kext解锁 NightShiftWebCamera.kext某些旧设备的摄像头驱动 附录[2] – UEFI 驱动 (.efi) 及其用途 OpenCore 支持的 UEFI 驱动ApfsDriverLoaderAPFS 文件系统引导驱动AppleGenericInput 已合并添加了对 AppleKeyMapAggregator 协议支持的用户输入驱动。此外, 还解决了某些固件上的鼠标输入问题, 这是 UsbKbDxe 的等效驱动, 根据固件的不同, 实际效果会更好或更坏CrScreenshotDxe增加 OpenCore UI 内截屏功能, 快捷键为 LCtrl + LAlt + F12 ( 左Ctrl + 左Alt + F12)FwRuntimeServices通过支持只读和只写 NVRAM 变量来提高 OpenCore 和 Lilu 的安全性。有些设置项, 例如 RequestBootVarRouting, 需要此驱动程序才能正常运行HFSPlus苹果自带的闭源 HFS 驱动, 不具有 Bless 和其它功能, 但是启动速度比它的等效驱动 VBoxHfs 快 3 倍NvmExpressDxe从 Broadwell 开始的大多数固件中都包含此驱动程序。对于 Haswell 及更早的固件, 如果安装了 NVMe SSD 就需要使用MemoryAllocation.efi为 Z390/X99 等主板预留第一组 512MB 内存, 帮助引导工具注入内核以及内核缓存至第一组 512MB 内存, 需要配合 FwRuntimeServices 和引导标识符 slide=1UsbKbDxe添加了对 AppleKeyMapAggregator 协议支持的 USB 键盘驱动, 这是 AppleGenericInput 的等效驱动, 根据固件的不同, 实际效果会更好或更坏VariableRuntimeDxeEDK II 的 NVRAM 驱动, OpenCore 中用于模拟 NVRAM, 需要配合 FwRuntimeServices(.efi) 和 DisableVariableWrite(Quirk)VirtualSmc.efiUEFI SMC 驱动程序, 对于 FileVault 2 和 macOS 的各个功能是必需的。OpenCore 使用 FakeSMC 时, 需要手动添加 NVRAM 变量, 并且应继续使用 VirtualSmc.efi 驱动VBoxHfs具有 bless 支持的 HFS 文件系统驱动程序。该驱动程序可以等效替代 Apple 固件中常见的闭源 HFSPlus 驱动。此驱动虽然功能更加完善, 但启动速度相比大约慢 3 倍，并且尚未经过安全审核XhciDxe来自 MdeModulePkg 的 XHCI USB 控制器支持驱动程序。从 Sandy Bridge 开始的大多数固件中都包含此驱动程序。在较旧的固件上可以用于支持 USB 3.0 PCI 卡部分网上无法找到的 UEFI 驱动可以在这里下载 OpenCore 不兼容的 UEFI 驱动AppleImageCodec为 Clover 启动 FileVault 2 解码 PNG 和 BMP, OpenCore 已集成AppleKeyAggregator为 Clover 支持 FileVault 2 启动 UI 的驱动, OpenCore 已集成AppleKeyFeeder为 Clover 支持 FileVault 2 内 PS/2 键盘输入的驱动, OpenCore 已集成AppleUITheme为 Clover 支持 FileVault 2 启动 UI 主题的驱动, OpenCore 已集成AptioInputFix &amp; AppleGenericInput用于解决 UEFI 固件输入问题的驱动, 已与 OpenCore 合并AptioMemoryFixNVRAM 和内存驱动, 用于修复 UEFI 固件上的内存问题, 已与 OpenCore 合并为 FwRuntimeServicesAudioDxe用于在 Clover 启动时播放声音的 HDA 驱动, OpenCore 兼容性未知CsmVideoDxe用于 Clover GUI 的显卡驱动, 允许使用更多分辨率, 基于 UEFI BIOS 中的 CSM 兼容模块, 并将启用所需的 CSM, OpenCore 不兼容DataHubDxemacOS 必需的 DataHub 协议, OpenCore 自带且提供了这个 QuirkEmuVariableUefiClover 的模拟 NVRAM 驱动, OpenCore 不兼容, 替代品为 VariableRuntimeDxeEnglishDxe在 UEFI Shell 中支持 UnicodeCollation 协议, OpenCore 自带且提供了这个 QuirkEnhancedFatDxe这个驱动已存在于所有 UEFI 固件中, 无法从 OpenCore 直接使用。由于很多固件的 FAT 支持都有问题, 导致在尝试写入时会损坏文件系统。如果在引导过程中写入 EFI 分区出现问题, 则需要将此驱动用 UEFITool 刷入固件中FirmwareVolume为 Clover 启动 FileVault 2 创建 FirmwareVolume 光标的驱动, OpenCore 已集成FSInjectClover 用于注入内核驱动 (Kext) 的驱动, OpenCore 自带且使用更先进的方法HashServiceFix修复 UEFI BIOS 中的哈希支持, OpenCore 自带且提供了这个 QuirkOsxAptioFixDrv旧的 Clover NVRAM 和内存驱动, 用于修复 UEFI 固件上的内存问题, 与 FwRuntimeServices 和 OpenCore 不兼容OSXAptioFix2Drv-Free2000.efiClover 的内存驱动, 用于修复 UEFI 固件上的内存问题, 作者已经声明会损坏硬件OsxAptioFix3DrvClover NVRAM 和内存驱动, 用于修复 UEFI 固件上的内存问题, 与 FwRuntimeServices 和 OpenCore 不兼容OsxFatBinaryDrvClover 用于支持 OS X 10.9 和更早版本的 FAT Binary 可执行文件的驱动, 与 FwRuntimeServices 和 OpenCore 不兼容OsxLowMemFixDrv精简版的 OsxAptioFixDrv, 用于修复 UEFI 固件上的内存问题, 与 FwRuntimeServices 和 OpenCore 不兼容PartitionDxe用于支持非常规分区图的驱动, 如: 混合 GPT/MBR 或 Apple 分区图, OpenCore 兼容性未知Ps2MouseDxePS/2 鼠标驱动, 这个驱动已存在于所有 UEFI 固件中SMCHelperSMCHelper 是 VirtualSmc.efi 在 Clover 中的替代品, 用于与 FakeSMC 配合。与 VirtualSmc 和 OpenCore 不兼容其它未在本文中提到的 UEFI 驱动一律不兼容 附录[3] – 常用内核引导标识符合集引导标识符作用-amd_no_dgpu_accel关闭 AMD 显卡硬件加速cpus=#启用 # 个 CPU 核心darkwake=0禁用 Power Napdart=0禁用 VT-ddebug=0x100发生 KP 时不自动重启keepsyms=1发生 KP 时保留 Debug Symbols, 用于给开发者反馈问题kext-dev-mode=1启用 Kext 开发模式, 非开发者请勿使用-no_compat_check关闭兼容性检查npci=0x2000在旧设备上禁用 kIOPCIConfiguratorPFM64nvda_drv=1启用 N 卡驱动的老方法, 在 10.12 及以后失效nv_disable=1关闭 N 卡硬件加速-s单用户模式slide=#手动设置 KASLR slide 值为 #-vverbose 跑码模式-x安全模式内核驱动提供的引导标识符请去对应驱动的 Readme 查看 参考及引用Apple 的 macOSAcidanthera 的 OpenCore 及其官方文档khronokernel 的 Getting-Started-With-OpenCore 和 Opencore-Vanilla-Desktop-GuideTonymacx86 的 Emulated-NVRAM-Uninstallerxjn 的博客 使用OpenCore引导黑苹果 鸣谢宪武 提供的 OpenCore SSDT Hotpatch 典范 OC-littlexlivans, 子俊 对 OpenCore 的大量跟进和研究OpenCore 交流群成员进行的大量测试Bat.bat 对教程对审核更新完善]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>opencore</tag>
        <tag>OC-little</tag>
        <tag>bootloader</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.5 18F132 正式版 with Clover 4928原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14.5-18F132-official-version-with-Clover-4928-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.5 18F132 正式版 with Clover 4928原版镜像5-14-2019 苹果发布了macOS Mojave 10.14.5正式版macOS Mojave 10.14.5 更新提高了 Mac 的稳定性和可靠性。本更新：支持“隔空播放 2”功能，可直接将 Mac 上的视频、照片、音乐等内容共享到具备“隔空播放 2”功能的智能电视改善了 MacBook Pro 机型（2018 年推出）的音频延迟修复了某些超大 OmniOutliner 文稿和 OmniPlan 文稿无法正常渲染的问题镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；3-28-2019更新：10.14.x解除USB端口限制补丁适用于X299和某些Z270/370/390 远景原帖1234567891011121314151617181920212223Comment: USB port limit patch #1 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB port limit patch #2 10.14.x modify by DalianSky(credit PMHeart)Name: com.apple.iokit.IOUSBHostFamilyFind: 83E30FD3Replace: 83E33FD3MatchOS: 10.14.xComment: USB Port limit patch #3 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14,10.14.1,10.14.2,10.14.3Comment: USB Port limit patch #4 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FF0F0FReplace: 83FF3F0FMatchOS: 10.14.xCLOVER更新到v4928驱动更新Lilu v1.3.6AppleALC v1.3.7Whatevergreen v1.2.9USBInjectALL v0.7.1添加config_UHD630_4K_HBR2_3E9B0000配置文件添加config_UHD630_1080P_HBR_3E9B0000配置文件添加config_WHISKEYLAKE_3EA0配置文件新增加config_WHISKEYLAKE_3EA0WHISKEY LAKE平台的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4928，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers-off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.9(5月13日编译)，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；核显驱动更多的教程请参考：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS\ Mojave\ 10.14.5\(18F132\)\ Installer\ with\ Clover\ 4928.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14.5(18F132) Installer with Clover 4928.dmg) = 371d9145484beaf0795d6b7d0d569fc3Windows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法如果卡在CLOVER主界面，请尝试更新CLOVER版本到4911及以上 【3-30-2019备注】安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接 镜像同步上传中迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：链接: https://pan.baidu.com/s/1AKuzJXJe7haNYWo00YwJlQ 提取码: ivmiMD5 (macOS Mojave 10.14.5(18F132) Installer with Clover 4928.dmg) = 371d9145484beaf0795d6b7d0d569fc3 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.5</tag>
        <tag>18F132</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.4 18E226 正式版 with Clover 4903原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14.4-18E226-official-version-with-Clover-4903-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.4(18E226)正式版 with Clover 4903原版镜像3月26日，苹果发布了MacOS Mojave 10.14.4的更新版本macOS Mojave 10.14.4 更新包括错误修复和改进，提高了 Mac 的稳定性和可靠性。Safari 浏览器• 针对支持自定颜色方案的网站增加了“深色模式”支持• 通过“自动填充密码”填充凭证简化了网站登录• 仅在与网站交互后才允许推送通知提示• 新增了载入不安全的网页时显示警告的功能• 不再支持已过期的“请勿跟踪” (Do Not Track) 标准，以防止其被用于指纹变量；智能防跟踪功能现默认开启，保护您免受跨站跟踪iTunes• Apple Music 中的“浏览”标签页下，同一页面会显示更多编辑精选内容，发现新音乐、播放列表等更加轻松AirPods• 现支持全新 AirPods（第 2 代）其他改进• “地图”现可提供美国、英国和印度的空气质量指数信息• 提升了“信息”中音频录制的质量• 在“活动监视器”中增强了对外置 GPU 的支持• 修复了可能无法通过 App Store 安装最新版本的 Pages 文稿、Keynote 讲演、Numbers 表格、iMovie 剪辑和库乐队的问题• 提高了搭配 2018 年推出的 MacBook Air、MacBook Pro 和 Mac mini 机型使用时，USB 音频设备的可靠性• 修正了 MacBook Air（2018 年秋推出）的默认屏幕亮度• 修复了连接到 Mac mini（2018 年推出）的部分外部显示器上可能发生的图形兼容性问题• 解决了升级到 macOS Mojave 之后可能发生的 Wi-Fi 连接问题• 修复了在“互联网帐户”中重新添加 Exchange 帐户后，帐户可能消失的问题• 修复了“邮件”可能频繁要求输入 AOL 用户密码的问题镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；3-28-2019更新：10.14.x解除USB端口限制补丁适用于X299和某些Z270/370/390 远景原帖1234567891011121314151617181920212223Comment: USB port limit patch #1 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB port limit patch #2 10.14.x modify by DalianSky(credit PMHeart)Name: com.apple.iokit.IOUSBHostFamilyFind: 83E30FD3Replace: 83E33FD3MatchOS: 10.14.xComment: USB Port limit patch #3 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14,10.14.1,10.14.2,10.14.3Comment: USB Port limit patch #4 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FF0F0FReplace: 83FF3F0FMatchOS: 10.14.xCLOVER更新到v4903驱动更新Lilu v1.3.5AppleALC v1.3.6Whatevergreen v1.2.7USBInjectALL v0.7.1添加config_UHD630_4K_HBR2_3E9B0000配置文件添加config_UHD630_1080P_HBR_3E9B0000配置文件添加config_WHISKEYLAKE_3EA0配置文件新增加config_WHISKEYLAKE_3EA0WHISKEY LAKE平台的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4903，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers-off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.7(3月26日编译)，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；核显驱动更多的教程请参考：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS\ Mojave\ 10.14.4\(18E226\)\ Installer\ with\ Clover\ 4903.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14.4(18E226) Installer with Clover 4903.dmg) = ee923768b29194efc704bcf34d7f9fd8Windows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法如果卡在CLOVER主界面，请尝试更新CLOVER版本到4911及以上 【3-30-2019备注】安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接 镜像同步上传中迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载 提取码: h4feMEGA：请点击下载 接头暗号：4-26wSPRWqbt4eFHDlDP8bj2iyWxao81eDqN4UFd-JcOneDrive: 请点击下载MD5 (macOS Mojave 10.14.4(18E226) Installer with Clover 4903.dmg) = ee923768b29194efc704bcf34d7f9fd8 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.4</tag>
        <tag>1.8e+227</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintosh黑苹果长期维护机型整理清单]]></title>
    <url>%2FHackintosh-long-term-maintenance-model-checklist.html</url>
    <content type="text"><![CDATA[.fancybox{display:inline-block} 黑苹果长期维护机型整理 by @我意整理这份清单的目的：在于给想体验黑苹果的人一个方向，也想减少大家重复造轮子，节约大家的时间。所有文件均归属于原作者，本清单只列出链接。如果您不希望你的链接被这份清单收录，请发送邮件到 y010204025@126.com,我将移除链接清单收录了 4 个月以内的有人长期维护并更新过 EFI 的机型链接，如果有新的链接希望收录到这份清单，请发送邮件到 y010204025@126.com致谢：感谢一直为黑苹果进行开发的各位开发者和愿意共享出 EFI 文件的开发者，谢谢！最近有好几个人发邮件，请求适配机型。建议大家使用yandex搜索引擎、github先搜索下有没有自己的机型，型号一样，机型配置有差异可以忽略，使用你的机器型号+clover、型号+EFI、型号+mac、型号+Hackintosh等进行搜索。例如我最近更新了 elitebook840g3、840g4等几个机型的 EFI，就可以使用840g3+clover 840g3+EFI 等关键词进行搜索。黑苹果论坛：国内 远景论坛、威锋论坛国外 insanelymac 论坛、tonymacx86论坛、德国黑苹果论坛、俄罗斯黑苹果论坛、法国黑苹果论坛、 osxlatitude论坛一些黑苹果常用的软件或者驱动开发者的主页，希望大家能及时更新驱动和软件，驱动需要自己去对应驱动开发者的主页去更新。RehabMan 维护了很多黑苹果驱动和相关补丁Vit9696 lilu和相关插件、applealc的主要开发或维护者Clover更新地址 Clover团队更新 clover的主要发佈渠道常用软件和驱动清单 整理了常用软件和驱动的主要发佈地址，持续修改……关于黑苹果，希望大家能摆正心态，容忍小问题的存在，某些功能无法实现或者是体验不好「触摸板、指点杆、触摸屏、雷电端口等等」，系统运行不稳定，容易卡机或者死机或者是开机不认引导、升级系统失败等都属于正常现象。 每次升级前请先从各种驱动了解本次升级有没有大的改动，在升级前首先升级 Clover 和相关的 kext 驱动，需要添加补丁或者是更新补丁的请做好相关工作，不要等著出了问题再去寻找解决方案。 在自己遇到问题的时候，请先通过网络寻找解决办法，无法解决再询问别人，请别人帮忙解决问题的时候，首先端正自己的态度，把问题描述清楚，能提供 log 日志或者是相关文件的先提供文件，提供不了文件的拍照拍清楚。解决问题，需要努力的是自己，不是让别人帮你努力；帮你解答是情分，不是义务为了感谢这份清单内机型的维护人员的长期的付出，希望大家在下载 EFI 的时候点一下 ‘star’,顺便可以点一下 ‘watch’,这样你将会收到你关注机型 efi 的更新提醒，这是对维护人员的一种肯定和鼓励。感谢各位维护人员的辛勤付出，希望在更新时能够提供必要的更新内容说明，在引用别人的补丁、或者是某些特殊版本的驱动是给出驱动的来源链接，必要时还请加入一些 credit，黑苹果更多的是大家群策群力、开放共享努力的结果。希望整个黑苹果领域能够进入良性循环状态，不用再重复造很多轮子，也希望那些使用别人成果收费的人，必要时还请留出文件来源和相关致谢，额，你付出了时间和精力收费确实是可以的，只是别整天这样独家、那样xx的，使用别人的东西，不丢人，做些声明不会抹掉你的存在。 同步更新：黑果小兵的部落阁 机型讨论：远景pcbeta.com更新日期：2018年10月06日2018年12月25日2019年01月15日2019年3月1日 by @黑果小兵按机型重新排版将该文档上传到仓库，方便其它人提交合并，共同维护2019年3月21日发布到博客添加底噪的黑苹果合集添加华为 Matebook X Pro2019年4月2日添加部分新机型将多于2个机型的品牌独立出来，方便检索2019年4月15日按品牌拆分表格，方便索引添加部分新机型2019年5月9日新增机型：Mechrevo X9Ti R / Mechrevo Z2 G 等2019年7月3日 by Cruii新增机型：暗影精灵2Pro(HP OMEN 15-ax225TX)2019年7月19日 by lgs3137新增机型：暗影精灵I(惠普PAVILION Gaming NB 15-ak039TX)2019年8月15日新增机型：ASUS X299 PRIME DELUXE II + i9 7980XE + Radeon VII2019年8月16日新增机型：MSI X370 KRAIT GAMING + 1700X + RADEON VEGA64新增机型：ASROCK X570 TAICHI + 3700X + RADEON VEGA64，兼容ASROCK X570 TAICHI(BIOS&lt;=1.21) + 1700X + RADEON VEGA642019年9月1日 by lgs3137新增机型：ASUS Y5000U(X507UBR)2019年9月7日 by lgs3137新增机型：Acer P258-MG2019年9月17日 by skyline75489新增机型：MSI GE63 Raider RGB 8RE2019年10月5日 by sarkrui新增机型：ASRock Z390M Pro4 + i7-9700K + Sapphire RX580 Nitro+ 8G2019年10月5日 by 我意新增机型：lenovo miix4(700)、miix510、E4702019年10月28日 by W-MS新增机型：Dell OptiPlex 7060 and 7070增加新版本支持： Dell OptiPlex 90202019年11月4日 by YGQ8988新增机型：HP ProBook 430 G62019年11月14日新增机型：Lenovo Y9000X2019年11月21日新增机型：Dell XPS 15 7590 笔记本部分机型 Acer 宏碁机型名称发布地址教程地址备注Acer Aspire 3 A315-51链接Acer Aspire A515-51G链接Acer Aspire A515-51G链接链接Acer A515-51G-58VH链接Acer Aspire E1-471G链接链接ACER Aspire E1-471gAcer Aspire E5 475G链接Acer Aspire E5-476G链接 链接i3-6006UAcer Aspire E5-571-5552链接Acer Aspire E1-571G链接Acer Aspire E1-572G链接Acer ES1-572-37pz链接Acer F5-573G链接Acer F5-573G-55PJ链接Acer F5-573g-75A3链接Acer Swift 3链接 SF135-52GSF315-51-518SAcer Swift 3 SF314-55G链接 链接Acer Swift 3 2019 SF314-55GAcer V3-471G链接Acer-V3-572G-51MR链接链接Acer V5-572链接链接Acer VN7-793g链接Acer-K50-10-525V链接宏碁暗影骑士3链接ACER-ASPIRE-C24-865链接Acer P258-MG链接 Asus 华硕机型名称发布地址教程地址备注Asus A43SJ链接链接Asus A43SJAsus A411UF链接Asus A442UF链接Asus A455LA链接链接Asus S455LAAsus A455LF-WX039D Series链接Asus A456UF(X456UF)链接Asus A550JK4200链接Asus F455LD链接Asus FX504GE-ES72链接Asus FX505GD链接ASUS TUF GAMING FX505GD-BQ071TAsus F556U (X556UQK)链接链接Asus F556U (X556UQK)Asus FX50J链接Asus FX50V链接Asus FX533VD链接Asus GL503GE链接Asus GL551JW链接Asus GL552VW链接飞行堡垒2016 FXPROAsus G60VW链接Asus K501LB链接Asus K55VD链接链接Asus K55VDAsus K555LD链接链接Asus K555LDAsus Laptop N56VZ链接Asus P8P67 PRO链接链接Asus ROG GL552JX链接链接Asus ROG GL552JXAsus ROG GL552VX链接Asus ROG GL553VD链接Asus ROG Zephyrus M GM501GS链接Asus ROG Zephyrus S GX531GS链接华硕玩家国度冰刃 3ASUS S4000VA链接华硕灵耀 i7-8550UAsus S4100V链接Asus S510UQ链接Asus S5300FN链接华硕灵耀2代Asus S530UN链接Asus TUF Gaming FX504链接 链接链接华硕 FX80GE FX504GEAsus UX501JW链接Asus VivoBook 15 X510UQ / S5100UQ链接Asus X441U链接Asus X441UB链接Asus X441UV链接Asus VivoBook Max X441UVK链接Asus VivoBook S15 S510UA链接链接Vivobook S510UAAsus Vivobook S530UA BQ100T链接Asus VivoBook X510UQR链接链接Asus VivoBook Y5000U (X507UBR)链接Asus W419LD链接Asus X45C链接Asus X450JB链接Asus X455LJ链接Asus X550JX链接Asus X555LB链接Asus X556UV链接Asus X75VC-TY056D链接Asus X751LJ链接Asus ZenBook 系列链接链接支持型号: UX310 - UX330 - UX330UX410 - UX430 - UX430Asus ZenBook Flip UX360UAK链接链接Asus ZenBook UX32VD链接链接Asus UX32VDAsus ZenBook UX330UAK链接链接Asus UX330UAK (Kabylake）Asus Zenbook UX450FDX链接Asus Zenbook 3 UX490链接Asus ux305fa链接华硕zx50jx4200链接华硕A407UB链接玩家国度枪神3链接这个应该是华硕的吧 DELL 戴尔机型名称发布地址教程地址备注Alienware 17 R4 i7-7700HQ链接链接外星人 17 R4，网卡推荐：DW1820AAlienware Aurora-R7链接Alienware-Aurora-R6/R7/R8链接DELL Latitude E7440链接Alienware外星人更多机型链接引用自：RockJesus维护的仓库Dell G3 3579链接 链接网卡推荐：DW1820ADell G7 7588链接 链接 链接链接2包括OpenCoreDell Inspiron 14 5447链接链接Dell-Ins-14-5447Dell Inspiron 14 7447链接链接Dell-Inspiron-14-7447Dell Inspiron 15 7000 (i7-8550U)链接Dell Inspiron 3442链接链接Dell 3443Dell Inspiron 3443链接Dell Inspiron 3543链接 链接Dell Inspiron 3568链接链接Dell Inspiron 3568Dell Inspiron 3670链接Dell Inspiron 5447链接Dell Inspiron 5488链接Dell Inspiron 5548(4528S)链接Dell Inspiron 5559链接Dell 5559Dell Inspiron 5567链接i3-7100u, Intel HD620Dell Inspiron 5570链接Dell Inspiron 5577链接 链接Dell Inspiron 7000 系列链接链接Dell Inspiron 7000 I/II (7x60/7x72)网卡推荐：DW1820ADell Inspiron 7348链接Dell Inspiron 14 7447 Pandora链接Dell Inspiron 7460 和 7560链接链接戴尔 7460 和 7560，网卡推荐：DW1820ADell Inspiron 7472链接Dell Inspiron 7548链接Dell Inspiron 7559链接 链接 链接链接Dell 7559，网卡推荐：DW1820ADell Inspiron 7567链接Dell Inspiron 7577链接Dell Inspiron 7580链接Dell Inspiron 7591链接Dell Latitude E5270链接Dell Latitude E5290链接链接Dell-Latitude-5290Dell Latitude E5440链接Dell E5440Dell Latitude E5591链接Dell Latitude E6330链接Dell Latitude E6430链接Dell Latitude E7280链接Dell Latitude E7370链接Dell Latitude E7440链接Dell Latitude E7490链接Dell OptiPlex 3050链接链接Dell OptiPlex 3060链接Dell Precision 5510链接 链接Dell-Precision-5510链接2支持CatalinaDell Precision 5591链接Dell Precision M3800Dell XPS 15-9530链接链接Dell M3800 和 XPS 9530Dell Vostro 3267链接Dell Vostro 5370链接Dell Latitude 5290 2-in-1链接Dell Vostro 5581链接Dell XPS 15 7590链接Dell XPS 15 7590，网卡推荐：DW1820ADell XPS13 9343链接链接Dell XPS 9350链接链接Dell XPS 9350Dell XPS 9360链接链接Dell XPS 9360，网卡推荐：DW1820ADell XPS 9360链接 链接链接 链接链接 链接链接Dell XPS 9360，网卡推荐：DW1820ADell XPS 9370链接Dell XPS 9530链接链接XPS 9530Dell XPS 9550链接 链接链接链接 链接Dell XPS 9550Dell XPS 9560链接链接Dell XPS 9560，网卡推荐：DW1820ADell XPS 9570链接 链接链接感谢：LuletterSoul，网卡推荐：DW1820A Gigabyte 技嘉机型名称发布地址教程地址备注Gigabyte Aero 15X链接链接Gigabyte Aero 15W链接Gigabyte Sabre 15K链接 Hasse 神舟机型名称发布地址教程地址备注神舟 k610d i5 d3链接神舟 K650D链接神舟K650D神舟 K650D i5 D2链接神舟K650D i5 D2神舟 K680E-G6D1链接神舟战神 k770e i7 d1链接p170sm-a神舟战神 Z6-SL5 D1链接神舟战神 Z7-KP7D1链接Clevo P65xHPHASEE Z7-KP7S1神舟战神 Z7(m)-KP7/5(G)Z神舟战神 Z7(m)-KP7/5EC神舟战神 Z7(m)-KP7/5GC神舟战神 Z7-C7TVK / Z7m-CT7GS / Z7-CT7VH神舟战神 G7-CT7VK仓库链接下载链接链接神舟战神 8/9 代同方全系机型神舟战神 Z7M KP5GC链接神舟战神 CT7NA链接神舟精盾系列T96E链接神舟精盾系列 K590S链接神舟GX8-P775TM链接未来人类X711，战神GX8-CP5，战神GX8-CR6，炫龙V87等使用蓝天p775tm模具的10*0系显卡都支持 HP 惠普机型名称发布地址教程地址备注HP ProBook/EliteBookZBook 系列链接链接除 8x60W,8x70W 系列之外的机型，二代 CPU 及之前的机型仅支持到 10.13.xHP Envy Haswell J/K/Q/N系列笔记本链接链接仅 4 代 envy 机型HP 15 D062TU链接 链接HP Laptop 15-da0233ur链接i3-7020UHP 17 BY0062ST链接HP Envy 13 ad024TU链接HP Envy 13 ad1xxx链接链接惠普 envy13HP Envy15 as109tu链接HP Envy 15 as110tu链接HP Envy x360 15-aq160sa链接HP Envy DV6 7303ef链接Hp Omen Ce020tx链接HP 348 G5链接HP ProBook 650 G1链接HP 840-G1链接链接HP Elitebook 840 G2链接HP Pavilion 15-au028ur链接HP Pavilion 15 au067tx链接HP Pavillion ck069tx链接HP Pavilion 15 cs1xxx链接Hp spectre X360链接EliteDesk 800-G3-Mini链接链接HP Zhan 66 Pro G1链接1 链接2HP ZHAN 66 PRO 14 G2链接HP ZHAN99 WorkStation G1链接HP ZBook 15v G5暗影精灵4 i5-8300H GTX1050Ti链接暗影精灵2链接暗影精灵 II 代ProHP OMEN 15-ax214TX链接暗影精灵2 Pro HP OMEN 15-ax225TX链接 链接HP暗影精灵3链接还有挖坑的，看看啥时候能埋人暗影精灵I (惠普PAVILION Gaming NB 15-ak039TX)链接除了独显、Intel无线网卡，其他功能模块正常(包括HDMI视频)惠普光影精靈5链接內含搞定PM981的補丁，可以試試ProBook 430 G6链接i5-8265U 已卸载内置镁光nvme SSD(此硬盘不识别) Huawei 华为机型名称发布地址教程地址备注华为 Matebook X Pro 2019链接链接华为 Matebook X Pro 2019华为 Matebook X Pro链接 链接链接华为 Matebook X Pro 2018华为 Matebook X链接华为 Matebook 13链接 链接华为 Matebook 14链接华为 Matebook D链接华为MateBook D2018 i5-8250U 15.6寸荣耀 Magicbook链接链接荣耀 Magicbook-Pro-16.1链接 Lenovo 联想机型名称发布地址教程地址备注Lenovo Flex 15链接链接Lenovo Flex 15Lenovo Ideapad 310-14IKB链接链接Lenovo Ideapad 320-15ISK链接Lenovo Ideapad 330s-14IKB链接Lenovo Ideapad 700-15ISK链接链接Lenovo-XiaoXin700-15ISKLenovo Flex 3-1580链接Lenovo G40-70M链接Lenovo G50-80链接Lenovo G510链接链接感谢：39军小兵张ThinkPad E440链接ThinkPad E450C链接ThinkPad E470链接ThinkPad E480链接链接ThinkPad E490链接ThinkPad E540链接ThinkPad E550链接链接E550 四代 CPUThinkPad E560链接链接ThinkPad L440链接Lenovo miix 520链接ThinkPad P51链接链接Thinkpad P51ThinkPad P52链接锐 7000链接联想 80WB 笔记本电脑ThinkPad S1 2017链接ThinkPad S1 2017ThinkPad S1 2018链接ThinkPad S1 2018ThinkPad T420 系列链接链接包含 T420、T420s、T520、X220X220，可通过修改支持到 10.14.xThinkPad T430链接ThinkPad T430s链接ThinkPad T440s链接ThinkPad T440p链接 链接 链接链接ThinkPad T450链接ThinkPad T450s链接ThinkPad T460 系列链接链接可支持 T460、T560、T470和 T470p4 款机型ThinkPad T460p链接ThinkPad T460s链接Thinkpad T470链接I7-7500uThinkpad T470S链接ThinkPad T470p链接链接ThinkPad T470pThinkPad T480链接ThinkPad T480s链接链接ThinkPad T480s链接 链接链接链接 链接ThinkPad T480sThinkPad T580链接鸣谢：CrazyPegasusLenovo U330/U430/U530 系列链接链接Lenovo V1000链接联想小新笔记本V1000 FHDLenovo V3000链接链接Lenovo V3000Lenovo V310 15iKB链接Lenovo V330 15IKB链接链接Lenovo-WEI6(威6)链接Lenovo Thinkbook 13SLenovo xiaoxin air13 6th链接Intel 酷睿i5 6200ULenovo XiaoXin Air 13 IWL链接 链接链接链接联想小新 Air 13 2018 IWL网卡推荐：DW1820ALenovo XiaoXin Pro 13 2019链接联想小新Pro 2019，网卡推荐：DW1820ALenovo XiaoXin Chao 5000链接联想潮 5000Lenovo XiaoXin Rui 7000链接链接Lenovo XiaoXin Chao 7000链接链接联想小新潮 7000，已支持 14 寸、12.5 寸、13.3 寸，15 寸以及13.3 寸的完美支持后续会添加，请期待……ThinkPad X1 3rd链接链接ThinkPad X1 3 代ThinkPad X1 Carbon 2015链接ThinkPad X1 Carbon 5th gen链接(5th gen, released 2017)ThinkPad X1 Carbon 6th Gen链接链接Thinkpad X1 Carbon 6th GenThinkPad X1 Yoga / Carbon链接链接Thinkpad X1 Yoga / CarbonThinkPad X1 Yoga 2018链接ThinkPad X1 Extreme链接 链接链接如果没猜错，这货就是 x1 隐士，好几个人问过，这下省事了ThinkPad X1C 6th链接链接ThinkPad X1c 6thThinkPad X220链接链接支持 10.14+ThinkPad X220链接ThinkPad-X220ThinkPad X230链接链接ThinkPad X230ThinkPad X230链接链接ThinkPad X230ThinkPad X230i链接ThinkPad X250链接 链接 链接10.15ThinkPad X260 系列链接链接ThinkPad X260Thinkpad x390-yoga链接Lenovo Y50(70) 系列链接链接Y50(70)1080P 和 4K 版本网卡推荐：DW1820ALenovo IdeaPad 530s链接感谢：39军小兵张Lenovo IdeaPad Y410P链接感谢：39军小兵张Lenovo IdeaPad Y430P链接感谢：39军小兵张Lenovo IdeaPad Y510P链接感谢：39军小兵张Lenovo Y520/Y720链接链接联想 Y520 及 Y720Lenovo Legion Y7000链接链接网卡推荐：DW1820ALenovo Legion Y7000-1060链接链接Lenovo_Legion_Y7000-1060Lenovo Legion Y7000Y530 系列链接 链接全新完美 EFI，舍弃了小键盘Lenovo Y9000X链接 链接支持CNVi直插m.2网卡，推荐：DW1820ALenovo Yoga 3 Pro 1370链接链接联想 yaga3/proThinkPad Yoga 12链接 链接链接 链接Thinkpad S1 Yoga 12链接Lenovo Yoga3 14链接Lenovo Yoga3 11链接Lenovo Yoga 13IKB链接Lenovo Yoga 520 14IKB链接Lenovo Yoga 710链接Lenovo Yoga 720链接Lenovo Yoga 720-13IKBLenovo Yoga 720链接链接Lenovo Yoga 720-12IKBLenovo Yoga 730链接Lenovo Yoga 730-13IKBLenovo Yoga 370链接Lenovo Z50(40)/70 系列链接链接Lenovo Z50-70/Z40-70 Lenovo G50-70/G40-70Lenovo-Miix-520链接链接Lenovo-Miix-520Lenovo-Miix4链接Lenovo-Miix4（700）Lenovo-miix510链接 链接Lenovo-Miix510ThinkPad P52链接链接网卡推荐：DW1820A LG机型名称发布地址教程地址备注LG Gram 14z980链接LG Gram 15Z980-G.AA52C链接LG Gram Z980链接 Mechrevo 机械革命机型名称发布地址教程地址备注Mechrevo Z2 G链接i7-9750H/GTX1660TiMechrevo X9Ti R链接i7-9750H/RTX2060/RTX2070Mechrevo Z2链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo Z2 Air链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo X8ti链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo X8ti Plus链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo S1链接 链接链接I5-8250U/I7-8550u Mx150Mechrevo S1链接I5-8265U/I7-8565u Mx250Mechrevo X2链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo S1 PLUS链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo X7TI链接I7-6700HQ/I7 7700HQMechrevo X7TI-S链接I7-7700HQ GTX1070/GTX1060Mechrevo X6TI链接i7-8750H/i5-8300H GTX1050ti/GTX1060Mechrevo X6TIS链接Mechrevo X1链接 链接i7-7700HQ/GTX1060 MSI 微星机型名称发布地址教程地址备注MSI GE60 2PL-403XCN链接MSI GE63 Raider RGB 8RE链接MSI GE70 2PC链接MSI GF63链接MSI GL62M-7REX链接MSI GL63-8RE链接MSI GL72M-7RDX链接链接MSI GP62 6QG-1071XCN链接链接微星 GP62MSI GS65 Stealth Thin 8RF链接MSI GS65 8SE链接MSI GS73VR 7RF链接MSI-Z77A-G45链接clover-z390-aorus-pro-wifi-9700k-rx580链接链接MSI Z390链接 Shinelon 炫龙机型名称发布地址教程地址备注炫龙 A40L-i7链接链接炫龙 耀7000链接链接炫龙毒刺x6链接炫龙 T3TI链接9750H+1660TI炫龙笔记本 DC2链接 链接DC2_DD链接yuedashen88基于大佬BaveLee之前的EFI的修改版本,修复了HDMI热插拔问题神舟战神Z6链接 XiaoMi 小米机型名称发布地址教程地址备注XiaoMi Air链接链接XiaoMiAir_i7 7500uXiaoMi Air链接链接小米 AirXiaoMi Air链接链接小米 AirXiaoMi Air链接XiaoMi Air链接链接小米 Notebook AirXiaoMi Air链接链接XiaoMi NoteBook AirXiaoMi Air 1gen链接这哥们应该是忠实的米粉，有兴趣的多多关注XiaoMi Air Skylake链接链接XiaoMi Air Kabylake链接Xiaomi Notebook Air 13.3 i5-7200U 指纹版XiaoMi Gaming链接额，小米游戏本XiaoMi Pro 系列链接链接小米 Pro 系列XiaoMi Ruby 15.6链接 小米ruby2019集显版目前ALC256声卡外放无法驱动网卡推荐：DW1820AXiaoMi 游戏本 8 代链接小米游戏本，猜的XiaoMi Air链接喜欢买小米的，自己区分去吧，我是分不清楚了XiaoMi Air链接 Intel 英特尔机型名称发布地址教程地址备注Intel DH67GD, DH67BL,DH67CF, DH67CL 系列主板链接链接Intel DH67GD, DH67BL,DH67CF, DH67CL 系列主板Intel NUC 5、6、7、8 系列链接链接mini 主机NUC8I5BEH链接链接 链接NUC8i7BEH链接链接链接NUC7i7BNH链接Surface Pro 3链接Surface Pro 4链接 链接链接surfacePro 4Surface Pro 6链接教程技嘉 GB-BXi5H-4200 系列主板链接链接技嘉 GB-BXi5H-4200 系列主板 Other 其它机型名称发布地址教程地址备注Clevo P950HR链接蓝天 P950HR，猜的火影地狱火X6链接炫龙毒刺x6链接Airbook链接同方 GI5CN5E链接Razer Blade Stealth 雷蛇灵刃潜行版链接三星Samsung NP300E4C链接三星Samsung NP300E5L链接三星Samsung NP300E5M链接GPD P2 MAX链接微星准系统ProBox23链接Razer_Blade_Advanced_early_2019链接链接MaiBenBen_Damai5链接麦本本-大麦5Sony VAIO pro13链接toshiba-B654L链接Terrans Force/Devil Rays DR7链接未来人类 笔记本更多的机型机型名称发布地址教程地址备注更多机型链接引用自：国光之前维护的仓库链接底噪出品：one-key-hidpi 笔记本相关资源笔记本相关资源hotpatchP-little链接Clover 部件热修复(hotpatch)宪武做的一套 ThinkPad 补丁，刚开始上传，请期待OC-little链接OpenCore 部件热修复(hotpatch)感谢：@宪武触摸板VoodooI2C-PreRelease链接触摸设备 DSDT 修补补充Bat.bat搞的GenI2Clink生成SSDT触摸板的热修复补丁(hotpatch)，以便支持VoodooI2C无线网卡推荐无线网卡MiniPCIe 接口(推荐 BCM4352HMB、DW1510)博通：BCM94322HM8L、Asus BCM94352、AzureWave AW-CE123H、AzureWave AW-NB290H、DW1510、DW1520、DW1550、高通：DW1515、DW1705、AR5BHB92、AR5BHB112 AR9285 芯片在 10.14 将不再被支持PCIe 接口博通：BCM94331CD、BCM94322MC、BCM94360CD高通：AR5BXB72、AR5BXB92、AR5BXB112M.2 接口博通：BCM94352Z(AE)、DW1560，DW1830BCM94350Z(AE)/DW1820AUSB 无线网卡RealTek系列链接 台式机台式（部分）发布地址教程地址备注AMD Ryzen CPUAMD Ryzen 7 1700x or 3700xMSI X370 Krait Gaming or ASROCK X570 TaichiRX Vega64链接10.14.6AMD Ryzen安装教程链接 链接链接 链接适用于10.12 10.13 10.14AMD FX 6300/NVIDIA GTX 650链接主板：Asus M5A97 LE R2.0MSI B350M Gaming Pro链接AMD Ryzen 5 1400MSI RX580 8GB ArmorAMD Ryzen 1700/Asus B350 Plus链接MSI GTX 1080 Gaming XAMD Vanilla Clover Patches链接链接AMD Clover补丁，以后可以直接刻盘安装，10.14.5我会同步更新针对AMD平台的配置文件敬请期待Clover-Ryzen-MSI-B450I链接INTEL CPUINTEL安装教程链接ASRock deskmini 110链接Asrock deskmini 310链接ASRock B360M-HDV链接ASRock Z370 Pro4链接套路 自用机型ASRock Z370M ITX-AC链接ASRock Z370M Pro4链接 链接链接ASRock Z370 Gaming链接链接I7-8700k/RX570ASRock Z370 Gaming ITX-ac链接ASRock Z390M Pro4 mATXlinki7-9700K + Sapphire RX580 Nitro+ 8GASRock Z390 Phantom Gaming itx链接 链接 链接链接 链接华擎 Z390 Phantom Gaming itx/acAsrock Z390 Phantom ITX链接Asus TUF B360M-PLUS-S链接ASUS Z97K 4980HQ链接I7-4980HQAsus Z170-P链接华硕Z170-P+6700K+RX470Asus ROG STRIX H370-I GAMING链接mini-ITX H370 motherboardAsus STRIX Z270-E链接Asus STRIX Z270-EAsus ROG Strix Z390-E链接Intel i9-9900k+UHD630核显ASUS X299 PRIME DELUXE II链接i9 7980XE + Radeon VIIAsus X299链接Asus ROG STRIX X299-E GAMING链接INTEL® CORE™ i7-7800XCM238 i7-8950H UHD630 ALC269链接S200H_I7-8750H 小主机Dell OptiPlex 3050链接Dell OptiPlex 9020M链接 链接链接Disable MSR 0xE2 (i.e. cfg lock) setup_var 0xDA2 0x00Increase DVMT to 96M setup_var 0x263 0x03链接3支持CatalinaDell OptiPlex 7060Dell OptiPlex 7070链接Increase DVMT to 64M setup_var 0x8DC 0x2 ，不支持96M模式，切勿使用0x3或在其他型号使用此命令。支持Catalina。Dell Precision Tower 3620链接Lenovo M93P链接联想 M93P 系列主机Lenovo ThinkCentre M720Q链接B360 AORUS Gaming 3链接Gigabyte X370N链接 链接Gigabyte Z370NDQ77KB链接Gigabyte Z270X-UG链接链接Gigabyte Z370N WIFI链接 链接Mac-Mini-KillerZ370N WIFI VEGA64Gigabyte Z390 AORUS链接备注：如果不是9900k/9700k/8500/8700k CPU，需要打Device RTC补丁Gigabytes Z390 AORUS ELITE链接I9-9900K/Intel (Z380) HD 630 2GGigabyte Z390 AORUS PRO链接WIFI Mini ITXGigabyte Z390 M Gaming链接技嘉 Z390mGigabytes Z390 Ultra链接Lenovo M73 Tiny链接Huanan X79 E5-2670, GTX650链接链接华南 x79 V2HP Elitedesk G3链接HP Z420链接E5 1650v2HP Z600 Workstation链接Mac-Mini-KillerMSI B360链接也适用于MAG Z390 TOMAHAWK(MS-7B18)msi-b360m-i3-8100-rx570链接MSI Z370-A链接链接黑果小兵MSI Z370-A自用EFIASRock-Z370-Gaming-ITX-ac-hackintosh链接Gigabyte-Z390M链接技嘉Z390m-gamingASUS-PRIME-Z390链接ASUS-PRIME-Z390GA-Z77P-D3链接GA-Z77P-D3Deskmini-310链接Deskmini-310GA-B360M-D3H链接GA-B360M-D3HGA B360m d2v链接技嘉B360m，支持DVI输出Soarsea mini PC链接S200HMSI-B360M-MORTAR-IMACPRO链接ASRock B360M Pro4链接Lenovo Thinkpad P1MobileWorkStation链接z370m mortar i7-9700k链接Gigabyte Z370-HD3P链接 台式机其它机型机型名称发布地址教程地址备注更多机型链接引用自：国光之前维护的仓库链接底噪出品：one-key-hidpi耕田男孩维护的几个机型华硕H81-PLUS ASUS-Z97 ASUS X299 deluxe 硬件兼容列表机型名称发布地址教程地址备注硬件兼容列表链接感谢: CrazyPegAsus黑苹果购买指南链接Hackintosh Buyers Guide黑苹果安装学院链接链接这个和本repo功能类似，既然作者开放了，我们也可以收录补充黑苹果互助项目链接和本repo类似 其它机型请提交到这里.fancybox{display:inline-block}]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>EFI</tag>
        <tag>Hackintosh</tag>
        <tag>向导</tag>
        <tag>guide</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[教程：利用Hackintool打开第8代核显HDMI/DVI输出的正确姿势]]></title>
    <url>%2FTutorial-Using-Hackintool-to-open-the-correct-pose-of-the-8th-generation-core-display-HDMI-or-DVI-output.html</url>
    <content type="text"><![CDATA[讲在前头本篇文章，适用于使用了较新主板并且搭配英特尔核显的用户。如果你的板载HDMI无法正常工作，那么可以参考本教程的方案来对你的HDMI进行缓冲帧修复从而修复HDMI输出 。如果你的主板系列为360,370或390，带有台式CoffeeLake处理器，或是技嘉，华硕，华擎以及微星主板，可以参考下文章末尾的各种主板补丁汇编。 工作原理不同主板上的板载视频接口有许多不同的组合，有些是1个HDMI+2个DP，有些则是2个HDMI，还有可能是DVI和VGA。（当然，VGA在MacOS里是不能使用的，请记住这点）。当MacOS初始化IGPU驱动（称为AppleIntelFramebuffer）时，它并不知道主板上的接口是什么类型的。但是，它会根据你选择的 平台 ID，作出默认假设。例如，对于 平台 ID 0x3E9B0007，默认情况下它将所有接口视为DP接口，如果将DP显示器连接上，它就会立即工作。但是，如果将HDMI或DVI显示器连接上 ，就没有图像显示。 这是因为此时MacOS认为这些显示器是DP接口的。主板上每个视频接口都与其对应的接口号相关，彼此不同。而在MacOS中，最多允许核显连接3个外部显示器，接口号为5,6和7。我们所要做的，正是确定主板上什么接口连接到HDMI，什么接口连接到DVI，什么接口连接到DP，搞清接口号与物理接口的映射关系，然后填写缓冲帧表向MacOS提供映射信息。这种映射的接口也叫cons，任何软件接口都可以映射到这些接口。3个 连接接口(connectors) 名称分别为：con0con1con2接口号5,6和7可以作为软件的索引(Index)，索引号分别为1,2和3。它们有如下对应关系：索引号1(Index 1)始终指向物理接口5索引号2(Index 2)始终指向物理接口6索引号3(Index 3)始终指向物理接口7例如：如果我们想告诉MacOS物理接口6是HDMI类型，我们就标记此接口的索引号为2。如果我们想告诉MacOS物理接口5是DVI类型，我们就标记标记此接口的索引号为1（注意：DVI和HDMI在MacOS中等效）。如果我们想告诉MacOS物理接口7是DP类型，我们就标记此接口的索引号为3。除了标记索引之外，我们还需要为每个索引指定一个总线ID。每种类型接口的总线ID值是有适用范围的，它们的可用范围见下表：附表：接口类型和总线ID的对应表DPHDMIDVI0x020x010x010x040x020x020x050x040x040x060x060x06在这里面DP灵活多变，允许使用总线ID 有0x02,0x04,0x05,0x06，每个值理论上适用于任何主板。HDMI非常严格，只允许使用以下总线ID: 0x01,0x02,0x04,0x06，而且部分主板只接受这些值中的一种或两种。例如，技嘉 Z390只接受0x04。DVI与HDMI相同，使用相同的总线ID，甚至使用相同的类型。 准备开始接下来，我们首先要确定每个物理接口的类型。完成这个以后，其余部分的工作量会相对小些。我们要明确的有三个东西：接口5（索引1）的类型接口6（索引2）的类型接口7（索引3）的类型如图所示然后整理出一个像这样的表格：Ports接口Indexs索引Types类型总线ID0x0510x0620x073备注Port 0x05,0x06,0x07Index 1,2,3HDMI/DP/DVI0x01,02,04,05,06备注：步骤1：确定物理接口类型步骤2：为每个索引分配总线ID和类型，数值请参照上面整理出的接口类型和总线ID的对应表在开始之前要做的事情点击这里下载Hackintool。安装Lilu和WhateverGreen使用正确的图形设备ID和值启动计算机，这些都可以在四叶草中轻松完成。以下方法均可参考使用：方法1：通过Clover Configurator直接配置（推荐）Devices ▸ Fake ID ▸ IntelGFX ▸ 输入适当的设备ID（例如0x3E9B8086）Graphics ▸ 勾选 Inject IntelGraphics ▸ ig-platform-id ▸ 单击下拉菜单并选择适当的ID（例如0x3E9B0007）方法2：在Clover Configurator的Devices页面中添加自定义属性Properties下面的PciRoot(0x0)/Pci(0x2,0x0),AAPL,ig-platform-id, 和device-id值必须要替换为适合你的123456789101112&lt;key&gt;Properties&lt;/key&gt;&lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt;BwCbPg==&lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt;mz4AAA==&lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt;AQAAAA==&lt;/data&gt; &lt;/dict&gt;&lt;/dict&gt;对于大多数Coffee Lake桌面处理器，可注入设备ID 0x3E9B以及 平台ID 0x3E9B0007。当然，也可以参考此framebuffer修补指南来确定适合你的值，它将使你接口的驱动程序正常加载。如果显卡驱动的加速不能正常加载，这篇文章的内容将毫无意义；而那些将所有接口的索引号设置为 -1的任何 平台ID 叫做无接口Platform ID，这样的ID因为会把所有输出接口屏蔽，因此必须避免使用。例如Platform ID 0x3E920003就是这样的，如下所示：显卡驱动的加速正常工作时，主板的HDMI和DVI接口不能工作。此时你必须将显示器连接到主板上工作正常的视频接口（比如DP，一般是笔记本）或者驱动独立显卡并将显示器连接到独立显卡上（台式机，能屏蔽核显的笔记本）。运行Hackintool确定显卡的工作状况。如果GPU信息正确显示如下图所示，那么您就可以继续了。如果你看到GPU：??? ，那么你就需要重新开始或者求助其他人。列出主板上的视频接口（如HDMI，DP，DVI），不包括VGA。为测试每个视频接口，你需要为每种类型的视频接口准备显示器与连接线。当然没有的话也可以继续，但这会增加一些不确定因素。确保显卡加速驱动正确加载后，从config.plist中清除以下设置（使用Clover Configurator来完成）但是不要重新启动：Device ▸ Fake ID ▸ IntelGFX ▸ 清空该条目。Graphics ▸ 🔲 Inject Intel ▸ 取消选中该复选框。Graphics ▸ ig-platform-id ▸ 清空该条目。保存config.plist并退出Clover Configurator。 准备工作运行Hackintool。从顶部菜单栏中选择缓冲帧并选择macOS 10.14。从应用补丁菜单中，选择应用当前补丁，可看到其前面打钩（这个选项用于显示改动后的设置，不勾选在Hackintool中将不能看到更改）。那是因为您未标记 应用当前补丁。注意：如果要查看以前应用的设置，只需再次选择 应用当前补丁。选择合适的平台ID（不包括无意义平台ID）。这里我们以平台ID 0x3E9B0007为例。单击Connectors选项卡，程序列出了接口映射表 。我们可以在其中分配Index（索引号），总线ID，通道，类型和标识符。我们现在看到的就是con0，con1和con2的映射表，但此时它们的值没有意义。如果此时有显示器连接，其中一栏将红色突出显示。这里我使用的只有DP输出显示器，所以只会突出它，它显示红色这栏属于DP连接。接下来我需要确定它的接口号，只需要单击红色这栏并从窗口右下角读取接口号就行了。一个确定下来，就去确定第二个。我们现在知道了接口5 - 索引1 是DP输出，所以结果如下： 开始操作始终让主显示器保持连接状态。将另一个接口与该类型的显示器连接。有可能所有的DP连接都会亮起，但DVI和HDMI可能会亮，也可能不会亮。Hackintool中的一栏将亮为红色。因为我的主板有两个DP接口，所以我现在从第一个接口上拔下电缆并将其插入第二个接口，此时另一栏就会亮为红色。接着，我们需要再次通过单击红色栏来确定接口号。我们可以看到，第二个DP接口的接口号为6。现在我们的修改如图所示：由于我的主板只有3个视频接口，而且我知道我的HDMI输出无法正常工作，因此无需尝试连接HDMI电缆就可以得知信息。当然你也可以接上一个来验证你所期待的黑屏。通过这个排除过程，我们得出结论：接口5（索引1）是DP输出接口6（索引2）是DP输出接口7（索引3）必然是 HDMI现在看下类型和索引这两列。我们看到所有三栏都被错误地设置为了 DP，索引号分别为1,2和3。前两个似乎没问题，但我们刚刚确定的索引3必然是HDMI，因此这个输出类型（Type）存在问题。此时，我们从下拉菜单中将索引3的类型 更正为HDMI并将其总线ID设置为0x04。为什么我们选择了0x04呢？确实，总线ID还有其它可能的值，但我们需要从某处开始并一次测试一种可能性。由于总线ID 0x04当前已分配给索引2，因此我们在它们之间交换一下值。让索引2使用总线ID 0x06（这是DP的有效总线ID之一），索引3使用0x04。此时结果如下：然后我们测试下变化。单击应用补丁选项卡，并在显示的选择通用和高级子选项卡：（我这里用的Coffee Lake处理器，所以设备ID在高级子选项卡应设置为0x3E9B：Intel UHD Graphics 630。你得根据自己的CPU 选择最合适的设备ID。）有时Hackintool会因为某些复选框的变化而重置接口设置的界面。因此，请在此时返回 接口 页面，再次检查您的设置是否完全正确并对错误项作出修正。然后返回 应用补丁 页面，单击 生成补丁。接着，我们挂载四叶草的EFI分区（用Clover configurator或是其他方法），然后从Hackintool菜单栏中选择文件 ▸ 导出 ▸ Clover config.plist，如下所示：从出现的文件浏览器中，定位到四叶草的config.plist。Hackintool将自动备份现有文件，并以毫无破坏性的方式将补丁直接注入config.plist。接下来重启系统。当Mojave启动时，登录进入系统并将主板的HDMI接口连接到显示器上的HDMI输入，测试其输出是否正常。此时它可能不会工作，但如果工作，我们就完成了修改。如果HDMI（或DVI）无法正常工作，那么继续尝试使用其它允许的总线ID。再次运行Hackintool，选择缓冲帧 ▸ macOS 10.14并验证应用补丁 ▸ 应用当前补丁被正确勾选。然后重复步骤5到13，但要使用以下列出的不同总线ID：如果您的视频接口少于3个，有两个方案可用于禁用未使用的索引。方案1是将索引号设置为-1。方案2是保持索引值不变，但将总线ID设置为0x00。根据一些用户反馈，方案2可能是值得最先尝试的。例如，如果您在接口0x07（索引3）处有一个HDMI，您可以尝试下面的任意配置。​附表：接口0x07的单个HDMI的可能配置 12345组合1:Index 3: 总线ID 0x04, 类型 HDMIIndex 1: 总线ID 0x00, 类型 DUMMYIndex 2: 总线ID 0x00, 类型 DUMMYIndex -1: 总线ID 0x00, 类型 DUMMY12345组合2:Index 1: 总线ID 0x00, 类型 DUMMYIndex 3: 总线ID 0x04, 类型 HDMIIndex 2: 总线ID 0x00, 类型 DUMMYIndex -1: 总线ID 0x00, 类型 DUMMY12345组合3:Index 1: 总线ID 0x00, 类型 DUMMYIndex 2: 总线ID 0x00, 类型 DUMMYIndex 3: 总线ID 0x04, 类型 HDMIIndex -1: 总线ID 0x00, 类型 DUMMY为了减少显卡故障并防止一些（罕见的）引导故障，建议启用disablegfxfirmware复选框，如图所示。 收尾工作这个工作相对简单，因为默认情况下三个接口中的两个已经配置正确，而且几乎没有什么变化情况。但是，如果连接另一个视频接口时没有亮起怎么办？在这种情况下，你就必须不断尝试各种组合。如果其中一个接口是默认已知的，那么你就只需要再知道一个或两个接口的值。比如，你已经知道接口5（索引1）是DP，而这是你能获得的全部信息。那么，如果下一个要配置的接口是HDMI，就可以尝试将HDMI分配给接口6（索引2）并适当设置其接口类型和总线ID并重新启动。如果HDMI仍未正常工作，则可以将其分配给接口7（索引3）并适当设置其类型和总线ID。如果仍然失败，就需要在接口6上尝试不同的总线ID，然后再在接口7上尝试，直到找到正确组合。成功启用HDMI（或DVI）后，我们可以再次运行Hackintool来检查接口号。首先，我们看到标记为HDMI的栏现在亮为红色（第一栏是我们的DP连接），并且如果我们点击HDMI栏本身，我们可以确认接口号确实是0x07。 这样，我们的 工作就结束了。 各种主板补丁示例集合从Hackintool2.0.6开始，内部集成了国外论坛的成员提交的缓冲帧补丁示例的集合，现在只需要轻松几步就能生成写好的补丁运行Hackintool。从顶部菜单栏中选择缓冲帧并选择macOS 10.14。从应用补丁菜单中，选择应用当前补丁，可看到其前面打钩的是正确的状态。在菜单栏 -&gt; 应用补丁 -&gt; 主板接口 中选择你的主板（如果没有，请按照上文的方法手动创建补丁）这里提供给各位一些国外论坛的成员提交的Framebuffer补丁示例，与上文Hackintool中的补丁一致，你可以手动添加到你的Config.plist中。 示例代码插入的方法挂载EFI分区并以文本方式打开config.plist寻找以下示例部分的代码，并插入相应的代码1234567891011121314151617181920212223242526272829303132333435363738394041&lt;key&gt;Devices&lt;/key&gt;&lt;dict&gt; &lt;key&gt;Audio&lt;/key&gt; &lt;dict&gt; &lt;key&gt;Inject&lt;/key&gt; &lt;integer&gt;11&lt;/integer&gt; &lt;key&gt;ResetHDA&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;key&gt;FakeID&lt;/key&gt; &lt;dict&gt; &lt;key&gt;ATI&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;IMEI&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;IntelGFX&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;LAN&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;NVidia&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;SATA&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;WIFI&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;key&gt;XHCI&lt;/key&gt; &lt;string&gt;0x0&lt;/string&gt; &lt;/dict&gt; ----- 把缓冲帧代码插入到这里，但要在USB之前----- &lt;key&gt;USB&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AddClockID&lt;/key&gt; &lt;false/&gt; &lt;key&gt;FixOwnership&lt;/key&gt; &lt;true/&gt; &lt;key&gt;Inject&lt;/key&gt; &lt;true/&gt; &lt;/dict&gt; &lt;key&gt;UseIntelHDMI&lt;/key&gt; &lt;false/&gt; &lt;/dict&gt;保存文件并重启 技嘉Designare Z390和Coffee Lake CPU（第一种）技嘉Designare Z390和Coffee Lake CPU（第一种）索引1, 总线ID 0x01, 类型DP索引2, 总线ID 0x06, 类型DP索引3, 总线ID 0x04, 类型HDMI1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉Designare Z390和Coffee Lake CPU（第二种）技嘉Designare Z390和Coffee Lake CPU（第二种）索引1, 总线ID 0x05, 类型DP索引2, 总线ID 0x06, 类型DP索引3, 总线ID 0x04, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; CQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; CgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; CAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉Z390 AORUS Elite和Coffee Lake CPU技嘉Z390 AORUS Elite和Coffee Lake CPU索引1, 总线ID 0x00, 类型HDMI (这块接口类型无所谓)索引2, 总线ID 0x00, 类型HDMI (这块接口类型无所谓)索引3, 总线ID 0x04, 类型HDMI (这是实际使用的接口)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; kj4AAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AACQAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AAAwAQ== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAgA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉Z390 AORUS Master和Coffee Lake CPU警告：这个板只有一个视频输出口，类型为HDMI技嘉Z390 AORUS Master和Coffee Lake CPU索引1, 总线ID 0x05, 类型 DP索引2, 总线ID 0x06, 类型 HDMI索引3, 总线ID 0x04, 类型 HDMI （这个口可能有输出也可能没有）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; CQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; CAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; CgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAYA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉Z390M Gaming and Coffee Lake CPU技嘉Z390M Gaming and Coffee Lake CPU索引1, 总线ID 0x01, 类型DP索引2, 总线ID 0x02, 类型HDMI（实际是DVI输出）索引3, 总线ID 0x04, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; CQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; CAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; CgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAYA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉H370M-DS3H and Coffee Lake CPU技嘉H370M-DS3H and Coffee Lake CPU索引1, 总线ID 0x05, 类型DP索引2, 总线ID 0x06, 类型HDMI(实际为DVI，可能不工作)索引3, 总线ID 0x04, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; kj4AAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉H370N WiFi and Coffee Lake CPU技嘉H370M-DS3H and Coffee Lake CPU索引1, 总线ID 0x01, 类型HDMI索引2, 总线ID 0x06, 类型HDMI索引3, 总线ID 0x05, 类型DP （未测试，但应该工作）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 技嘉H310M and Coffee Lake CPU技嘉H310M and Coffee Lake CPU索引1, 总线ID 0x05, 类型DP （VGA接口但是工作）索引2, 总线ID 0x06, 类型HDMI （未使用）索引3, 总线ID 0x04, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAYA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; Asus Prime H370M-Plus, ASUS Prime Z390-A, Asus ROG Strix B360-I, Asus TUF Z390M-Pro Gaming, Asus Prime H370-Plus and Coffee Lake CPU主板型号：Asus Prime H370M-PlusASUS Prime Z390-AAsus ROG Strix B360-IAsus TUF Z390M-Pro GamingAsus Prime H370-Plus索引2, 总线ID 0x02, 类型HDMI (实际是DVI)索引3, 总线ID 0x04, 类型HDMI索引1, 总线ID 0x01, 类型DP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; CgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; CAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; CQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; ASRock Z370 Taichi and Coffee Lake CPUASRock Z370 Taichi索引1, 总线ID 0x05, 类型DP索引2, 总线ID 0x04, 类型HDMI索引3, 总线ID 0x06, 类型DP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; kj4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAgA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; ASRock B360M-itx/ac and Coffee Lake CPUASRock B360M-itx/ac索引1, 总线ID 0x01, 类型HDMI索引2, 总线ID 0x02, 类型HDMI (实际是DVI，可能不工作)索引3, 总线ID 0x06或0x04, 类型DP12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2, 0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-pipecount&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; ASRock H370M-ITX/AC and Coffee Lake CPUASRock H370M-ITX/AC索引1, 总线ID 0x05, 类型DP索引2, 总线ID 0x02,类型HDMI索引3, 总线ID 0x01, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; kj4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAgA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; ASRock Fatal1ty Z370 Gaming-ITXac and Coffee Lake CPUASRock Fatal1ty Z370 Gaming-ITXac索引1, 总线ID 0x05, 类型DP索引2, 总线ID 0x04, 类型DP索引3, 总线ID 0x06, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAgA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 微星Z390M Gaming Edge AC and Coffee Lake CPU微星Z390M Gaming Edge AC索引1, 总线ID 0x01, 类型HDMI索引-1, 总线ID 0x00, 类型虚拟索引3, 总线ID 0x06, 类型DP123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2, 0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; mAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; CAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; hwEAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; CQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; hwEAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; CgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAQAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;data&gt; AACQAw== &lt;/data&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt; AAAAYA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 微星Z390M Gaming Plus and Coffee Lake CPU微星Z390M Gaming Plus索引1, 总线ID 0x01, 类型HDMI索引2, 总线ID 0x00, 类型虚拟索引3, 总线ID 0x00, 类型虚拟索引-1, 总线ID 0x00, 类型虚拟123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;enable-hdmi20&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; Pre-Built Hewlett Packard HP Pavilion 590-p0066 and Coffee Lake CPU警告：这个主板有VGA与HDMI输出，这里只开启HDMI，VGA不受支持。索引1和3可设置为总线ID=0x00以及Type=DUMMY ，尽情尝试试验。Hewlett Packard HP Pavilion 590-p0066索引1, 总线ID 0x05, 类型HDMI索引2, 总线ID 0x02, 类型HDMI索引3, BudID 0x04, 类型HDMI123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt; BwCbPg== &lt;/data&gt; &lt;key&gt;device-id&lt;/key&gt; &lt;data&gt; mz4AAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-busid&lt;/key&gt; &lt;data&gt; BQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-index&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con0-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-busid&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-index&lt;/key&gt; &lt;data&gt; AgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-busid&lt;/key&gt; &lt;data&gt; BAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-flags&lt;/key&gt; &lt;data&gt; xwMAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-index&lt;/key&gt; &lt;data&gt; AwAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-pipe&lt;/key&gt; &lt;data&gt; EgAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;data&gt; AAgAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-busid&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-flags&lt;/key&gt; &lt;data&gt; IAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-index&lt;/key&gt; &lt;data&gt; /////w== &lt;/data&gt; &lt;key&gt;framebuffer-con3-pipe&lt;/key&gt; &lt;data&gt; AAAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-con3-type&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;data&gt; AQAAAA== &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt; 更新日志：2019年1月15日Intel FB-Patcher已更名为 Hackintool2019年1月19日指南大幅修改请注意可能存在的HDMI热插拔问题。启动后，您可能需要拔下并重新插入HDMI电缆。2019年3月8日针对新的Hackintool GUI设计更新了屏幕截图，并添加了disablegfxfirmware 鸣谢：penghubinzhou: https://github.com/penghubingzhouBat.bat: https://github.com/williambj1参考资料：https://www.tonymacx86.com/threads/guide-general-framebuffer-patching-guide-hdmi-black-screen-problem.269149/]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>核显</tag>
        <tag>HDMI</tag>
        <tag>Hackintool</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.3 18D42 正式版 with Clover 4859原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14.3-18D42-official-version-with-Clover-4859-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.3(18D42)正式版 with Clover 4859原版镜像1月22日，苹果发布了MacOS Mojave 10.14.3的更新版本macOS 10.14.3的更新日志如下：macOS Mojave 10.14.3 更新提高了 Mac 的安全性、稳定性和兼容性。镜像靓点：Clover默认配置文件config.plist原则上支持各种机型引导安装；去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；1-28-2019更新：10.14.x解除USB端口限制补丁适用于X299和某些Z270/370/390 远景原帖1234567891011121314151617181920212223Comment: USB port limit patch #1 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB port limit patch #2 10.14.x modify by DalianSky(credit PMHeart)Name: com.apple.iokit.IOUSBHostFamilyFind: 83E30FD3Replace: 83E33FD3MatchOS: 10.14.xComment: USB Port limit patch #3 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB Port limit patch #4 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FF0F0FReplace: 83FF3F0FMatchOS: 10.14.xCLOVER更新到v4859驱动更新Lilu v1.3.2AppleALC v1.3.5Whatevergreen v1.2.7USBInjectALL v0.7.1添加config_UHD630_4K_HBR2_3E9B0000配置文件添加config_UHD630_1080P_HBR_3E9B0000配置文件添加config_WHISKEYLAKE_3EA0配置文件新增加config_WHISKEYLAKE_3EA0WHISKEY LAKE平台的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4859，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efi该驱动位于/EFI/CLOVER/drivers-off目录下 或者 Slide值获取及计算Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.7，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS\ Mojave\ 10.14.3\(18D42\)\ Installer\ with\ Clover\ 4859.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14.3(18D42) Installer with Clover 4859.dmg) = 450c55e5c5d3f4bfae6bb55ff2a33aeaWindows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Hackintool(原Intel FB-Patcher)使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：远景：黑苹果长期维护机型资料整理(2019年3月1日更新) 或者 本站：黑苹果长期维护机型整理清单 ，如果你有自己机型的EFI也可以提交到这里支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动已更新Lilu(v1.3.2)、AppleALC(v1.3.5)、WhateverGreen(v1.2.7)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载MEGA：请点击下载 接头暗号：4-26wSPRWqbt4eFHDlDP8bj2iyWxao81eDqN4UFd-JcOneDrive: 请点击下载MD5 (macOS Mojave 10.14.3(18D42) Installer with Clover 4859.dmg) = 450c55e5c5d3f4bfae6bb55ff2a33aea 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.3</tag>
        <tag>18D42</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Slide值获取及计算]]></title>
    <url>%2FSlide-value-acquisition-and-calculation.html</url>
    <content type="text"><![CDATA[Slide值获取及计算用啰嗦模式进系统，拍照留意错误信息Error allocating 0x0x116F6 pages at 0x00000000093eb000 alloc type 2 注意0x116F6，每个人的数值估计都不一样。通过CLOVER引导主界面，进入UEFI Shell 64界面，输入memmap -b，在图中找到（Type列的值是Available，Pages列的值大于等于0x116F6，Start列的值比10000000大）一般用第10行的数值TypeStartEnd# PagesAttributes……………Available00000000 1000B00000000000 5F04FFFF00000000 0004F04500000000 0000000F……………用公式：Start / 200000 + 1 计算出Slide值：1000B000 / 200000 = 80（忽略小数点后数字），80 + 1 = 81(16进制)，转换成10进制，显示为129。进制在线转换boot args添加：slide=129BIOS更新后可能需要重新计算该值]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>CLOVER</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintool(Intel FB Patcher) USB定制视频]]></title>
    <url>%2FIntel-FB-Patcher-USB-Custom-Video.html</url>
    <content type="text"><![CDATA[Hackintool(Intel FB Patcher) USB定制视频3-28-2019更新：10.14.x解除USB端口限制补丁1234567891011121314151617181920212223Comment: USB port limit patch #1 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB port limit patch #2 10.14.x modify by DalianSky(credit PMHeart)Name: com.apple.iokit.IOUSBHostFamilyFind: 83E30FD3Replace: 83E33FD3MatchOS: 10.14.xComment: USB Port limit patch #3 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14,10.14.1,10.14.2,10.14.3Comment: USB Port limit patch #4 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FF0F0FReplace: 83FF3F0FMatchOS: 10.14.x如果你应用了新的10.14.x解除USB端口限制补丁，可以不必进行USB端口的定制，当然如果你想让它工作的更好，比如睡眠，那么可以接着看下面的内容。原方法：从10.14.2开始，旧有的解除USB端口限制的补丁已经失效，很多的台式机因此而无法使用到所有的端口，本视频教程就是帮助大家更好地定制自己的USB驱动主旨：将可用的端口控制在15个以内；USB 3.0端口优先，必要的情况下删除掉部分USB2.0端口警告：固定插入的设备要改成内建，否则会存在睡眠秒醒的问题小课堂：一条命令显示USB数量打开终端，输入命令：1sh -c "$(curl -fsSL https://raw.githubusercontent.com/daliansky/Hackintosh/master/Tools/usb_Ports)"输出如下：1234567891011121314151617181920212223242526+--XHC@14IOPCIDevice|+--XHC@14000000|+--HS01@14100000|+--HS02@14200000|+--HS03@14300000|+--HS04@14400000|+--HS05@14500000||+--Integrated_Webcam_HD@14500000|+--HS06@14600000||+--USB2.0-CRW@14600000|+--HS07@14700000|+--HS08@14800000||+--BCM20702A0@14800000|+--HS09@14900000|+--HS10@14a00000|+--USR1@14b00000|+--USR2@14c00000|+--SS01@14d00000|+--SS02@14e00000|+--SS03@14f00000+--pci80869d31@142IOPCIDevice+--AppleUSBXHCI@14000000AppleUSBController+--AppleUSBXHCIHub+--USB2.0-CRW@14600000AppleUSBDevice+--Integrated_Webcam_HD@14500000AppleUSBDevice+--BCM20702A0@14800000AppleUSBDevice 操作步骤config.plist配置文件修改的整体思路Part 1: 添加引导标志-uia_exclude_ss，目的：禁止加载SSxx设备，先把HSxx找出来Part 2: 添加引导标志uia_include=HS03,HS08 -uia_exclude_hs，目的：禁止加载HSxx设备，但保留HS03,HS08，保证鼠标和键盘工作，同时满足识别SSxx的需要Part 3: 删除引导标志uia_include=HS03,HS08 -uia_exclude_hs，目的：完成USB定制，让USB各端口恢复正常功能打开黑果小兵的部落阁：https://blog.daliansky.net搜索文章：Hackintool 或者 Intel FB Patcher下载:Download Hackintool下载：USBInjectAll.kext v0.7.1挂载：ESP分区将USBInjectAll.kext v0.7.1复制到EFI/CLOVER/kexts/Other目录下打开config.plist，在引导标志里添加参数：-uia_exclude_ss，保存重启运行Intel FB Patcher工具，转到General-&gt;USB选项将USB 2.0和USB 3.0设备插入并拔出系统的每个USB端口，这里有个窍门：看USB端口的颜色，蓝色为USB3.0，黑色为USB2.0。记录下来键盘和鼠标的接口，比如：HS03和HS08，后面我们会用到这两个端口做为参数注入到config.plist里，参数为：uia_include=HS03,HS08，意思是保留这两个端口的正常使用，下一步要屏蔽掉HSxx的所有接口，将之前的参数-uia_exclude_ss修改为-uia_exclude_hs，完整的参数变为：uia_include=HS03,HS08 -uia_exclude_hs意思是除了HS03和HS08外，其它所有的HSxx端口都不包括。保存重启运行Intel FB Patcher工具，转到General-&gt;USB选项将USB 3.0设备插入并拔出系统的每个USB端口，这里面注意：只有端口为SSxx的才会被识别出来将没变成绿色的所有的未用的端口都删除掉导出定制的USBPorts.kext文件将USBPorts.kext复制到EFI/CLOVER/kexts/Other目录下删除引导参数：uia_include=HS03,HS08 -uia_exclude_hs保存重启运行Intel FB Patcher工具，转到General-&gt;USB选项，检查USB端口情况，打开系统报告-USB查看USB 3.0是否变成5G]]></content>
      <categories>
        <category>USB</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>USB</tag>
        <tag>定制</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[联想小新Air 13安装黑苹果兼macOS Mojave安装教程]]></title>
    <url>%2FLenovo-Xiaoxin-Air-13-macOS-Mojave-installation-tutorial.html</url>
    <content type="text"><![CDATA[联想小新Air 13安装黑苹果兼macOS Mojave安装教程写作/安装流程：1.下载镜像；2.刻盘；3.安装；4.替换/完善EFI； 电脑配置规格详细信息电脑型号联想Lenovo Air 13 IWL笔记本电脑操作系统macOS Mojave 10.14.1 18B75/macOS High Sierra 10.13.6 17G2208处理器Intel® Core™ i7-8565U CPU @ 1.80GHz内存16 GB 1867MHz硬盘Crucial_CT500MX200SSD1 (500G固态) PM981无法驱动，需要更换显卡英特尔 HD Graphics 500 8086:3EA0(Whiskey Lake) (显卡仿冒：注入platform-id:0x3e9b0009)显示器FHD 1920x1080 (13.3 英寸)声卡ALC236 (layout-id:2)网卡REALTEK 10EC:B822 已更换为Bcm94352z(14E4:43B1) Windows下制作macOS Mojave安装盘 准备工具U盘大于8GU 盘大小不限做 PE 盘系统镜像下载：点击前往etcher 制作安装镜像镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可 小新BIOS设置开机按F2或者F12键进入BIOS设置ConfigurationSystem Performance Mode: Intelligent 解决20%以下电量时蓝牙关闭问题SecurityIntel SGX: Disable or Software Control 视BIOS版本不同操作会有所不同BootBoot Mode: Legacy SupportBoot Priority: UEFI FirstFast Boot: DisabledExitOS Optimized Defaults: Disabled 安装系统开机，按F12选择U盘引导进入CLOVER主界面，直接回车，开始引导macOS很多的机友都是会在这个地方翻车。出现问题请进群反馈，请提供翻车照片及机器配置图。不提供任何信息直接发问就是耍流氓这个过程需要1-2分钟,耐心等待，进入安装程序,出现语言选择界面选择简体中文，点击继续出现安装向导，点击继续阅读许可协议，点击继续点击同意，继续出现安装界面，这里是让你选择安装磁盘请点击菜单上面的实用工具 ▸ 磁盘工具出现磁盘工具，在磁盘工具里面所做的操作涉及到你的数据安全，请认真仔细确认后再操作，否则由此造成的一切后果本站概不承担。点击窗口左上角的显示，选择显示所有设备选择APPLE SSD macOS-0 SSD Media本例中为虚拟机中的磁盘名称，请根据你的设备选择相应的磁盘点击抹掉， 假设您的磁盘是空的或者数据是已经备份过的,别怪我没提醒你!!!在弹出的窗口中输入：名称：MAC；格式：Mac OS扩展(日志式)；方案：GUID分区图，在点击抹掉按钮之前，请再次确认你的磁盘已经提前做了数据备份点击抹除，然后等待操作结束点击完成，通过菜单选择退出磁盘工具或者按窗口左上角红色按钮离开磁盘工具返回到安装界面选择MAC磁盘，点击继续它会把USB安装盘上的安装文件预复制到要安装的系统分区里，这个过程通常会持续1-2分钟重启后继续安装，在安装期间，通常会自动重启2-3遍之所以有重启的动作是因为从macOS 10.13.x开始，苹果公司将默认的HFS磁盘分区强行换成APFS分区，它会在第二次重启之后做 HFS ▸ APFS 转换的动作，转换成功后，继续安装过程。系统重启后，CLOVER引导界面会多出几个卷标，请选择Boot macOS Install form MAC卷标继续安装 【如果使用安装镜像自带的默认主题，请选择卷标右下角包含 APFS 字样的卷标，其中的MAC是你在执行抹盘过程中定义的名称】 在系统安装过程中，请总是选择Boot macOS Install form MAC卷标继续安装，安装完成后，卷标名称将变更为：Boot macOS form MAC第二阶段的安装会有两种界面,一种是不进安装界面直接安装,另一种是先进入安装界面直接安装,需要注意的是,无论是哪一种界面下,安装的过程中全程是禁用鼠标和键盘的,需要你做的只是耐心等待它安装完成 设置向导选择国家：中国设置键盘你可以添加自己熟悉的输入法，然后点击继续，出现数据与隐私，阅读后点击继续选择不传输任何信息，点击继续点击稍后设置出现您确定要中法使用Apple ID来登录吗？，点击跳过出现条款与条件，点击同意出现我已经阅读并同意&quot;macOS软件许可协议&quot;，点击同意出现创建电脑用户的窗口,输入用户名和密码,点击继续 创建电脑用户系统会创建初始用户，接着进行快捷设置弹出界面，让你选择外观，您可以根据个人的喜好选择浅色主题或者深色主题，点击继续出现正在设置您的Mac,请稍候完成设置向导设置向导完成，根据选择主题的不同，分别进入不同的界面 进入桌面出现桌面后,整个的安装向导就完成了。 安装后的系统设置系统安装后,你可以先喝杯咖啡兴奋会儿,马上还有更艰巨的任务在等着你呢 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇]新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。diskutil命令的基本用法： 查看磁盘分区表1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme256 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s23:Microsoft Basic DataWIN10127.7 GBdisk0s3/dev/disk1(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme16 GBdisk11:EFIEFI200 MBdisk1s12:Apple_HFSInstall macOS Sierra15.8 GBdisk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1打开Finder，注意后面有个.1open .左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[Windows篇] 挂载EFI分区Windows操作系统下面,打开cmd窗口,输入命令:1234567diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为EFI分区assign letter=X # x为EFI分区盘符您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是合并 的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 添加UEFI引导选项使用工具:BOOTICE 操作过程:打开BOOTICE软件,选择物理磁盘,选择欲操作的目标磁盘,点击分区管理,弹出分区管理的窗口,点击分配盘符,为ESP分区分配一个盘符,点击确定选择UEFI,点击修改启动序列,点击添加按钮,菜单标题填写:CLOVER,选择启动文件,在打开的窗口里选择ESP分区下的目录\EFI\CLOVER\CLOVERX64.EFI,点击保存当前启动项设置 完善驱动声卡：型号为ALC236，注入ID：2，使用AppleALC仿冒，顺利加载；修正HDMI Audio输出信息；安装完系统后请安装ALCPlugFix_for_ALC_node12_19声卡守护进程，耳麦工作正常；网卡：REALTEK 10EC:B822的无线网卡截止到目前还是无解，更换为DW1560/DW1830；显卡：Intel HD Graphics 500，Whiskey Lake平台目前还没有驱动程序，使用Coffee Lake仿冒驱动，Platform-id为：0x3e9b0009，添加DVMT补丁；采用Devices-Properties方法注入；核显版外接HDMI显示器工作正常；睡眠唤醒正常；蓝牙工作正常；睡眠唤醒工作正常；电池信息正常；触摸板：使用 VoodooI2C 驱动，多手势全功能正常工作；显示器亮度调节正常；亮度调节快捷键：F11 和 F12USB端口识别，未进行端口订制；摄像头、无线网卡已内建，避免睡眠问题； 系统截图 更新日志：12-4-2018更新AppleALC v1.3.4，已提交到vit9696合并完毕全新仿冒了小新AIR的声卡id：9911-25-2018修改显卡驱动方式：Whiskey lake仿冒Coffee lakeplatform-id注入id:3e9b0006可完美睡眠唤醒，可调节屏幕亮度声卡驱动方式：采用AppleALC仿冒原生驱动AppleHDAALC236注入id:2驱动方式：FakePCI-ID+FakePCIID_Intel_HDMI_Audio添加ALCPlugFix守护进程，解决耳机/耳麦自动切换，解决睡眠唤醒 小新AIR 13 IWL EFI下载/更新链接：https://github.com/daliansky/Lenovo-Air13-IWL/ 特别鸣谢:@宪武 为联想系统机型制作了全套的hotpatch及小新Air 13 IWL拆机图、BIOS设置等素材]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>安装</tag>
        <tag>macOS</tag>
        <tag>小新air</tag>
        <tag>2018</tag>
        <tag>联想</tag>
        <tag>Air 13 IWL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Catalina/Mojave硬件支持列表（持续更新中）]]></title>
    <url>%2FMojave-Hardware-Support-List.html</url>
    <content type="text"><![CDATA[AMD显卡支持列表免驱免驱或仿冒无法驱动5700XT (10.15.1 Beta 2起支持)Rx Vega VIIR9 260/360RX5700/RX5700XTVega 64R9 270/370RX580 2048SPVega 56R9 270X/370XRX550 512SPRX 590R9 280/380R7 260XRX 580R9 280X/380XR7 250XRX 570R9 390R7 350RX 560R9 390XR5 340RX 560DR7 260X/360XHD7770RX 480HD7750W4300RX 470DR7 260x / 360xW4100RX 470R7 265W2100RX 460R9 NanoHD7850R9 FuryHD7870R9 Fury xHD7950R7 240HD7970R7 250HD7990R9 270XR9 280R9 280XR9 380W5000W7000W8000W9000W5100W7100W8100W9100W9100 32GBPro SSGWX 4100WX 5100WX 7100WX 9100WX 8200Pro Duo (Fiji) Nvidia显卡支持列表开普勒GK104/GK107/GK110核心的在Mojave里原生驱动开普勒GK106/GK208核心的在10.12.6+的系统里花屏闪屏免驱花屏/闪屏无法驱动GTXTitanGTX650RTX20XXGTXTitan ZGTX650TiRTXX000GTX Titan BlackGTX660GTX9XXGTX690GTX660TiGTX10XXGTX680GT720GTX760/tiGT730GTX1660Ti/1660/1650GTX770GT640GTX750GTX780K2200GTX780tiK620GTX650K1200GT640Titan XGT710Titan XPGT740Titan VK6000GV100K5200GP100K5000PXX00K4000PXX0K4200MX000K2000Quadro RTX 8000K2000DQuadro RTX 6000K600Quadro RTX 5000K420Quadro RTX 4000 Nvidia Web Driver [最高支持到HighSierra 10.13.6]不免驱花屏/闪屏无法驱动GTX Titan X（GP 102-400 Pascal核心）GTX Titan Xp（GP 102-450 Pascal核心）GTX 1080/tiGTX 1070/tiGTX 1060GTX 1050/tiGTX Titan X(GM 200 Maxwell core)GTX 980/tiGTX 970GTX 960GTX 950GTX 750/tiGTX 745GT 1030Quadro MxxxxQuadro PxxxQuadro PxxxxQuadro GP100NVS 510 INTEL核显支持列表除HD3000外，其它的基本都支持，详见：Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 和 黑苹果必备：Intel核显platform ID整理及smbios速查表 未完待续源引链接及讨论：http://bbs.pcbeta.com/viewthread-1799271-1-1.htmlhttps://www.reddit.com/r/hackintosh/comments/b91vf5/mojave_gpu_buyers_guide/https://www.reddit.com/r/hackintosh/comments/c0y312/antihackintosh_buyers_guide/https://github.com/khronokernel/Anti-Hackintosh-Buyers-Guide]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Mojave</tag>
        <tag>硬件</tag>
        <tag>支持</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.2 18C54 正式版 with Clover 4792原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14.2-18C54-official-version-with-Clover-4792-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.2(18C54)正式版 with Clover 4792原版镜像12月5日，苹果发布了MacOS Mojave 10.14.2的更新版本macOS 10.14.2的更新日志如下：增加了对Wi-Fi通话的RTT（实时文本）支持解决了iTunes可能无法通过第三方&quot;隔空播放&quot;扬声器媒体播放的问题此外，苹果表示macOS Mojave 10.14.2更新提高了Mac的稳定性、兼容性和安全性，建议所有用户安装。以下是与macOS Mojave兼容的Mac机型：MacBook (2015年前期或之后的机型)MacBook Air (2012年中期或之后的机型)MacBook Pro (2012年中期或之后的机型)Mac mini (2012年后期或之后的机型)iMac (2012年后期或之后的机型)iMac Pro (2017年)Mac Pro (2013年后期的机型，以及支持特定Metal技术图形卡的2010年中期和2012年中期的机型)镜像靓点：去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；新增加config_WHISKEYLAKE_3EA0WHISKEY LAKE平台的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4792，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；300系列主板请于drivers64UEFI目录中移除AptioMemoryFix-64.efi添加OsxAptioFix2Drv-free2000.efiClover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.4，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；Clover默认配置文件config.plist原则上支持各种机型引导安装；同时新增加了config_WHISKEYLAKE_3EA0.plist和原生支持HD620/UHD620的配置文件config_UHD620_HD620_59160000.plist和八代UHD630的配置文件config_UHD630.plist，供您享用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表1-20-2019更新：10.14.x解除USB端口限制补丁1234567891011Comment: USB port limit patch 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB Port limit patch 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.x 安装教程简单版安装过程（简易版）：详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS Mojave 10.14.2(18C54) Installer with Clover 4792.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14.2(18C54) Installer with Clover 4792.dmg) = 12e20b7d4257e746fe51ee0aac424c01Windows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Intel FB-Patcher使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动已更新Lilu(v1.2.8)、AppleALC(v1.3.4)、WhateverGreen(v1.2.4)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图：结合了台式机和笔记本的截屏，仅供参考 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载OneDrive：请点击下载MD5 (macOS Mojave 10.14.2(18C54) Installer with Clover 4792.dmg) = 12e20b7d4257e746fe51ee0aac424c01 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.2</tag>
        <tag>18C54</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[扫马支持群升级]]></title>
    <url>%2FScan-code-support-QQ-group-upgrade.html</url>
    <content type="text"><![CDATA[扫马支持群升级目前群主已续年费超级会员，QQ等级为svip5，只能建立一个2000人群，一个1000人群，4个500人群，目前群全部满员，在无法增加新建群的情况下，只能采取花钱购买群的方式升级群人数。值此支付宝搞双12活动，借用马云家的你扫码我赚赏金的方式来充值马化腾的超级无耻花钱买QQ会员。本次活动拟筹资1000元，满即停，我会附上截图，以供各位群友监督。 您可以： 先用支付宝扫描下方二维码，获取花呗消费红包，群主赚取赏金 还可以将收到的&quot;花呗红包&quot;转账到黑果小兵的支付宝如果您获得了一个13.66元的红包，您可以输入转账金额：13.67元，付款选择花呗，这样您只需要支出0.01元，支持本站的群升级。 付支付宝赏金初始金额:26.46元，2018年12月4日 后续更新截止到12月5日 上午10:30分，共收到赏金193.68元，加上QQ群里群友我的手机私发的红包20元，已经将一起吃苹果群升级为2000人，感谢各位群友对本站的支持截止到12月6日 上午10:30分，共收到赏金483.77元，已经将Mojave黑苹果交流群群升级为2000人，感谢各位群友对本站的支持截止到12月7日 上午10:32分，共收到赏金763.38.77元，已经将一起啃苹果群升级为2000人，感谢各位群友对本站的支持截止到12月8日 上午11:20分，共收到赏金1008.35元，本次活动圆满结束，感谢大家对本站的一贯支持。本次活动所得款项，已经成功将5个群升级为2000人群，详细的QQ群列表请见文章下方。活动开始群数量：2000人群x1活动结束群数量：2000人群x6 写在最后通过本次活动，让我见证了群友的力量，是你们将每天的第一次都奉献给了本站，有很多的群友都自发地在群里通过关键字：赞助 群升级 支付宝扫码来招唤机器人推送活动通知，衷心地感谢！！！通过群升级活动，至少可以满足未来半年的需要，让热爱黑苹果的群友有个固定的交流场所。活动已经结束了，但是您还可以通过本页扫码继续支持本站，所得赏金我会通过在群里定期发红包的方式回馈给广大的热心群友。第一轮红包派发：12-11-2018 上午9点半 共为9个群派发红包120元第二轮红包派发：12-31-2018晚上8点 共为12个群派发红包120元，祝各位群友新年快乐]]></content>
      <categories>
        <category>活动</category>
        <category>扫码</category>
        <category>QQ群</category>
        <category>升级</category>
      </categories>
      <tags>
        <tag>QQ群</tag>
        <tag>升级</tag>
        <tag>扫码</tag>
        <tag>QR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14.1 18B75 正式版 with Clover 4726原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14.1-18B75-official-version-with-Clover-4726-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14.1(18B75)正式版 with Clover 4726原版镜像10月30日，苹果发布了MacOS Mojave 10.14.1的更新版本macOS 10.14.1的更新日志如下：增加了FaceTime视频和音频群聊功能，采用端对端加密保护隐私，支持多达32人同时通话，可从“信息”群组对话发起群聊，也可在通话过程中随时加入。新增了70多个表情符号形象，其中包括红发、白发和卷发的全新人物形象，新的光头人物表情符号，更富表现力的笑脸以及更多动物、运动和食物类表情符号。此外，苹果表示macOS Mojave 10.14.1更新提高了Mac的稳定性、兼容性和安全性，建议所有用户安装。以下是与macOS Mojave兼容的Mac机型：MacBook (2015年前期或之后的机型)MacBook Air (2012年中期或之后的机型)MacBook Pro (2012年中期或之后的机型)Mac mini (2012年后期或之后的机型)iMac (2012年后期或之后的机型)iMac Pro (2017年)Mac Pro (2013年后期的机型，以及支持特定Metal技术图形卡的2010年中期和2012年中期的机型)镜像靓点：去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；新增加HD620/UHD620的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4726，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.4，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；Clover默认配置文件config.plist原则上支持各种机型引导安装；同时新增加了原生支持HD620/UHD620的配置文件config_UHD620_HD620_59160000.plist和八代UHD630的配置文件config_UHD630.plist，供您享用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表 安装教程简单版**安装过程（简易版）：**详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS Mojave 10.14(18A391) Installer with Clover 4674.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14(18A391) Installer with Clover 4674.dmg) = 87928afc8f6d4d11e066a5044f8875bfWindows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Intel FB-Patcher使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：DW1820A/BCM94350ZAE/BCM94356ZEPA50DX插入的正确姿势 Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动已更新Lilu(v1.2.8)、AppleALC(v1.3.3)、WhateverGreen(v1.2.4)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：[请点击下载] 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：https://pan.baidu.com/s/1M34keyVL3_0qYsLXTwcbpAMD5 (macOS Mojave 10.14.1(18B75) Installer with Clover 4726.dmg) = 744b8154b1829123520e2685e99991a7 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>dmg</tag>
        <tag>10.14.1</tag>
        <tag>18B75</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】CoffeeLake UHD 630黑屏、直接亮屏及亮度调整的正确插入姿势]]></title>
    <url>%2FCoffeeLake-UHD-630-black-screen-direct-bright-screen-and-correct-adjustment-of-brightness-adjustment.html</url>
    <content type="text"><![CDATA[【黑果小兵】CoffeeLake UHD 630黑屏、直接亮屏及亮度调整的正确插入姿势适用于MacOS Mojave /macOS HighSierra 10.13.6(17G2112/17G2208) 直接亮屏 台式机/笔记本笔记本：移除SSDT-PNLF.aml取消勾选AddPNLFClover更新到v4707及以上，方法由headkaze提供，clover下载添加了igfxcflbklt引导参数的WhateverGreen，方法由headkaze提供，下载config.plist，可参考Boot Args添加引导参数：igfxcflbklt=forceDevices/Properties添加：enable-cfl-backlight-fix参数设置为01000000 亮度调整 笔记本添加：change GFX0 to IGPU重命名勾选AddPNLF选项或者添加SSDT-PNLF_CoffeeLake.aml，特别感谢@宪武，下载链接 已测试过机型：八代小米游戏本增强版机械革命X8TiMSI GE63联想Y7000 问题反馈请通过QQ群讨论、反馈 鸣谢@宪武制作的众多的hotpatch补丁headkaze 制作了Intel FB Patcher 使用教程vit9696 for WhateverGreen (full credits), Lilu (full credits), AppleALC (full credits), USBPower.kext and additional helpvit9696 for IntelFramebuffer.bt with additional work by bcc9, Piker-Alpha and joevtDalianSky for Intel Core Platform ID and SMBIOS Quick Referencevandroiy2013 for audio id data from AppleALCRehabMan for AllData patch method and various technical info]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>黑屏</tag>
        <tag>UHD 630</tag>
        <tag>CoffeeLake</tag>
        <tag>亮屏</tag>
        <tag>亮度调整</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14 18A391 正式版 with Clover 4674原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14-18A391-official-version-with-Clover-4674-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14(18A391)正式版 with Clover 4674原版镜像随着苹果发布了最新的MacBookPro 15,1/15,2这两款产品，macOS Mojave已于9月24日发布了正式版，它原生支持第八代核显;众多的8代CPU的朋友们可以彻底告别黑屏的痛苦镜像靓点：去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；新增加HD620/UHD620的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4674，支持UEFI启动安装;apfs.efi同时去除日志显示；其它的驱动位于drivers-Off；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.3，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；Clover默认配置文件config.plist原则上支持各种机型引导安装；同时新增加了原生支持HD620/UHD620的配置文件config_UHD620_HD620_59160000.plist和八代UHD630的配置文件config_UHD630.plist，供您享用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表 安装教程简单版**安装过程（简易版）：**详细的安装教程请移步：macOS安装教程下载镜像：黑果小兵的部落阁校验md5值：macOS：打开终端，输入命令：12md5 macOS Mojave 10.14(18A391) Installer with Clover 4674.dmg # 空格以\ 代替MD5 (macOS Mojave 10.14(18A391) Installer with Clover 4674.dmg) = 87928afc8f6d4d11e066a5044f8875bfWindows下：请使用winmd5，将下载的安装镜像拖进winmd5窗口，核验md5值（截图略）镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装macOS：安装过程中不要先替换EFI，等安装全部结果后再执行替换EFI的操作安装过程中出现问题请参考：clover使用教程 以及 macOS Mojave 10.14安装中常见的问题及解决方法安装后所需要执行的动作：合并和替换EFI 不借助任何工具将CLOVER引导添加进UEFI的正确姿势驱动：显卡、声卡、USB定制：Intel FB-Patcher使用教程及插入姿势 / 黑苹果必备：Intel核显platform ID整理及smbios速查表 / Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理声卡仿冒：使用AppleALC声卡仿冒驱动AppleHDA的正确姿势无线网卡：Broadcom BCM94352z/DW1560驱动新姿势新方法本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动已更新Lilu(v1.2.7)、AppleALC(v1.3.2)、WhateverGreen(v1.2.3)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区另一种方法：直接 使用应用程序diskgenius挂载EFI分区进行操作本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：https://pan.baidu.com/s/1b0dNTcBxLhWKbxmlbJMd0QMD5 (macOS Mojave 10.14(18A391) Installer with Clover 4674.dmg) = 87928afc8f6d4d11e066a5044f8875bf 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>10.14</tag>
        <tag>dmg</tag>
        <tag>18A391</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hackintool(原Intel FB-Patcher)使用教程及插入姿势]]></title>
    <url>%2FIntel-FB-Patcher-tutorial-and-insertion-pose.html</url>
    <content type="text"><![CDATA[警告Hackintool 不是一个让你无脑使用的自动化补丁工具。在使用它之前，你需要一定的知识储备. 请您务必在使用这个工具之前阅读 Intel Framebuffer patching using WhateverGreen（英文）! 和 Whatevergreen的中文官方文档。 功能支持 Sandy Bridge, Ivy Bridge, Haswell, Broadwell, Skylake, KabyLake, Coffee Lake, Cannon Lake, Ice Lake 几乎所有的平台修补核显输出接口创建显存大小修改补丁EDID 注入检测自动修补程序创建的变化创建 Clover 补丁，支持 hex，base64 或 Devices/Properties 等三种格式显示原生GPU和型号标识显示和编辑内存信息，如缓冲帧，显存，Cursor 等弹出一些项目的提示信息（Tool tips）直接读取已加载生效的xxxFramebuffer kext的数据文件 ▸ 打开通过 Debug 版本的 WhatEverGreen.kext 的 -igfxdump 引导标志生成的缓冲帧文件文件 ▸ 导出 ▸ Clover Config.plist 并对现有 Config.plist 进行无损打补丁文件 ▸ 导出 ▸ Framebuffer.txt （缓冲帧文本形式）修补音频 Layout ID字符串转换与进制转换读取 Clover 开机日志，Lilu（Debug）日志，Lilu（Debug）内核日志，Whatevergreen (Debug) 内核日志，AppleALC (Debug) 内核日志显示硬盘分区图的详细信息读取 Lilu，Whatevergreen，AppleALC，USBInjectAll 的安装信息添加 NVRAM 的内核引导标识符装载/卸载 EFI 分区添加 USB 端口限制补丁添加 DSDT 重命名定制 USB高级修补选项（DVMT-prealloc 32 MB ，显存 2048 MB，禁用 eGPU，启用HDMI20（4K），仿冒声卡 ID，将 DP 映射到 HDMI，USB端口限制，FB端口限制，修复热插拔重启，注入设备 ID 等）两个开味小菜：声卡修补显示器 EDID 修补 声卡修补安装最新的 Lilu + AppleALCClover Configurator 设置 config.plist ▸ Devices ▸ Audio ▸ Inject ▸ No四叶草 (Clover) ▸ DSDT 重命名（如果需要）☑️ AZAL ▸ HDEF☑️ HDAS ▸ HDEF选中 补丁 ▸ 通用 ▸ 声音设置 Layout ID下拉列表，选择或输入合适你的 Layout ID文件 ▸ 导出 ▸ Clover Config.plist（覆盖现有的config.plist文件）重新启动如果没有音频依然存在问题，请返回步骤4并尝试不同的 Layout ID 注意：如果您尝试所有 Layout ID 但仍有问题，请尝试设置 补丁 ▸ 高级 ▸ 仿冒声卡 ID 选项。 如果这依然不起作用，那么尝试安装FakePCIID.kext + FakePCIID_Intel_HDMI_Audio.kext 显示器 EDID 修补通过对EDID的修补，您可以修改显示器样式并添加缩放分辨率。从显示器列表中，选择您要编辑的显示器。（可选）添加/修复监视器范围（如果您的EDID没有它们或它们是坏的）。（可选）通过单击“添加”，然后通过单击这些值并进行编辑，可以选择添加缩放分辨率。选择后，可以通过“删除”按钮删除输入的分辨率。单击“导出”按钮会在桌面上生成用于修补的替代文件 安装安装EDID补丁有两种方法：1.显示覆盖 2.扩展库(L/E) 请二选一1.显示覆盖 (Display Overrides):将 DisplayVendorID-x 文件夹复制到 /System/Library/Displays/Contents/Resources/Overrides (或者 /System/Library/Displays/Overrides El Capitan 及以前版本)将 Icons.plist 复制到 /System/Library/Displays/Contents/Resources/Overrides (或者 /System/Library/Displays/Overrides El Capitan 及以前版本)2.扩展库 (Library Extensions):将 DisplayEDID-x-x.kext 复制到 /Library/Extensions 或者 EFI/Clover/kexts/Other (取决于您的配置，建议使用 Clover 的方法)系统完整性保护 (SIP)您需要禁用SIP (sudo spctl --master-disable) 才能将文件复制到方法1所述位置。 额外信息如果您有16:10的显示器并想使用缩放分辨率，您可以使用：iMac 显示器MacBook Pro 显示器Cinema HD 显示器LED Cinema 显示器对于16：9显示器和缩放分辨率，您可以使用：Apple Thunderbolt 显示器 (不要用于内建显示器！！！)iMac Retina 显示器MacBook Air 显示器 工具栏从 AppleIntelInfo.kext 中获取 CPU 的详细信息注意！使用完这个功能后需要重启来还原 CPU 的状态！从 macOS 10.14 开始，苹果删除了 高通 AR92XX/93XX 的驱动，点击这里可以一键安装安装驱动以在 macOS 10.14 上启用 SATA 热插拔生成 Windows 蓝牙注册表文件生成 Windows UTC 时间同步注册表文件不推荐，建议更改 macOS 内时区来同步时间导出 DSDT用于导出现在系统使用的 ACPI 表，用于查看 Clover 重命名效果，TgBridge 错误，提取白苹果 ACPI 表等等强烈不推荐用于提取原始 ACPI 表，请绕路 Clover F4安装驱动安装下载好的 Kext 到 Library/Extensions (俗称 L/E)重建缓存并修复权限安装完驱动必须点击执行 定制USBmacOS 10.14.1+ 的USB端口限制补丁已经失效了，因此无法一次配置所有端口。 RehabMan 已更新 USBInjectAll.kext 并已包含用于排除端口组的引导标志。将 USBInjectAll.kext (用于端口发现) 放入 EFI/CLOVER/kexts/OtherClover ▸ DSDT 重命名 (如果需要)☑️ XHC1 ▸ XHC☑️ EHC1 ▸ EH01☑️ EHC2 ▸ EH02重新启动运行 Hackintool 然后转到 工具栏 ▸ 已安装 检查 USBInjectAll 是否安装正确如果你看到：USBInjectAll: Yes (Release-0.7.1) 就说明没问题了转到 工具栏 ▸ USB 来查看 USB 控制器列表。因为这里需要基于 USB控制器 您可能需要安装额外的 kexts:8086:8CB1 和 macOS (10.11.1) ▸ 请使用 XHCI-9-series.kext8086:8D31, 8086:A2AF, 8086:A36D, 8086:9DED ▸ 请使用 XHCI-unsupported.kext8086:1E31, 8086:8C31, 8086:8CB1, 8086:8D31, 8086:9C31, 8086:9CB1 ▸ 请使用 FakePCIID.kext + FakePCIID_XHCIMux.kext如果您缺少了其中一个附加的 kexts，请完成安装并立即重新启动，然后再次运行 Hackintool转到 工具栏 ▸ USB 选项依次选择 USB 端口列表中的各个项目，然后单击“删除”删掉全部项目，完成后再单击“刷新”按钮使用 -uia_exclude_ss uia_include=HS01,HS02这里的 HS01 和 HS02 是鼠标和键盘，请根据自己的设备位置对其进行更改运行 Hackintool 并转到 工具栏 ▸ USB 选项用一个 USB 2.0 的设备将所有的2.0端口（通常为黑色）全部插拔一遍活动的端口将以绿色突出显示删除所有未突出显示为绿色的端口，请您也用小本将活动端口的数据记下来，以防万一删除 -uia_exclude_ss 引导标志，并使用 -uia_exclude_hs 引导标志重新启动运行 Hackintool 并转到工具栏 ▸ USB 选项用 USB 3.0 的设备将所有的3.0端口（蓝色/红色/黄色）全部插拔一遍USB Type-C 接口的设备需要用正反两面对所有的端口进行插拔活动的端口将以绿色突出显示删除所有未突出显示为绿色的端口，请您也用小本将活动端口的数据记下来，以防万一使用下拉列表将每个端口设置为适当的接口类型永久连接设备的USB端口（例如M.2蓝牙卡）应设置为 Internal (内建)与 USB3 端口相连的 HSxx 端口 (USB2) 应设置为 USB3内部集线器通常连接到端口PR11和PR21，因此应设置为 Internal (内建)USB Type-C 接口可以是9或10，这取决于硬件如何处理 USB Type-C 型设备/电缆的正反两种可能方向如果 USB Type-C 在两个方向上使用相同的 SSxx，则它具有内建切换器，因此应设置为 TypeC+Sw如果 USB Type-C 在两个方向使用不同的 SSxx，则它没有内建切换器，因此应设置为 TypeC使用 导出 按钮在桌面上生成 USB 修复文件复制 SSDT-EC.aml (如果有) 到 EFI ▸ CLOVER ▸ ACPI ▸ patched接下来的方案请 2 选 1:A) 复制 USBPorts.kext 到 EFI ▸ CLOVER ▸ kexts ▸ Other；或者B) 复制 SSDT-UIAC.aml 和 SSDT-USBX.aml (如果有) 到 EFI ▸ CLOVER ▸ ACPI ▸ patched好了，是时候清除不需要的补丁和文件了:删除 (-uia_exclude_ss，-uia_exclude_hs 和 uia_include=x)删除 USBInjectAll.kext （如果您使用的是 USB-Ports）重启运行 Hackintool 然后转到 工具栏 ▸ USB依次选择 USB 端口列表中的各个项目，然后单击“删除”删掉全部项目，完成后再单击“刷新”按钮您现在可以检查你的 USB 是否全部正常工作如果您要更改USB端口类型，请在更改后重新生成修复文件并替换之前的文件如果您一不小心删了修补文件，请重新从头来过，或者您可以用您的小本 ⊙﹏⊙∥∣°FAQQ. 什么是 USBPorts.kext ?A. 它是一个 无代码的核心驱动 用于注入 USB 端口，让所有的USB端口都能正常工作Q. 我还需要在使用USBPorts.kext 的同时使用 SSDT-UIAC.aml 吗？A. 不，这个方法生成的是一个空壳的无代码的kext驱动，无需同时使用 SSDT-UIAC.aml USB定制视频教程 核心功能：给缓冲帧打补丁随着macOS Mojave的发行，之前的通过Clover ▸ KextsToPatch 通过修补帧缓冲的方法已经失效了，尤其是 SkyLake 及以后架构。您现在必须使用 Lilu + WhateverGreen+FB Patcher 的方式来驱动您的显卡。 初步动作删除 FakePCIID，IntelGraphicsFixup，NvidiaGraphicsFixup,Shiki 和 CoreDisplayFixup关闭 Clover 里面关于 Graphics 注入的参数，这些参数包括：config.plist ▸ Graphics ▸ 🔲 Inject ATIconfig.plist ▸ Graphics ▸ 🔲 Inject Intelconfig.plist ▸ Graphics ▸ 🔲 Inject NVidiaconfig.plist ▸ Graphics ▸ ig-platform-id= 清空config.plist ▸ Devices ▸ FakeID ▸ IntelGFX= 清空关闭 Clover 里面关于Acpi ▸ DSDT 的修复：🔲 AddHDMI🔲 FixDisplay🔲 FixIntelGfx🔲 AddIMEIDevices 禁用 UseIntelHDMI移除 boot argument 参数：-disablegfxfirmware移除 IGPU 和 HDMI 部分的全部内容，包括：config.plist ▸ Devices ▸ Arbitraryconfig.plist ▸ Devices ▸ Propertiesconfig.plist ▸ Devices ▸ AddProperties从以下位置删除任何与 IGPU 和 HDMI 相关的 SSDT 和 DSDT ：Clover ▸ ACPI ▸ patched 使用方法打开应用：Hackintool.app通过菜单项：缓冲帧选择 macOS 10.13.6 / macOS 10.14 选择显卡对应的处理器架构，比如Intel UHD Graphics 630就需要选择Coffee LakeIntel HD Graphics 620就需要选择Kaby LakeIntel HD Graphics 520就需要选择Skylake，等等，之后选择平台 ID，这个就是能正确驱动你的显卡的 ID，至于这个 ID 如何确定，请参考黑苹果必备：Intel核显platform ID整理及smbios速查表 并针对白苹果所使用的 ID 选取适合您的 平台 ID。如果您想了解更多信息，请阅读针对 Whatevergreen 的缓冲帧修补教程（英文）。中文版：Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 和 教程：利用Hackintool打开第8代核显HDMI输出的正确姿势点击应用补丁按钮，在通用选项中勾选设备/属性，自动侦测变化，全部，接口，显存这几个选项；在高级选项中勾选DVMT pre-alloc 32 MB，显存 2048MB，禁用 eGPU，启用 HDMI20(4K)，将 DP 映射到 HDMI，FB 端口数限制勾选设备，选择平台 ID 相对应的 设备 ID，这通常跟你的显卡名称相吻合点击生成补丁生成显卡驱动补丁通过菜单项：文件 ▸ 导出 ▸ Config.plist，将该补丁无损注入到 Clover 的配置文件 Config.plist 中 几个例子：（请您举一反三）Coffee Lake（八代）平台：Intel UHD Graphics 630 (移动端)Kabe Lake（七代）平台：Intel HD Graphics 620 / Intel UHD Graphics 620 (移动端)CPU 架构：Kaby Lake平台 ID：0x59160000通用和高级界面同上勾选仿冒图形卡 ID 选择：0x5916: Intel Graphics 620Sky Lake（六代）平台：Intel HD Graphics 530 (移动端)CPU 架构：Skylake平台 ID：0x191B0000通用和高级界面同上勾选仿冒图形卡 ID 选择：0x191B: Intel Graphics 530Haswell（四代）平台：Intel HD Graphics 4600 (移动端)CPU 架构：Haswell平台 ID：0x0A260006通用和高级界面同上勾选仿冒图形卡 ID 选择：0x0A26: Intel Graphics 4600注意⚠️：以上设置仅为较为通用的设置，对于某些设备，可能存在疏漏或者冗余查看此处来利用 Hackintool 深度定制 Whatevergreen 补丁最后通过菜单项：文件 ▸ 导出 ▸ Config.plist，将该补丁导出到 Clover 的配置文件 各种主板补丁示例集合从Hackintool v2.0.6开始，内部集成了国外论坛的成员提交的缓冲帧补丁示例的集合，现在只需要轻松几步就能生成写好的补丁，源文件请参考运行Hackintool。从顶部菜单栏中选择缓冲帧并选择macOS 10.14。从应用补丁菜单中，选择应用当前补丁，可看到其前面打钩的是正确的状态。在菜单栏 -&gt; 应用补丁 -&gt; 主板接口 中选择你的主板（如果没有，请按照上文的方法手动创建补丁） FB视频教程 更新日志2.4.6 - ”重建缓存并修复权限“ 被移到了工具栏并增加了进度条2.4.5 - 为 ”重建缓存并修复权限“ 增加了输出信息2.4.4 - 更新中文语言包，改进编译器2.4.3 - 更新中文语言包，修复 USB 配置2.4.2 - 更改缓冲帧信息显示方式（选中 / 当前）2.4.1 - 更新中文语言包2.4.0 - 现在包含了 iMessageDebug 信息 (ElNono / mdmwii / flux84 / sugarface / pokenguyen)。导出系统信息。查看型号信息 (everymac.com)。 检查序列号。初步的 OpenCore 支持 (感谢 vit9696)2.3.9 - ComboBox 修复 (感谢 telepati)2.3.8 - 修复错误 (感谢 ReddestDream)2.3.7 - 改进了 Clover EFI 装载。Clover PCI导 出现在使用 SubClass 作为 device_type2.3.6 - 修复错误。 添加了 “使用 Intel HDMI” 选项（hda-gfx = onboard-x）。添加了 “不缩放” 的分辨率类型2.3.5 - 修复了设备路径生成器（gfxutil）中的错误。 添加了 “生成 Windows UTC 注册表文件” 工具2.3.4 - 更新了 Codec，以 Clover 和 dsl 格式导出 PCI 列表，现在转储所有 ACPI 表并反编译为 dsl2.3.3 - 提取 DSDT（phpdev32），自动更新 PCIID（MuntashirAkon），以 JSON 格式导出 PCI 列表2.3.2 - 监控 PCI 热插拔2.3.1 - UI 更新2.3.1 - 右键单击 PCI 设备，然后选择 “复制 IOReg 路径”。 启动 IORegistryExplorer 并选择 Go-&gt; Go to Path… 菜单，粘贴路径并单击 “Go to Path” 按钮。2.2.8 - 添加了 HWP 状态日志记录警告（以前的状态只能在重启后恢复）2.2.7 - 添加了 VDA 解码器状态。 为 PCI 设备添加了 DevicePath。 将 PCI 设备列表导出到桌面2.2.6 - 改进了引导 EFI 检测。 手动设置引导 EFI。 AppleIntelInfo 显示 30 秒计时器以记录 CStates。 记录后恢复 HWP 状态。添加了英特尔注册警告。计算器现在显示反向字节2.2.4 - 添加了 AppleIntelInfo 的选项（启用 HWP，日志：CStates 低压模式，英特尔核显，IPG 类型，英特尔注册表， MSRs），添加了 20 秒的等待时间来让 AppleIntelInfo 获取 CState 低压模式信息。2.2.2 - 添加了信息栏（网络接口，图形卡，声卡设备和储存设备）。 现在会以绿色或红色高亮电源设置来表明问题所在2.2.1 - 修复错误2.2.0 - 新的 PCI 设备，网络，电源 和 工具 栏2.1.9 - 添加了来自 Github 的驱动下载源。下载得到的版本可能会比源代码版本老。而且由于 Github 的 API 限制, 它只会储存最新的下载链接。添加了安装 kext(s) 的功能。添加了重建驱动缓存和修复权限的功能。2.1.8 - 使用 kextstat 来获取版本2.1.7 - 现在可以侦测更多 kexts2.1.6 - 现在可以下载当前版本的 Lilu 和其 插件2.0.8 - 在 应用补丁 -&gt; 8代核显HDMI/DVI 菜单中添加了几个配置文件，你可以尝试如果你的 8 代系统有问题 (CaseySJ)2.0.4 - 应用 Clover 补丁（KernelToPatch，KextToPatch，DSDT 重命名）。 查看，创建和编辑 NVRAM 变量（小心！）。 查看已安装的 Lilu 及其插件，下载并自动编译最新版本2.0.0 - 支持简体中文1.9.6 - 增加磁盘功能（图标 / 装载 / 卸载按钮）1.9.2 - 修复错误1.9.1 - 添加了 SSDT-UIAC.aml / SSDT-USBX.aml 的导出支持1.9.0 - 修复启动错误（感谢 @Pavo）1.8.7 - 添加了 USB 电源方面的 DSDT 重命名1.8.6 - 添加了 DSDT 重命名1.8.5 - 修复错误1.8.4 - 使用 Sparkle 框架进行自动更新1.8.3 - 改进了音频设备侦测 / 选择，窗体现在可以调整大小1.8.2 - 添加语言支持 法语 (Matgen84)，德语 (al6042)，韩语 (zisqo)，俄语 / 乌克兰语 (ctich)1.8.1 - 添加了 Clover 下载器 (Kozlek / JrCs / slice)，NVRAM 引导标识符编辑，改进授权，更新界面1.8.0 - 改进了 USB 电源导出 (corpnewt)，其他修复，新图标1.7.9 - 添加了 USB 电源导出, EFI 分区装载, 计算器和日志查看器1.7.8 - 添加了分辨率注入（来自底噪的一键 Hidpi）1.7.7 - 添加了 AMD 和 nVidia 的 EDID 补丁支持1.7.6 - EDID 覆盖现可支持自定义图标1.7.5 - 改进了 USB 教程, 添加了打印按钮1.7.4 - 修复了默认选中项1.7.3 - 更新1.7.2 - 将软件更名为 Hackintool，添加了 EDID 注入支持 (Andy Vandijck)1.7.1 - 修复暗黑模式1.7.0 - 添加了 USB 和 声卡信息，现在会显示可用的仿冒 ID 和需要的 kext1.6.9 - 更新1.6.8 - 添加了 framebuffer-camellia 和 framebuffer-flags 的补丁支持1.6.7 - 添加了 Macmini8,1 和 MacBookAir8,1 的信息1.6.6 - 更新了信息文件1.6.5 - 修复了 USBInjectAll 的侦测1.6.4 - 改进了声卡 layout id 的侦测1.6.3 - 现在会显示声卡控制器1.6.2 - 修复 USB1.6.1 - 改进了仿冒声卡设备 Id 的选项1.6.0 - 修复错误1.5.9 - 现在会显示 USB 控制器1.5.8 - 将在应用程序会话之间存储和恢复 USB 端口，以便与新的 USBInjectAll.kext（0.7.0）一起使用，以便包括用于排除端口组的引导标识符1.5.7 - 现在可以检测 EHC 和集线器端口（感谢 RehabMan 和 SavageAUS）。 可多选 USB 端口。 现在可以检测是否安装了 USBInjectAll1.5.4 - 修复当用户有多个音频设备时的 Codec 检测。 在高级补丁栏中添加了 “修复重启” 补丁（将连接器通道值设置为18）1.5.3 - 改进了 导出 -&gt; Clover config.plist 的功能，现在会自动备份生成 (config-backup.plist)1.5.2 - 添加了 应用补丁 -&gt; AzulPatcher46001.5.1 - 修复了 USBPorts 的接口数统计1.5.0 - 修复错误1.4.9 - 添加了一个工具栏来显示 Lilu，WhateverGreen 和 AppleALC 安装状态和版本信息1.4.8 - 修复了为 iasl 的 DSL 源补丁输出 framebuffer-cursormem1.4.7 - 支持了新版 WEG 的 -igfxfbdump 引导标识符，使用 文件 -&gt; 导入 -&gt; IOReg 输出 菜单1.4.6 - 修复错误。 添加了 缓冲帧 -&gt; macOS 10.14 菜单项。添加了 QE/CI 和 Metal 支持的侦测1.4.5 - 支持了 framebuffer-cursormem (Haswell)1.4.4 - 修复了注入适当 device-id 的功能1.4.3 - 修复错误1.4.2 - 添加了 应用补丁 -&gt; 导入 KextsToPatch / 应用当前补 菜单，将 USBPower.kext 重命名为 USBPorts.kext1.4.1 - 添加了 TypeC USB 端口1.4.0 - 改进了 Intel 架构检测1.3.9 - 现在使用 AppleIntelFramebuffer @X 索引来进行接口关联1.3.8 - 修复了 AppleIntelFramebuffer 接口数字在内建时应该为索引号 + 4 或者 0 的 Bug (RehabMan)1.3.7 - 显示连接器端口上已连接显示器的显示信息（支持显示器热插拔），修复 iASL DSL 源十六进制输出，接口可以拖放以更改顺序1.3.6 - 修复错误1.3.5 - 现在会尝试 HDAS 如果没有找到 HDEF1.3.4 - Added AllData connector patch method (RehabMan). 现在会尝试 GFX0 如果没有找到 IGPU1.3.3 - 修复错误。添加了更多的 Layout ID (vandroiy2013)1.3.2 - 修复错误1.3.1 - 修复错误。添加了新的菜单 缓冲帧 -&gt; 当前版本 / macOS 10.13.61.3.0 - 添加了声卡补丁，Clover config.plist 导出，USB 补丁，高级自动补丁1.2.8 - 添加了iASL DSL 的源补丁输出，显示检测到的 Intel 架构和 平台 id1.2.7 - 文件 -&gt; 导出 缓冲帧文本形式1.2.6 - 修复了预分配显存的计算公式 (vit9696)1.2.5 - 依然会在 “自动侦测变化” 勾选时导出一个 config.plist/Devices/Properties 补丁1.2.4 - 修复错误1.2.3 - config.plist/Devices/Properties 补丁现在会输出数据形式1.2.2 - 修复错误1.2.1 - 更新和错误修复1.2.0 - 为 Cannon Lake 和 Ice Lake 添加支持1.1.0 - 添加了机型 MacBookPro15,1 和 MacBookPro15,21.0.9 - 支持 Mojave，Coffee Lake，WhateverGreen 的 -igfxdump 引导标识符和 Clover 的 config.plist/Devices/Properties 补丁输出1.0.8 - 更新1.0.7 - 修复暗黑模式支持1.0.6 - 更好地兼容之前的版本1.0.5 - 在启动时检测芯片组和地址, 可以更加容易地修显存值1.0.4 - 添加了 GPU / 型号信息1.0.3 - 添加了工具提示1.0.2 - 添加了显存栏1.0.1 - 小修补1.0.0 - 最初发布 下载链接下载 Hackintool下载 FBPatcher V1.7.1 历史版本 扩展阅读黑苹果必备：Intel核显platform ID整理及smbios速查表macOS High Sierra 10.13.6(17G2112)/Mojave ig-platform-id数据整理教程：利用Hackintool打开第8代核显HDMI/DVI输出的正确姿势 鸣谢vit9696 的 WhateverGreen (完整鸣谢名单), Lilu (完整鸣谢名单), AppleALC (完整鸣谢名单), USBPorts.kext 和其他帮助vit9696 的 IntelFramebuffer.bt 和其他由 bcc9，Piker-Alpha 和 joevt 完成的工作黑果小兵的 Intel 核显 platform ID 整理及 smbios 速查表vandroiy2013 提供的来自 AppleALC 的声卡 ID 信息RehabMan 的全信息补丁方法，ioreg 缓冲帧导出和其他贡献]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>FB</tag>
        <tag>patcher</tag>
        <tag>framebuffer</tag>
        <tag>帧缓冲</tag>
        <tag>USB</tag>
        <tag>audio</tag>
        <tag>VRAM</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不借助任何工具将CLOVER引导添加进UEFI的正确姿势]]></title>
    <url>%2FAdd-CLOVER-boot-to-UEFI-without-any-tools.html</url>
    <content type="text"><![CDATA[不借助任何工具将CLOVER引导添加进UEFI的正确姿势经常安装hackintosh的同学会发现，安装完macOS后，需要做的第一件事情就要将EFI移进机器自带的磁盘中，同时添加CLOVER引导项到UEFI中以实现CLOVER引导加载macOS。通常的作法是进Windows/PE工具里，使用类似EASY UEFI或者BOOTICE之类的工具添加一条引导记录到UEFI中。现在教给大家一招：不借助任何工具，使用CLOVER自带的功能添加一个CLOVER引导项到UEFI中。、 操作步骤：1.进入CLOVER主界面：2.将光标移动到Clover Boot Options，回车：3.选择Add Clover Boot Options，回车：4.重新启动，按F8或者F12选择Boot Clover with EFI之类的引导项进入CLOVER引导macOS；5.收工。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>CLOVER</tag>
        <tag>UEFI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Mojave 10.14(18A389) with Clover 4670原版镜像]]></title>
    <url>%2FmacOS-Mojave-10.14-18A389-Release-with-Clover-4670-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Mojave 10.14(18A389) with Clover 4670原版镜像随着苹果发布了最新的MacBookPro 15,1/15,2这两款产品，macOS Mojave的发布也日益临近，它原生支持第八代核显;众多的8代CPU的朋友们可以彻底告别黑屏的痛苦镜像靓点：去除USB端口限制，减少禁行发生的几率；增加Lilu崩溃的日志信息显示；新增加HD620/UHD620的配置文件，原则上支持安装时驱动显卡；新增UHD630的配置文件，机型设置为MacBookPro15,2，显卡自动侦测；本镜像采用官方原版app制作，集成Clover 4670，支持UEFI启动安装;Drivers64UEFI/目录下只保留的AptioMemoryFix.efi以解决卡+++问题；添加ApfsDriverLoader-64.efi，自动加载apfs.efi驱动，同时去除日志显示；其它的驱动位于drivers-Off；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认添加Lilu崩溃日志的输出信息,详见：macOS Mojave 10.14安装中常见的问题及解决方法;更新WhateverGreen到V1.2.2，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了Shiki和CoreDisplayFixup的驱动，现在是All In One了；Clover默认配置文件config.plist原则上支持各种机型引导安装；同时新增加了原生支持HD620/UHD620的配置文件config_UHD620_HD620_59160000.plist和八代UHD630的配置文件config_UHD630.plist，供您享用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；不会操作的请移步：Clover使用教程 macOS安装教程 Mojave硬件支持列表如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；不会操作的请移步：Clover使用教程 macOS安装教程本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持Realtek8111/8100系列有线网卡，支持Intel板载有线网卡；其它的网卡驱动位于kexts/Other/其它驱动已更新Lilu(v1.2.7)、AppleALC(v1.3.1)、WhateverGreen(v1.2.2)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区本镜像发布站点：远景论坛 / 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载MD5 (macOS Mojave 10.14(18A389) Installer with Clover 4670.dmg) = fa9ae4c01242051c013250e1025c794c 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>Mojave</tag>
        <tag>10.14</tag>
        <tag>dmg</tag>
        <tag>17A389</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS Catalina 10.15安装中常见的问题及解决方法]]></title>
    <url>%2FCommon-problems-and-solutions-in-macOS-Catalina-10.15-installation.html</url>
    <content type="text"><![CDATA[随着macOS Catalina(卡塔利娜) 10.15发行正式版本的临近，各种安装常见问题也需要同步更新，本篇文章就是针对10.15的常见问题的汇总，我会持续不间断更新，敬请期待 安装/更新黑屏问题boot args添加引导参数：agdpmod=pikera更新WhateverGreen到v1.3.4，下载链接 关于数字音频中断，导致内核崩溃的解决方案KernelToPatch中添加：Find: 636F6D2E 6170706C 65005F5F 6B65726E 656C5F5F 00Replace: 6E6F742E 6170706C 65005F5F 6B65726E 656C5F5F 00详见：https://github.com/acidanthera/bugtracker/issues/513#issuecomment-542838126 关于Clover Bootloader的版本想要正确地安装macOS Catalina 10.15，它要求你的Clover Bootloader版本不低于r4940，截止到目前为止[6-4-2019]，Clover Bootloader的版本已经更新为v2.4k r4940，支持安装macOS Catalina 10.15。Clover Bootloader最新版本下载 注意事项在HFS +上安装macOS Catalina时，通过系统偏好设置自动更新系统的功能会消失。解决方案：使用脚本下载10.15Beta更新包，原帖：https://github.com/Gengik84/MacOS_Updater1curl -O https://raw.githubusercontent.com/Gengik84/MacOS_Updater/master/MacOS_Updater &amp;&amp; chmod +x ./MacOS_Updater &amp;&amp; sh ./MacOS_Updater从第三方来源安装程序：1sudo spctl --master-disable关闭Thunderbolt更新：1sudo softwareupdate --ignore ThunderboltFirmwareUpdate1.2为第三方SSD启用TRIM1sudo trimforce enable 取消4位数密码限制12pwpolicy -clearaccountpoliciespasswd 10.15 Beta5无法更新/安装的解决方法123Comment: change EC0 to ECFind: 4543305FReplace: 45435F5F另一种格式：1234567891011121314&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;change EC0 to EC&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; RUMwXw== &lt;/data&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; RUNfXw== &lt;/data&gt;&lt;/dict&gt; 安装卡在最后2分钟的解决方法断开网络使用OsxAptioFixDrv-64.efi或者OsxAptioFixDrv3-64.efi替换AptioMemoryFix.efi，每次只可以用一个驱动抹盘直接选择APFS格式，减少HFS+转换成APFS的过程 z390主板安装卡在apfs_module_start的解决方法请于Acpi - DSDT - Patches中添加：123Comment: Fix AsRock Z390 BIOS DSDT Device(RTC) bugFind: A00A9353 54415301Replace: A00A910A FF0BFFFF 找不到安装器资源的解决方法断网删除drivers64UEFI目录下的EmuVariableUefi-64.efi修改机型为最近三年，比如MacBootPro13,1 MacBookPro14,1 iMac17,1 等等如果是双硬盘，拔掉那个不安装的，待安装完后再插回去检查镜像的md5值 关于HD3000平台macOS Catalina 10.15已经不支持Sandy Bridge平台的安装使用，解决方法有两个：在引导标志(boot args)添加-no_compat_check跳过兼容性检查修改SMBIOS为：MacBookAir5,1 Kaby Lake UHD 620显卡特别说明部分基于类似AAPL GfxYTile的注入参数在macOS Catalina 10.15中会失效，它要求将Clover Bootloader版本至少更新到r4587或以上，Clover Bootloader最新版本下载 关于声卡注入的IDApple已从macOS Catalina 10.15上的AppleHDA.kext中删除了大量的Layouts，因此很多人需要修改/修补当前的AppleHDA.kext / AudioInjector才能使音频恢复到工作状态。Apple在macOS Catalina上删除的布局ID为：Layout1,3,8,9,11,12,13,18,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,41， 42,43,44,45,46,47,48,49,50等要查看已删除的布局的完整列表以及可用于替换已删除的布局的列表，下面是一张可以使用并可在macOS Catalina 10.15上使用的可用布局的图片：好消息是vit9696通过更新他的AppleALC解决了影响去除布局的问题。AppleALC最新版本的下载：https://github.com/acidanthera/AppleALC/releases minStolenSize新补丁，用于Broadwell, Skylake 以及KabylakeKaby Lake1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelKBLGraphicsFramebufferFind: 764648FF 05Replace: EB4648FF 05Sky Lake1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelSKLGraphicsFramebufferFind: 764048FF 05Replace: EB4048FF 05Broadwall1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelBDWGraphicsFramebufferFind: 764048FF 05Replace: EB4048FF 05 10.15.x解除USB端口限制补丁 [6-5-2019更新]经和PMHeart求证后，精简成2条补丁123456789Comment: USB port limit patch #1 10.15.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FComment: USB Port limit patch #2 10.15.x modify by DalianSkyName: com.apple.driver.usb.AppleUSBXHCIFind: 83F90F0FReplace: 83F93F0F Intel HD3000显卡驱动由于macOS Catalina 10.15中已经将AppleIntelHD3000Graphics.kext等相关驱动移除，一个折衷的解决方案是复制一份macOS Sierra 10.12.x的驱动到/System/Library/Extensions，重建缓存后重启即可享用。详见https://www.tonymacx86.com/threads/success-lenovo-b570e.255129/page-2#post-1770059 找回丢失的DW1560/Brcm94352Z驱动Mojave系统下的蓝牙会失效，截止到目前的解决方法是：将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/Library/Extensions目录下。联想版请使用BrcmFirmwareRepo.kext当然，在重启前，还要重建一下系统的缓存，命令为：1sudo kextcache -i /如果嫌输入命令麻烦，也可以使用应用Kext Utility重建缓存。重启你的系统，检查WIFI/蓝牙是否工作正常。 关于10.15高通无线失效无法驱动的问题的解决方案[来自套路]升级到Mojave的大家应该都看到了，14的驱动删掉了好多，最惹人注意的就是A卡的一堆、hd3000的几个、N卡的几个加上高通的无线网卡驱动，用了很久也琢磨了好久后，终于找到了解决高通无线挂的解决方案，下面是方法：由于14系统内删除了Airport40的驱动，而ath9k插件又正是对其起的作用，因此前提条件是我们需要将13的这个kext拿来用，后面我会给出附件，ath9k插件的作者很久没有维护了，目前为止，作者源码只支持到10.13，因此需要我们手动修改源码使其能够支持到10.15，这里不做过多介绍，有兴趣的可以在下面评论，我会尽量解答，这里只把需要的附件做简要说明，大家也就不用再去clone源码修改编译了，附件主要包括3个，第一个是AtherosAirport40驱动，是我从13.6beta4中提取出来的，大家直接将其安装到/Library/Extensions/即可，然后就是我基于作者源码修改后的ath9k插件和最新的lilu（也是最新源码修改的），将这两个插件放到CLOVER，最后，为了保险起见，在config加上两个boot参数，分别是-lilubetaall 和 -ath9565，当然这是9565的参数，其余参数参见ath9k的说明文档，下面有链接，然后重建缓存、修复权限重启就可以了。详见：http://bbs.pcbeta.com/viewthread-1790406-1-1.html 感谢套路athlonreg APFS转换解决方法Apple已经删除了我们必须避免APFS转换的选项，常规的方法已经无法避免安装过程中自动将分区转换为APFS格式，包括在硬盘上安装以及SSD上面安装。以下是一些目前已知的替代品：1.使用Carbon Copy Cloner（CCC）应用程序格式驱动器备份到HFS + J并恢复备份。2.使用此应用程序将APFS分区转换为HFS + J：https：//www.paragon-software.com/home/apfs-hfs-converter/3.使用USB转SATA电缆从外部卸下HDD / SSD并安装macOS（似乎避免了APFS转换）。4.修补安装程序，由你来找到这个方法。 安装中出现的IOConsoleUsers: time(0) 0-&gt;0, lin 0, llk 1, IOConsoleUsers: gIOScreenLockState 3, hs 0, bs 0, nov 0, sm 0x0错误的临时解决方法群里最常见的安装过程中出现的一个错误是：12IOConsoleUsers: time(0) 0-&gt;0, lin 0, llk 1,IOConsoleUsers: gIOScreenLockState 3, hs 0, bs 0, nov 0, sm 0x0原因是系统无法识别出你的显卡驱动，临时的解决方法是：取消勾选Inject Intel或者将platform-id修改为0x12345678两种方法二选一，不知道如何操作的请移步Clover使用教程安装完成后再通过Clover Configurator设置正确的FakeID和ig-plaform-id驱动你的显卡。 去掉Lilu的输出信息,还原10.13/10.14 内核崩溃(kernel pance)的真相原文出处：https://applelife.ru/threads/ustanovka-macos-high-sierra-10-13-na-intel-pc.2210706/page-358#post-686953**方法1：**使用文本编辑器，在KernelToPatch段落添加内容：1234567891011121314151617181920&lt;key&gt;KernelToPatch&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on Release kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AIoChMB0 &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.14.4,10.14.5&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AIoChMDr &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/array&gt;**方法2：**使用Clover Configurator打开config.plist - Kernel and Kext Patches - kernelToPatch，新添加：1234Comment: Disable panic kext logging on 10.15.4 Release kernelFind: 008a0284c074Replace: 008a0284c0ebMatchOS: 10.14.4,10.14.5 其它的内核补丁备用，请自行食用：123456789101112131415161718192021222324252627282930313233XCPM patches 10.15_cpuid_set_infoFind: 72 3c d0 77 50 0f b6 c0Repl: xx 3c d0 77 50 0f b6 c0_xcpm_bootstrapFind: 8D 43 C4 3C 22 77 22Repl: 8D 43 xx 3C 22 77 22_xcpm_SMT_scope_msrs #1Find: BE060000005DE908000000Repl: BE060000005DC390909090_xcpm_SMT_scope_msrs #2Find: 31 D2 E8 3E FD FF FFRepl: 31 D2 90 90 90 90 90_xcpm_core_scope_msrsFind: 31 D2 E8 51 FD FF FFRepl: 31 D2 90 90 90 90 90_xcpm_pkg_scope_msrsFind: 31 D2 E8 74 FD FF FFRepl: 31 D2 90 90 90 90 90disable all msrs aboveFind: BE 06 00 00 00 5D E9 08 00 00 00 0F 1F 84 00 00 00 00 00 55Repl: BE 06 00 00 00 5D E9 08 00 00 00 0F 1F 84 00 00 00 00 00 C3Performance patch (credit to @vit9696)Find: C1E3084863D389D048C1EA20Repl: C1E308B800FF000031D29090引用链接：https://www.insanelymac.com/forum/topic/339035-pre-release-macos-catalina/?page=2&amp;tab=comments#comment-2676147 Block injected kexts 禁用无效的、未知的驱动程序当你面对这么一堆驱动的时候，如何让它们有条不紊地正常工作呢？万一出现问题的时候又如何让这些驱动在Clover引导的时候禁用它们呢？这个时候 Block injected kexts 就派上用场了。新版的 Clover Bootloader 已经将 Block injected kexts 放到了 macOS 系统分区的图标下面了。操作方法：开机进入clover引导界面，要引导的分区卷标上按 空格 即可进入光标移动到 Block injected kexts 回车进入选择当前系统加载的驱动程序目录勾选禁用的驱动程序按 ESC 退出该子菜单 选择-v时出现Attempting system restart...MACH Reboot的解决方法在安装High Sierra启动过程中，选择-v跑时会出现1Attempting system restart...MACH Reboot而不用-v图跑直接显示苹果标志时则不会出现。 解决方法在config.plist配置文件DropTables下添加以下代码：12345678910111213141516&lt;key&gt;ACPI&lt;/key&gt;&lt;key&gt;DropTables&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;MATS&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;DMAR&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;BGRT&lt;/string&gt; &lt;/dict&gt;&lt;/array&gt; 抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;的原因及解决方法群里遇到最多的问题就是抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;,一直想就此写个解决方法 原因出现该提示最根本的原因就是你之前的磁盘分区中ESP分区的尺寸小于200MB 解决方法Windows下使用diskgenius删除掉MSR分区,将多出来的分区合并到ESP,正好凑成200MB,以满足安装macOS的基本需求.macOS下可以直接使用磁盘工具进行抹盘,它会自动生成一个200MB的EFI分区,当然前提条件是你需要先备份好磁盘里的数据,否则会造成全盘数据的丢失,请谨慎操作. 关于macOS Catalina 10.15下修改显存以及帧缓存、显示接口请移步另一篇教程：Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇]新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。diskutil命令的基本用法： 查看磁盘分区表1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme256 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s23:Microsoft Basic DataWIN10127.7 GBdisk0s3/dev/disk1(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme16 GBdisk11:EFIEFI200 MBdisk1s12:Apple_HFSInstall macOS Sierra15.8 GBdisk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1打开Finder，注意后面有个.1open .左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[Windows篇] 挂载EFI分区Windows操作系统下面,打开cmd窗口,输入命令:1234567diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为EFI分区assign letter=X # x为EFI分区盘符您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 添加UEFI引导选项使用工具:BOOTICE 操作过程:打开BOOTICE软件,选择物理磁盘,选择欲操作的目标磁盘,点击分区管理,弹出分区管理的窗口,点击分配盘符,为ESP分区分配一个盘符,点击确定选择UEFI,点击修改启动序列,点击添加按钮,菜单标题填写:CLOVER,选择启动文件,在打开的窗口里选择ESP分区下的目录\EFI\CLOVER\CLOVERX64.EFI,点击保存当前启动项设置 重建缓存的命令打开终端，输入命令：1sudo kextcache -i / 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Catalina</tag>
        <tag>10.15</tag>
        <tag>安装</tag>
        <tag>常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS Mojave 10.14安装中常见的问题及解决方法]]></title>
    <url>%2FCommon-problems-and-solutions-in-macOS-Mojave-10.14-installation.html</url>
    <content type="text"><![CDATA[随着macOS Mojave(莫哈韦) 10.14发行正式版本的临近，各种安装常见问题也需要同步更新，本篇文章就是针对10.14的常见问题的汇总，我会持续不间断更新，敬请期待 安装提示安装macOS 应用程序副本已损坏，不能用来安装macOS的解决方法该错误会经常出现于旧版中，根源是苹果的安装镜像中的证书过期导致的。解决方法如下：实用工具-终端，输入命令：date 0201010116，回车后关闭终端，可继续安装进程；安装过程中全程断开网络 关于Clover Bootloader的版本想要正确地安装macOS Mojave 10.14，它要求你的Clover Bootloader版本不低于r4515，截止到目前为止[4-11-2019]，Clover Bootloader的版本已经更新为v2.4k r4919，支持安装macOS Mojave 10.14.4。Clover Bootloader最新版本下载[r4911] by sherlocks fix applertc patch for 10.14.4+. thanks to RodionS 如果有遇到开机提示按F1才能进系统的请将CLOVER更新到r4911或以上 注意事项在HFS +上安装macOS Mojave时，通过系统偏好设置自动更新系统的功能会消失。解决方案：使用脚本下载10.14.4Beta更新包，原帖：https://github.com/Gengik84/MacOS_Updater1curl -O https://raw.githubusercontent.com/Gengik84/MacOS_Updater/master/MacOS_Updater &amp;&amp; chmod +x ./MacOS_Updater &amp;&amp; sh ./MacOS_Updater从第三方来源安装程序：1sudo spctl --master-disable关闭Thunderbolt更新：1sudo softwareupdate --ignore ThunderboltFirmwareUpdate1.2为第三方SSD启用TRIM1sudo trimforce enable 取消4位数密码限制12pwpolicy -clearaccountpoliciespasswd 安装卡在最后2分钟的解决方法断开网络使用OsxAptioFixDrv-64.efi或者OsxAptioFixDrv3-64.efi替换AptioMemoryFix.efi，每次只可以用一个驱动抹盘直接选择APFS格式，减少HFS+转换成APFS的过程 z390主板安装卡在apfs_module_start的解决方法请于Acpi - DSDT - Patches中添加：123Comment: Fix AsRock Z390 BIOS DSDT Device(RTC) bugFind: A00A9353 54415301Replace: A00A910A FF0BFFFF 找不到安装器资源的解决方法断网删除drivers64UEFI目录下的EmuVariableUefi-64.efi修改机型为最近三年，比如MacBootPro13,1 MacBookPro14,1 iMac17,1 等等如果是双硬盘，拔掉那个不安装的，待安装完后再插回去检查镜像的md5值 关于HD3000平台macOS Mojave 10.14已经不支持Sandy Bridge平台的安装使用，解决方法有两个：在引导标志(boot args)添加-no_compat_check跳过兼容性检查修改SMBIOS为：MacBookAir5,1 Kaby Lake UHD 620显卡特别说明部分基于类似AAPL GfxYTile的注入参数在macOS Mojave 10.14中会失效，它要求将Clover Bootloader版本至少更新到r4587或以上，Clover Bootloader最新版本下载 关于声卡注入的IDApple已从macOS Mojave 10.14上的AppleHDA.kext中删除了大量的Layouts，因此很多人需要修改/修补当前的AppleHDA.kext / AudioInjector才能使音频恢复到工作状态。Apple在macOS Mojave上删除的布局ID为：Layout1,3,8,9,11,12,13,18,22,23,24,25,26,27,28,29,30,31,32,34,36,37,38,39,41， 42,43,44,45,46,47,48,49,50等要查看已删除的布局的完整列表以及可用于替换已删除的布局的列表，下面是一张可以使用并可在macOS Mojave 10.14上使用的可用布局的图片：好消息是vit9696通过更新他的AppleALC解决了影响去除布局的问题。AppleALC最新版本的下载：https://github.com/acidanthera/AppleALC/releases minStolenSize新补丁，用于Broadwell, Skylake 以及KabylakeKaby Lake1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelKBLGraphicsFramebufferFind: 764648FF 05Replace: EB4648FF 05Sky Lake1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelSKLGraphicsFramebufferFind: 764048FF 05Replace: EB4048FF 05Broadwall1234Comment: Disable minStolenSize less or equal fStolenMemorySize assertion, 10.14 Credits (Sniki)Name: com.apple.driver.AppleIntelBDWGraphicsFramebufferFind: 764048FF 05Replace: EB4048FF 05 USB解除端口限制补丁12345Comment: USB Port limit patch 10.14 (credits FredWst)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0F 83030500 00Replace: 83FB0F90 90909090 90MatchOS: 10.1412345Comment: USB Port limit patch 10.14.1 10.14.2 Beta (credits DalianSky)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0F 838F0400 00Replace: 83FB0F90 90909090 90MatchOS: 10.14.1,10.14.23-28-2019更新：10.14.x解除USB端口限制补丁1234567891011121314151617181920212223Comment: USB port limit patch #1 10.14.x modify by DalianSky(credit ydeng)Name: com.apple.iokit.IOUSBHostFamilyFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14.xComment: USB port limit patch #2 10.14.x modify by DalianSky(credit PMHeart)Name: com.apple.iokit.IOUSBHostFamilyFind: 83E30FD3Replace: 83E33FD3MatchOS: 10.14.xComment: USB Port limit patch #3 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FB0F0FReplace: 83FB3F0FMatchOS: 10.14,10.14.1,10.14.2,10.14.3Comment: USB Port limit patch #4 10.14.x modify by DalianSky(credits PMheart)Name: com.apple.driver.usb.AppleUSBXHCIFind: 83FF0F0FReplace: 83FF3F0FMatchOS: 10.14.x Intel HD3000显卡驱动由于macOS Mojave 10.14中已经将AppleIntelHD3000Graphics.kext等相关驱动移除，一个折衷的解决方案是复制一份macOS Sierra 10.12.x的驱动到/System/Library/Extensions，重建缓存后重启即可享用。详见https://www.tonymacx86.com/threads/success-lenovo-b570e.255129/page-2#post-1770059 找回丢失的DW1560/Brcm94352Z驱动Mojave系统下的蓝牙会失效，截止到目前的解决方法是：将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/Library/Extensions目录下当然，在重启前，还要重建一下系统的缓存，命令为：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U /如果嫌输入命令麻烦，也可以使用应用Kext Utility重建缓存。重启你的系统，检查WIFI/蓝牙是否工作正常。 关于10.14高通无线失效无法驱动的问题的解决方案[来自套路]升级到Mojave的大家应该都看到了，14的驱动删掉了好多，最惹人注意的就是A卡的一堆、hd3000的几个、N卡的几个加上高通的无线网卡驱动，用了很久也琢磨了好久后，终于找到了解决高通无线挂的解决方案，下面是方法：由于14系统内删除了Airport40的驱动，而ath9k插件又正是对其起的作用，因此前提条件是我们需要将13的这个kext拿来用，后面我会给出附件，ath9k插件的作者很久没有维护了，目前为止，作者源码只支持到10.13，因此需要我们手动修改源码使其能够支持到10.14，这里不做过多介绍，有兴趣的可以在下面评论，我会尽量解答，这里只把需要的附件做简要说明，大家也就不用再去clone源码修改编译了，附件主要包括3个，第一个是AtherosAirport40驱动，是我从13.6beta4中提取出来的，大家直接将其安装到/Library/Extensions/即可，然后就是我基于作者源码修改后的ath9k插件和最新的lilu（也是最新源码修改的），将这两个插件放到CLOVER，最后，为了保险起见，在config加上两个boot参数，分别是-lilubetaall 和 -ath9565，当然这是9565的参数，其余参数参见ath9k的说明文档，下面有链接，然后重建缓存、修复权限重启就可以了。详见：http://bbs.pcbeta.com/viewthread-1790406-1-1.html 感谢套路athlonreg APFS转换解决方法Apple已经删除了我们必须避免APFS转换的选项，常规的方法已经无法避免安装过程中自动将分区转换为APFS格式，包括在硬盘上安装以及SSD上面安装。以下是一些目前已知的替代品：1.使用Carbon Copy Cloner（CCC）应用程序格式驱动器备份到HFS + J并恢复备份。2.使用此应用程序将APFS分区转换为HFS + J：https：//www.paragon-software.com/home/apfs-hfs-converter/3.使用USB转SATA电缆从外部卸下HDD / SSD并安装macOS（似乎避免了APFS转换）。4.修补安装程序，由你来找到这个方法。 安装中出现的IOConsoleUsers: time(0) 0-&gt;0, lin 0, llk 1, IOConsoleUsers: gIOScreenLockState 3, hs 0, bs 0, nov 0, sm 0x0错误的临时解决方法群里最常见的安装过程中出现的一个错误是：12IOConsoleUsers: time(0) 0-&gt;0, lin 0, llk 1,IOConsoleUsers: gIOScreenLockState 3, hs 0, bs 0, nov 0, sm 0x0原因是系统无法识别出你的显卡驱动，临时的解决方法是：取消勾选Inject Intel或者将platform-id修改为0x12345678两种方法二选一，不知道如何操作的请移步Clover使用教程安装完成后再通过Clover Configurator设置正确的FakeID和ig-plaform-id驱动你的显卡。 去掉Lilu的输出信息,还原10.13/10.14 内核崩溃(kernel pance)的真相原文出处：https://applelife.ru/threads/ustanovka-macos-high-sierra-10-13-na-intel-pc.2210706/page-358#post-686953**方法1：**使用文本编辑器，在KernelToPatch段落添加内容：1234567891011121314151617181920&lt;key&gt;KernelToPatch&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on Release kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AIoChMB0 &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.14.4,10.14.5&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AIoChMDr &lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/array&gt;**方法2：**使用Clover Configurator打开config.plist - Kernel and Kext Patches - kernelToPatch，新添加：1234Comment: Disable panic kext logging on 10.14.4 Release kernelFind: 008a0284c074Replace: 008a0284c0ebMatchOS: 10.14.4,10.14.5 其它的内核补丁备用，请自行食用：12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455cpuid_set_info_rdmsr (c) vit9696B9A00100 000F32B9A00100 0031C010.12.x,10.13.x,10.14.x xcpm_idle_wrmsr (c) Pike R. AlphaB9E20000 000F30B9E20000 00909010.12.x,10.13.x,10.14.x xcpm_assert_rdmsr (c) SherlocksB9980100 000F32B9980100 0031C010.12.x,10.13.x,10.14.x xcpm_SMT_scope_msrs (c) Pike R. AlphaBE0B0000 005DE908 000000BE0B0000 005DC390 90909010.12.x,10.13.x,10.14.x cpuid_set_info (c) Pike R. Alpha04723CD004XX3CD0 10.13.x,10.14.x- XX: need value you want xcpm_bootstrap (c) Pike R. Alpha89D804C4 3C2289D804XX 3C2210.13.x,10.14.x- XX: need value you want xcpm_assert_wrmsr (c) SherlocksB9990100 000F30B9990100 00909010.13.x,10.14.x xcpm_core_scope_msrs (c) Pike R. AlphaBE030000 0031D2E8 79FCFFFFBE030000 0031D290 90909090 xcpm_pkg_scope_msrs (c) Pike R. AlphaBE070000 0031D2E8 91FCFFFFBE070000 0031D290 9090909010.14.x xcpm_program_msrs (c) Pike R. Alpha554889E5 41574156 41554154 53504189 D64889FB 4189F54C 8D3D6387C39089E5 41574156 41554154 53504189 D64889FB 4189F54C 8D3D638710.14.x xcpm_SMT_scope_msrs (c) Pike R. AlphaBE0B0000 0031D2E8 66FCFFFFBE0B0000 0031D290 9090909010.14.x Block injected kexts 禁用无效的、未知的驱动程序当你面对这么一堆驱动的时候，如何让它们有条不紊地正常工作呢？万一出现问题的时候又如何让这些驱动在Clover引导的时候禁用它们呢？这个时候 Block injected kexts 就派上用场了。新版的 Clover Bootloader 已经将 Block injected kexts 放到了 macOS 系统分区的图标下面了。操作方法：开机进入clover引导界面，要引导的分区卷标上按 空格 即可进入光标移动到 Block injected kexts 回车进入选择当前系统加载的驱动程序目录勾选禁用的驱动程序按 ESC 退出该子菜单 选择-v时出现Attempting system restart...MACH Reboot的解决方法在安装High Sierra启动过程中，选择-v跑时会出现1Attempting system restart...MACH Reboot而不用-v图跑直接显示苹果标志时则不会出现。 解决方法在config.plist配置文件DropTables下添加以下代码：12345678910111213141516&lt;key&gt;ACPI&lt;/key&gt;&lt;key&gt;DropTables&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;MATS&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;DMAR&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;BGRT&lt;/string&gt; &lt;/dict&gt;&lt;/array&gt; 抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;的原因及解决方法群里遇到最多的问题就是抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;,一直想就此写个解决方法 原因出现该提示最根本的原因就是你之前的磁盘分区中ESP分区的尺寸小于200MB 解决方法Windows下使用diskgenius删除掉MSR分区,将多出来的分区合并到ESP,正好凑成200MB,以满足安装macOS的基本需求.macOS下可以直接使用磁盘工具进行抹盘,它会自动生成一个200MB的EFI分区,当然前提条件是你需要先备份好磁盘里的数据,否则会造成全盘数据的丢失,请谨慎操作. 关于macOS Mojave 10.14下修改显存以及帧缓存、显示接口请移步另一篇教程：Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇]新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。diskutil命令的基本用法： 查看磁盘分区表1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme256 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s23:Microsoft Basic DataWIN10127.7 GBdisk0s3/dev/disk1(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme16 GBdisk11:EFIEFI200 MBdisk1s12:Apple_HFSInstall macOS Sierra15.8 GBdisk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1打开Finder，注意后面有个.1open .左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[Windows篇] 挂载EFI分区Windows操作系统下面,打开cmd窗口,输入命令:1234567diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为EFI分区assign letter=X # x为EFI分区盘符您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 添加UEFI引导选项使用工具:BOOTICE 操作过程:打开BOOTICE软件,选择物理磁盘,选择欲操作的目标磁盘,点击分区管理,弹出分区管理的窗口,点击分配盘符,为ESP分区分配一个盘符,点击确定选择UEFI,点击修改启动序列,点击添加按钮,菜单标题填写:CLOVER,选择启动文件,在打开的窗口里选择ESP分区下的目录\EFI\CLOVER\CLOVERX64.EFI,点击保存当前启动项设置 重建缓存的命令打开终端，输入命令：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U / 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Mojave</tag>
        <tag>10.14</tag>
        <tag>安装</tag>
        <tag>常见问题</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理]]></title>
    <url>%2FCoffee-Lake-frame-buffer-patch-and-UHD630-Coffee-Lake-ig-platform-id-data-finishing.html</url>
    <content type="text"><![CDATA[Coffee Lake帧缓冲区补丁及UHD630 Coffee Lake ig-platform-id数据整理 Mojave帧缓冲补丁随着Mojave发布的临近，原有的基于Clover的帧缓冲区二进制补丁已经不适用了。好消息是vit9696和headkaze重新创建了基于Lilu和WhateverGreen的新的帧缓冲区补丁。当然它也适用于macOS的所有的以前和未来的版本。 Coffee Lake用户请注意：新的WhateverGreen不会用于仿冒Kaby Lake的平台id工作。你需要使用新的MacOS Mojave 10.14 DB4/DP3(18A336e)或者macOS High Sierra 10.13.6(17G2112)，后者仅适用于MacBookPro15,1或MacBookPro15,2的一个特殊版本。您可以创建一个MacOS High Sierra 10.13.6(17G2112)，通过installinstallmacos.py，或者直接通过本站下载 Lilu + WhateverGreenWhateverGreen是要取代所有基于Lilu的其它视频补丁插件（它目前已经合并WhateverGreen,IntelGraphicsFixup,NvidiaGraphicsFixup,Shiki和CoreDisplayFixup)。其它人很可能会遵循(如AppleALC,HibernationFixup和IntelGraphicsDVMTFixup)。这是旨在为视频的所有功能于一身的解决方案。 Beta警告请注意，目前处于试用状态，您需要自己承担该的风险。我只是记录在这里，这对于那些需要得到帧缓冲区补丁的人来说。 初步动作删除FakePCIID IntelGraphicsFixup,NvidiaGraphicsFixup,Shiki和CoreDisplayFixup关闭Clover里面关于Graphics注入的参数，这些参数包括：config.plist/Graphics/Inject/ATI=NOconfig.plist/Graphics/Inject/Intel=NOconfig.plist/Graphics/Inject/NVidia=NOconfig.plist/Graphics/ig-platform-id=config.plist/Devices/FakeID/IntelGFX=关闭Clover里面关于DSDT的修复：AddHDMIFixDisplayFixIntelGfxAddIMEI禁用UseIntelHDMI移除boot argument参数：-disablegfxfirmware移除IGPU和HDMI部分的全部内容，包括：config.plist/Devices/Arbitraryconfig.plist/Devices/Propertiesconfig.plist/Devices/AddProperties从以下位置删除任何与IGPU和HDMI相关的SSDT和DSDT：CLOVER/ACPI/patched 下载WhateverGreen和Lilu下载链接：Lilu WhateverGreen 获取iGPU显卡设备的路径下载并使用gfxutil工具，如下所示：12$ gfxutil -f IGPUDevicePath = PciRoot(0x0)/Pci(0x2,0x0) ig-platform-id对于AAPL,ig-platform-id条目Clover要求此值为数据格式，因此您需要反转字节。因此，如果您希望您的platform-id为0x3EA50009，请首先反转字节（0900A53E），然后使用Xcode的plist编辑器将值添加到Clover的config.plist中。我应该为我的系统使用什么ig-platform-id？您应该选择与您的系统最匹配的一个。我建议你在选择之前先做一些研究。有关可用选项，请参阅本文后面的ig-platform-id数据整理。您可以通过连字符后面的第一个数字来确定CPU的迭代。例子：英特尔（R）酷睿（TM）i5-2760QM（第2代）英特尔（R）酷睿（TM）i7-5257U CPU @ 2.70GHz（第5代）英特尔（R）酷睿（TM）m3-6Y30（第6代）英特尔（R）酷睿（TM）i5-8350U（第8代）以下是一些推荐的platform-id： 第2代：Sandy Bridge（Intel HD Graphics 2000/3000）支持从Mac OS X 10.7.x开始，以macOS 10.13.6结束Metal支持不可用桌面：0x00030010（默认）笔记本电脑：0x00010000（默认） 第3代：Ivy Bridge（Intel HD Graphics 2500/4000）从OS X 10.8.x开始支持桌面：0x0166000A（默认值），0x01620005笔记本电脑：0x01660003（默认），0x01660009, 0x01660004 第4代：Haswell（Intel HD Graphics 4200-5200）从OS X 10.9.x开始支持桌面：0x0D220003（默认）笔记本电脑：0x0A160000（默认），0x0A260005（推荐） 第5代：Broadwell（Intel HD Graphics 5300-6300）从OS X 10.10.2开始支持桌面：0x16220007（默认）笔记本电脑：0x16260006（默认） 第6代：Skylake（Intel HD Graphics 510-580）从OS X 10.11.4开始支持桌面：0x19120000（默认）笔记本电脑：0x19160000（默认） 第7代：Kaby Lake（Intel HD Graphics 610-650）支持从macOS 10.12.6开始桌面：0x59160000（默认）笔记本电脑：0x591B0000（默认） 第8代：Coffee Lake（Intel UHD Graphics630）支持从macOS 10.14 DB4/macOS 10.13.6(17G2112/17G2208)开始桌面：0x3EA50000（默认），0x3E9B0007（推荐）笔记本电脑：0x3EA50009（默认） Framebuffer补丁WhateverGreen为您自动完成大部分工作，在大多数情况下，您不需要任何额外的Framebuffer补丁。 至少应该选择适合您系统的ig-platform-id并将其放在config.plist / Devices / Properties中，如下所示： 以下是您可能需要额外的Framebuffer补丁的一些原因：为那些无法在BIOS中设置高于32 MB的人设置DVMT（framebuffer-stolenmem / framebuffer-fbmem）设置更高的VRAM（framebuffer-unifiedmem）禁用eGPU（disable-external-gpu）启用4K支持的像素时钟补丁（enable-hdmi20）禁用连接器以启用睡眠（framebuffer-pipecount / framebuffer-portcount / framebuffer-conX-type =-1）删除低于10.13.6上的eDP笔记本电脑屏幕的CNConnectorAlwaysConnected标志（framebuffer-con0-flags = 0x00000090）更改连接器类型以匹配您的系统端口（framebuffer-conX-type）我们有两种不同类型的补丁： 硬编码（推荐）1234567891011121314151617framebuffer-patch-enable (required to enable below)framebuffer-framebufferid (optional; defaults to current platform-id)(all below are optional)framebuffer-mobileframebuffer-pipecountframebuffer-portcountframebuffer-memorycountframebuffer-stolenmemframebuffer-fbmemframebuffer-unifiedmemframebuffer-conX-enable (required to enable below)framebuffer-conX-indexframebuffer-conX-busidframebuffer-conX-pipeframebuffer-conX-typeframebuffer-conX-flags 查找/替换12345framebuffer-patchX-enable (required to enable below)framebuffer-patchX-framebufferid (optional; defaults to current platform-id)framebuffer-patchX-findframebuffer-patchX-replaceframebuffer-patchX-count (optional; defaults to 1)你应该把这些补丁放到CLOVER配置文件config.plist中的Devices/Properties 下面是一些补丁的例子32MB BIOS, 19MB stolen (framebuffer) 9MB fbmem (cursor) 2048MB unifiedmem (vram)**备注：**该值以字节为单位，所以你应该MB转换为字节（你可以使用这个在线转换器）12345678910111213141516171819&lt;key&gt;Devices&lt;/key&gt;&lt;dict&gt; &lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt;CQClPg==&lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-stolenmem&lt;/key&gt; &lt;integer&gt;19922944&lt;/integer&gt; &lt;key&gt;framebuffer-fbmem&lt;/key&gt; &lt;integer&gt;9437184&lt;/integer&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;integer&gt;2147483648&lt;/integer&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt;Pipe / Port Count 3 to 2 - Connector 1 (BusId 0x4) DP to HDMI - Connector 2 (BusId 0x6) Disable备注：WhateverGreen会自动设置所有连接器从DP-&gt; HDMI（你可以使用**-igfxnohdmi**引导标志禁用这个）12345678910111213141516171819202122232425&lt;key&gt;Devices&lt;/key&gt;&lt;dict&gt; &lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt;CQClPg==&lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-pipecount&lt;/key&gt; &lt;integer&gt;2&lt;/integer&gt; &lt;key&gt;framebuffer-portcount&lt;/key&gt; &lt;integer&gt;2&lt;/integer&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;integer&gt;0x00000800&lt;/integer&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;integer&gt;-1&lt;/integer&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt;这里是查找/替换方法的一个例子：1234567891011121314151617&lt;key&gt;Devices&lt;/key&gt;&lt;dict&gt; &lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt;CQClPg==&lt;/data&gt; &lt;key&gt;framebuffer-patch0-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-patch0-find&lt;/key&gt; &lt;data&gt;AAAIAAIAAACYAAAA&lt;/data&gt; &lt;key&gt;framebuffer-patch0-replace&lt;/key&gt; &lt;data&gt;AAAIAAIAAACHAQAA&lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt;以我的机器为例：我的这台笔记本是dell inspiron 15 7560，显卡为Intel HD Graphics 620，platform-id为0x59160000。123456789101112ID: 59160000, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000B0BTOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109588480 bytes)GPU Name: Intel HD Graphics 620Model Name(s): MacBookPro14,2Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - HDMI00000800 02000000 9800000001050900 00040000 8701000002040A00 00080000 87010000通过查询FreamBuffer数据得知：它有三个显示接口：LVDS（内屏）/DP（外屏）/HDMI（外屏），而这台笔记本只有一个HDMI的显示接口用于连接外部显示器，我希望让外屏能正常工作，包括完美支持HDMI显示/音频同步输出，同时我想装个逼，顺手修改下显存为3072MB(framebuffer-unifiedmem)。补丁如下：Pipe / Port Count 3 to 2 - Connector 1 (BusId 0x5) DP to HDMI - Connector 2 (BusId 0x4) Disable123456789101112131415161718192021222324252627&lt;key&gt;Devices&lt;/key&gt;&lt;dict&gt; &lt;key&gt;Properties&lt;/key&gt; &lt;dict&gt; &lt;key&gt;PciRoot(0x0)/Pci(0x2,0x0)&lt;/key&gt; &lt;dict&gt; &lt;key&gt;AAPL,ig-platform-id&lt;/key&gt; &lt;data&gt;AAAWWQ==&lt;/data&gt; &lt;key&gt;framebuffer-patch-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-pipecount&lt;/key&gt; &lt;integer&gt;2&lt;/integer&gt; &lt;key&gt;framebuffer-portcount&lt;/key&gt; &lt;integer&gt;2&lt;/integer&gt; &lt;key&gt;framebuffer-con1-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-con1-type&lt;/key&gt; &lt;integer&gt;0x00000800&lt;/integer&gt; &lt;key&gt;framebuffer-con2-enable&lt;/key&gt; &lt;integer&gt;1&lt;/integer&gt; &lt;key&gt;framebuffer-con2-type&lt;/key&gt; &lt;integer&gt;-1&lt;/integer&gt; &lt;key&gt;framebuffer-unifiedmem&lt;/key&gt; &lt;data&gt;AAAAwA==&lt;/data&gt; &lt;/dict&gt; &lt;/dict&gt;&lt;/dict&gt;自动化打补丁程序下载：FBPatcher，后续我会发布该工具的教程，敬请期待。 调试如果您需要的帧缓冲区的转储十六进制使用的引导标志**-igfxdump**。输出将在**/ AppleIntelFramebuffer_GEN_KERNX_Y启动驱动器（如AppleIntelFramebuffer_10_17.7）上。使用INTEL核显FB修复工具FBPatcher可以生成config.plist/Devices/Properties的补丁，最新的版本还支持为USB端口和声卡打补丁；010编辑器支持IntelFramebuffer.bt解析帧缓存的二进制文件的模板。 从WhateverGreen请给调试输出，并使用-wegdbg**引导标志。您将需要编译WhateverGreen作为调试的这两个标志的工作。要查看调试输出使用：1log show --predicate 'process == "kernel" AND (eventMessage CONTAINS "WhateverGreen" OR eventMessage CONTAINS "Lilu")' --style syslog --source --last boot 感谢非常感谢vit9696他的所有帮助实现这一点，也书写了惊人的Lilu和WhateverGreen插件。同时也感谢所有其他的贡献者。 macOS High Sierra 10.13.6(17G2112)/Mojave ig-platform-id数据整理 Sandy Bridge1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980ID: 00010000TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB, MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1064960 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): MacBookPro8,1 MacBookPro8,2 MacBookPro8,3Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 2, PortCount: 4, FBMemoryCount: 0[5] busId: 0x03, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000009 - DP[4] busId: 0x06, pipe: 0, type: 0x00000400, flags: 0x00000009 - DP05030000 02000000 3000000002050000 00040000 0700000003040000 00040000 0900000004060000 00040000 09000000ID: 00020000TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB, MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1052672 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): MacBookPro8,3Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 2, PortCount: 1, FBMemoryCount: 0[5] busId: 0x03, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS05030000 02000000 30000000ID: 00030010TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB, MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1060864 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): Macmini5,1 Macmini5,3Freq: 0 Hz, FreqMax: -1 HzMobile: 0, PipeCount: 2, PortCount: 3, FBMemoryCount: 0[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000009 - DP[4] busId: 0x06, pipe: 0, type: 0x00000800, flags: 0x00000006 - HDMI02050000 00040000 0700000003040000 00040000 0900000004060000 00080000 06000000ID: 00030030TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 0 bytes, MAX STOLEN: 0 bytes, MAX OVERALL: 0 bytesGPU Name: Intel HD Graphics 3000Model Name(s): Macmini5,2Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 00040000TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB, MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1060864 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): MacBookAir4,1 MacBookAir4,2Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 2, PortCount: 3, FBMemoryCount: 0[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000009 - DP01000000 02000000 3000000002050000 00040000 0700000003040000 00040000 09000000ID: 00030020TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1589248 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): Macmini5,1 Macmini5,3Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 0[1] busId: 0x00, pipe: 0, type: 0x00000400, flags: 0x00000030 - DP[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000009 - DP[4] busId: 0x06, pipe: 0, type: 0x00000800, flags: 0x00000006 - HDMI01000000 00040000 3000000002050000 00040000 0700000003040000 00040000 0900000004060000 00080000 06000000ID: 00050000TOTAL STOLEN: 0 bytes, TOTAL CURSOR: 1 MB, MAX STOLEN: 0 bytes, MAX OVERALL: 1 MB (1052672 bytes)GPU Name: Intel HD Graphics 3000Model Name(s): iMac12,1 iMac12,2Freq: 0 Hz, FreqMax: -1 HzMobile: 0, PipeCount: 2, PortCount: 1, FBMemoryCount: 0[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP02050000 00040000 07000000 Ivy Bridge1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531540x01660000 (desktop, 4 connectors)0x01620006 (desktop, 0 connectors, no fbmem)0x01620007 (desktop, 0 connectors, no fbmem)0x01620005 (desktop, 3 connectors)0x01660001 (mobile, 4 connectors)0x01660002 (mobile, 1 connectors)0x01660008 (mobile, 3 connectors)0x01660009 (mobile, 3 connectors)0x01660003 (mobile, 4 connectors)0x01660004 (mobile, 1 connectors)0x0166000A (desktop, 3 connectors)0x0166000B (desktop, 3 connectors)ID: 01660000, STOLEN: 96 MB, FBMEM: 24 MB, VRAM: 1024 MBTOTAL STOLEN: 24 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 72 MB, MAX OVERALL: 73 MB (77086720 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): Freq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 3, PortCount: 4, FBMemoryCount: 3[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP[4] busId: 0x06, pipe: 0, type: 0x00000400, flags: 0x00000007 - DP01000000 02000000 3000000002050000 00040000 0700000003040000 00040000 0700000004060000 00040000 07000000ID: 01620006, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 256 MBTOTAL STOLEN: 0 bytes, TOTAL CURSOR: 0 bytes, MAX STOLEN: 0 bytes, MAX OVERALL: 0 bytesGPU Name: Intel HD Graphics 4000Model Name(s): UnknownFreq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 01620007, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 256 MBTOTAL STOLEN: 0 bytes, TOTAL CURSOR: 0 bytes, MAX STOLEN: 0 bytes, MAX OVERALL: 0 bytesGPU Name: Intel HD Graphics 4000Model Name(s): UnknownFreq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 01620005, STOLEN: 32 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 32 MB, MAX OVERALL: 33 MB (34615296 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): UnknownFreq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 2, PortCount: 3, FBMemoryCount: 2[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000011 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[4] busId: 0x06, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP02050000 00040000 1100000003040000 00040000 0701000004060000 00040000 07010000ID: 01660001, STOLEN: 96 MB, FBMEM: 24 MB, VRAM: 1536 MBTOTAL STOLEN: 24 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 72 MB, MAX OVERALL: 73 MB (77086720 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookPro10,2Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 3[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000800, flags: 0x00000006 - HDMI[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[4] busId: 0x06, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP01000000 02000000 3000000002050000 00080000 0600000003040000 00040000 0701000004060000 00040000 07010000ID: 01660002, STOLEN: 64 MB, FBMEM: 24 MB, VRAM: 1536 MBTOTAL STOLEN: 24 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 24 MB, MAX OVERALL: 25 MB (26742784 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookPro10,1Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 1, FBMemoryCount: 1[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS01000000 02000000 30000000ID: 01660008, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 48 MB, MAX OVERALL: 49 MB (51916800 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookAir5,1Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP01000000 02000000 3000000002050000 00040000 0701000003040000 00040000 07010000ID: 01660009, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 48 MB, MAX OVERALL: 49 MB (51916800 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookAir5,2Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP01000000 02000000 3000000002050000 00040000 0701000003040000 00040000 07010000ID: 01660003, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 32 MB, MAX OVERALL: 33 MB (34619392 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookPro9,2Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 2, PortCount: 4, FBMemoryCount: 2[5] busId: 0x03, pipe: 0, type: 0x00000002, flags: 0x00000030 - LVDS[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000407 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000081 - DP[4] busId: 0x06, pipe: 0, type: 0x00000400, flags: 0x00000081 - DP05030000 02000000 3000000002050000 00040000 0704000003040000 00040000 8100000004060000 00040000 81000000ID: 01660004, STOLEN: 32 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 16 MB, MAX OVERALL: 17 MB (18354176 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): MacBookPro9,1Freq: 1808 Hz, FreqMax: 1808 HzMobile: 1, PipeCount: 3, PortCount: 1, FBMemoryCount: 1[5] busId: 0x03, pipe: 0, type: 0x00000002, flags: 0x00000230 - LVDS05030000 02000000 30020000ID: 0166000A, STOLEN: 32 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 32 MB, MAX OVERALL: 33 MB (34615296 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): Macmini6,1Freq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 2, PortCount: 3, FBMemoryCount: 2[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[4] busId: 0x06, pipe: 0, type: 0x00000800, flags: 0x00000006 - HDMI02050000 00040000 0701000003040000 00040000 0701000004060000 00080000 06000000ID: 0166000B, STOLEN: 32 MB, FBMEM: 16 MB, VRAM: 1536 MBTOTAL STOLEN: 16 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 32 MB, MAX OVERALL: 33 MB (34615296 bytes)GPU Name: Intel HD Graphics 4000Model Name(s): Macmini6,2Freq: 1808 Hz, FreqMax: 1808 HzMobile: 0, PipeCount: 2, PortCount: 3, FBMemoryCount: 2[2] busId: 0x05, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x04, pipe: 0, type: 0x00000400, flags: 0x00000107 - DP[4] busId: 0x06, pipe: 0, type: 0x00000800, flags: 0x00000006 - HDMI02050000 00040000 0701000003040000 00040000 0701000004060000 00080000 06000000 Haswellx0C060000 (desktop, 3 connectors)0x0C160000 (desktop, 3 connectors)0x0C260000 (desktop, 3 connectors)0x04060000 (desktop, 3 connectors)0x04160000 (desktop, 3 connectors)0x04260000 (desktop, 3 connectors)0x0D260000 (desktop, 3 connectors)0x0A160000 (desktop, 3 connectors)0x0A260000 (desktop, 3 connectors)0x0A260005 (mobile, 3 connectors)0x0A260006 (mobile, 3 connectors)0x0A2E0008 (mobile, 3 connectors)0x0A16000C (mobile, 3 connectors)0x0D260007 (mobile, 4 connectors)0x0D220003 (desktop, 3 connectors)0x0A2E000A (desktop, 3 connectors)0x0A26000A (desktop, 3 connectors)0x0A2E000D (desktop, 2 connectors)0x0A26000D (desktop, 2 connectors)0x04120004 (desktop, 0 connectors, no fbmem)0x0412000B (desktop, 0 connectors, no fbmem)0x0D260009 (mobile, 1 connectors)0x0D26000E (mobile, 4 connectors)0x0D26000F (mobile, 1 connectors)ID: 0C060000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel Haswell GT1Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0C160000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel Haswell GT2Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0C260000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel Haswell GT3Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 04060000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel Haswell GT1Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 04160000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel HD Graphics 4600Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 04260000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0D260000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0A160000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel HD Graphics 4400Model Name(s): Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0A260000, STOLEN: 64 MB, FBMEM: 16 MB, VRAM: 1024 MB, Flags: 0x00000004TOTAL STOLEN: 209 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 209 MB, MAX OVERALL: 210 MB (220737536 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3000000001050900 04000000 0400000002040900 00080000 82000000ID: 0A260005, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x0000000FTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP[2] busId: 0x04, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP00000800 02000000 3000000001050900 00040000 8700000002040900 00040000 87000000ID: 0A260006, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x0000000FTOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): MacBookAir6,1 MacBookAir6,2 Macmini7,1Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP[2] busId: 0x04, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP00000800 02000000 3000000001050900 00040000 8700000002040900 00040000 87000000ID: 0A2E0008, STOLEN: 64 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000021ETOTAL STOLEN: 99 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 227 MB, MAX OVERALL: 228 MB (239611904 bytes)GPU Name: Intel Iris Graphics 5100Model Name(s): MacBookPro11,1Camelia: V1, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000107 - DP00000800 02000000 3000000001050900 00040000 0701000002040A00 00040000 07010000ID: 0A16000C, STOLEN: 64 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000001ETOTAL STOLEN: 99 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 227 MB, MAX OVERALL: 228 MB (239611904 bytes)GPU Name: Intel HD Graphics 4400Model Name(s): UnknownCamelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000107 - DP00000800 02000000 3000000001050900 00040000 0701000002040A00 00040000 07010000ID: 0D260007, STOLEN: 64 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000031ETOTAL STOLEN: 99 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 227 MB, MAX OVERALL: 228 MB (239616000 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): MacBookPro11,2 MacBookPro11,3Camelia: Disabled, Freq: 1953 Hz, FreqMax: 1953 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 11, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 11, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x06, pipe: 3, type: 0x00000800, flags: 0x00000006 - HDMI00000800 02000000 3000000001050B00 00040000 0701000002040B00 00040000 0701000003060300 00080000 06000000ID: 0D220003, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x00000402TOTAL STOLEN: 33 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): iMac14,1 iMac14,4Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - DP[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - DP01050900 00040000 8700000002040A00 00040000 8700000003060800 00040000 11000000ID: 0A2E000A, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x000000D6TOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)GPU Name: Intel Iris Graphics 5100Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000011 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - DP00000800 02000000 1100000001050900 00040000 8700000002040A00 00040000 87000000ID: 0A26000A, STOLEN: 32 MB, FBMEM: 19 MB, VRAM: 1536 MB, Flags: 0x000000D6TOTAL STOLEN: 52 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 116 MB, MAX OVERALL: 117 MB (123219968 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000011 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000087 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000087 - DP00000800 02000000 1100000001050900 00040000 8700000002040A00 00040000 87000000ID: 0A2E000D, STOLEN: 96 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000040ETOTAL STOLEN: 131 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 227 MB, MAX OVERALL: 228 MB (239607808 bytes)GPU Name: Intel Iris Graphics 5100Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 2, FBMemoryCount: 2[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000107 - DP01050900 00040000 0701000002040A00 00040000 07010000ID: 0A26000D, STOLEN: 96 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000040ETOTAL STOLEN: 131 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 227 MB, MAX OVERALL: 228 MB (239607808 bytes)GPU Name: Intel HD Graphics 5000Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 2, FBMemoryCount: 2[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000107 - DP01050900 00040000 0701000002040A00 00040000 07010000ID: 04120004, STOLEN: 32 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel HD Graphics 4600Model Name(s): Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 0412000B, STOLEN: 32 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel HD Graphics 4600Model Name(s): iMac15,1Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 0D260009, STOLEN: 64 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000001ETOTAL STOLEN: 99 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 99 MB, MAX OVERALL: 100 MB (105385984 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): UnknownCamelia: Disabled, Freq: 1953 Hz, FreqMax: 1953 HzMobile: 1, PipeCount: 3, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS00000800 02000000 30000000ID: 0D26000E, STOLEN: 96 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000031ETOTAL STOLEN: 131 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 323 MB, MAX OVERALL: 324 MB (340279296 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): UnknownCamelia: V2, Freq: 1953 Hz, FreqMax: 1953 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS[1] busId: 0x05, pipe: 11, type: 0x00000400, flags: 0x00000107 - DP[2] busId: 0x04, pipe: 11, type: 0x00000400, flags: 0x00000107 - DP[3] busId: 0x06, pipe: 3, type: 0x00000800, flags: 0x00000006 - HDMI00000800 02000000 3000000001050B00 00040000 0701000002040B00 00040000 0701000003060300 00080000 06000000ID: 0D26000F, STOLEN: 96 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x0000001ETOTAL STOLEN: 131 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 131 MB, MAX OVERALL: 132 MB (138940416 bytes)GPU Name: Intel Iris Pro Graphics 5200Model Name(s): UnknownCamelia: V2, Freq: 1953 Hz, FreqMax: 1953 HzMobile: 1, PipeCount: 3, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000030 - LVDS00000800 02000000 30000000 Broadwellx16060000 (desktop, 3 connectors)0x160E0000 (desktop, 3 connectors)0x16160000 (desktop, 3 connectors)0x161E0000 (desktop, 3 connectors)0x16260000 (desktop, 3 connectors)0x162B0000 (desktop, 3 connectors)0x16220000 (desktop, 3 connectors)0x160E0001 (mobile, 3 connectors)0x161E0001 (mobile, 3 connectors)0x16060002 (mobile, 3 connectors)0x16160002 (mobile, 3 connectors)0x16260002 (mobile, 3 connectors)0x16220002 (mobile, 3 connectors)0x162B0002 (mobile, 3 connectors)0x16120003 (mobile, 4 connectors)0x162B0004 (desktop, 3 connectors)0x16260004 (desktop, 3 connectors)0x16220007 (desktop, 3 connectors)0x16260005 (mobile, 3 connectors)0x16260006 (mobile, 3 connectors)0x162B0008 (desktop, 2 connectors)0x16260008 (desktop, 2 connectors)ID: 16060000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000B06TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel Broadwell GT1Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 160E0000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000706TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel Broadwell GT1Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 16160000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000B06TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel HD Graphics 5500Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 161E0000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000716TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel HD Graphics 5300Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 16260000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000B06TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 162B0000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x00000B06TOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel Iris Graphics 6100Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 16220000, STOLEN: 16 MB, FBMEM: 15 MB, VRAM: 1024 MB, Flags: 0x0000110ETOTAL STOLEN: 32 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 64 MB, MAX OVERALL: 65 MB (68694016 bytes)GPU Name: Intel Iris Pro Graphics 6200Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000004, flags: 0x00000004 - DigitalDVI[2] busId: 0x04, pipe: 9, type: 0x00000800, flags: 0x00000082 - HDMI00000800 02000000 3002000001050900 04000000 0400000002040900 00080000 82000000ID: 160E0001, STOLEN: 38 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00000702TOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 136 MB, MAX OVERALL: 137 MB (144191488 bytes)GPU Name: Intel Broadwell GT1Model Name(s): Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00001001 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00003001 - DP00000800 02000000 3002000001050900 00040000 0110000002040A00 00040000 01300000ID: 161E0001, STOLEN: 38 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00000702TOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 136 MB, MAX OVERALL: 137 MB (144191488 bytes)GPU Name: Intel HD Graphics 5300Model Name(s): MacBook8,1Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00001001 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00003001 - DP00000800 02000000 3002000001050900 00040000 0110000002040A00 00040000 01300000ID: 16060002, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00004B02TOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Broadwell GT1Model Name(s): Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050900 00040000 0705000002040A00 00040000 07050000ID: 16160002, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00004B02TOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 5500Model Name(s): Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050900 00040000 0705000002040A00 00040000 07050000ID: 16260002, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00004B0ATOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050900 00040000 0705000002040A00 00040000 07050000ID: 16220002, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00004B0ATOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Pro Graphics 6200Model Name(s): Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050900 00040000 0705000002040A00 00040000 07050000ID: 162B0002, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00004B0ATOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Graphics 6100Model Name(s): MacBookPro12,1Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050900 00040000 0705000002040A00 00040000 07050000ID: 16120003, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00001306TOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131612672 bytes)GPU Name: Intel HD Graphics 5600Model Name(s): Camelia: V1, Freq: 1953 Hz, FreqMax: 1953 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP[3] busId: 0x06, pipe: 3, type: 0x00000800, flags: 0x00000006 - HDMI00000800 02000000 3002000001050B00 00040000 0705000002040B00 00040000 0705000003060300 00080000 06000000ID: 162B0004, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00040B46TOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Graphics 6100Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000211 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 1102000001050900 00040000 0705000002040A00 00040000 07050000ID: 16260004, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00040B46TOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000211 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 1102000001050900 00040000 0705000002040A00 00040000 07050000ID: 16220007, STOLEN: 38 MB, FBMEM: 38 MB, VRAM: 1536 MB, Flags: 0x000BB306TOTAL STOLEN: 77 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 153 MB, MAX OVERALL: 154 MB (162017280 bytes)GPU Name: Intel Iris Pro Graphics 6200Model Name(s): iMac16,2Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x00000011 - DP01050900 00040000 0705000002040A00 00040000 0705000003060800 00040000 11000000ID: 16260005, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00000B0BTOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050B00 00040000 0705000002040B00 00040000 07050000ID: 16260006, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00000B0BTOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): iMac16,1 MacBookAir7,1 MacBookAir7,2Camelia: Disabled, Freq: 2777 Hz, FreqMax: 2777 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000230 - LVDS[1] busId: 0x05, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 11, type: 0x00000400, flags: 0x00000507 - DP00000800 02000000 3002000001050B00 00040000 0705000002040B00 00040000 07050000ID: 162B0008, STOLEN: 34 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x00002B0ETOTAL STOLEN: 69 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109060096 bytes)GPU Name: Intel Iris Graphics 6100Model Name(s): Camelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 2, PortCount: 2, FBMemoryCount: 2[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP01050900 00040000 0705000002040A00 00040000 07050000ID: 16260008, STOLEN: 34 MB, FBMEM: 34 MB, VRAM: 1536 MB, Flags: 0x00002B0ETOTAL STOLEN: 69 MB, TOTAL CURSOR: 1 MB, MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109060096 bytes)GPU Name: Intel HD Graphics 6000Model Name(s): UnknownCamelia: Disabled, Freq: 5273 Hz, FreqMax: 5273 HzMobile: 0, PipeCount: 2, PortCount: 2, FBMemoryCount: 2[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000507 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000507 - DP01050900 00040000 0705000002040A00 00040000 07050000 Skylake1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392400x191E0000 (mobile, 3 connectors)0x19160000 (mobile, 3 connectors)0x19260000 (mobile, 3 connectors)0x19270000 (mobile, 3 connectors)0x191B0000 (mobile, 3 connectors)0x193B0000 (mobile, 3 connectors)0x19120000 (mobile, 3 connectors)0x19020001 (desktop, 0 connectors, no fbmem)0x19170001 (desktop, 0 connectors, no fbmem)0x19120001 (desktop, 0 connectors, no fbmem)0x19320001 (desktop, 0 connectors, no fbmem)0x19160002 (mobile, 3 connectors, no fbmem)0x19260002 (mobile, 3 connectors, no fbmem)0x191E0003 (mobile, 3 connectors, no fbmem)0x19260004 (mobile, 3 connectors, no fbmem)0x19270004 (mobile, 3 connectors, no fbmem)0x193B0005 (mobile, 4 connectors, no fbmem)0x191B0006 (mobile, 1 connectors, no fbmem)0x19260007 (mobile, 3 connectors, no fbmem)ID: 191E0000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000050FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 515Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 19160000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000090FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 520Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 19260000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000090FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Graphics 540Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 19270000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000090FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Graphics 550Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 191B0000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000110FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 530Model Name(s): MacBookPro13,3Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 193B0000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00001187TOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel Iris Pro Graphics 580Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - HDMI[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000002040A00 00080000 8701000003060A00 00040000 87010000ID: 19120000, STOLEN: 34 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000110FTOTAL STOLEN: 56 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 124 MB, MAX OVERALL: 125 MB (131608576 bytes)GPU Name: Intel HD Graphics 530Model Name(s): iMac17,1Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[-1] busId: 0x00, pipe: 0, type: 0x00000001, flags: 0x00000020 - Dummy[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DPFF000000 01000000 2000000001050900 00040000 8701000002040A00 00040000 87010000ID: 19020001, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00040800TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel HD Graphics 510Model Name(s): Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 19170001, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00040800TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel Skylake GT2fModel Name(s): Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 19120001, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00040800TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel HD Graphics 530Model Name(s): Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 19320001, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00040800TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel Iris Pro Graphics 580Model Name(s): Camelia: Disabled, Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 19160002, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00830B02TOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel HD Graphics 520Model Name(s): Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 19260002, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Graphics 540Model Name(s): MacBookPro13,1Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 191E0003, STOLEN: 40 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x002B0702TOTAL STOLEN: 41 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 121 MB, MAX OVERALL: 122 MB (128462848 bytes)GPU Name: Intel HD Graphics 515Model Name(s): MacBook9,1Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000181 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000181 - DP00000800 02000000 9800000001050900 00040000 8101000002040A00 00040000 81010000ID: 19260004, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B0ATOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109588480 bytes)GPU Name: Intel Iris Graphics 540Model Name(s): Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP00000800 02000000 9804000001050900 00040000 C701000002040A00 00040000 C7010000ID: 19270004, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Graphics 550Model Name(s): MacBookPro13,2Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 193B0005, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0023130ATOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 137 MB, MAX OVERALL: 138 MB (145244160 bytes)GPU Name: Intel Iris Pro Graphics 580Model Name(s): MacBookPro13,1Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 4, FBMemoryCount: 4[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP00000800 02000000 9800000001050900 00040000 C701000002040A00 00040000 C701000003060A00 00040000 C7010000ID: 191B0006, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00131302TOTAL STOLEN: 39 MB, TOTAL CURSOR: 512 KB, MAX STOLEN: 39 MB, MAX OVERALL: 39 MB (41422848 bytes)GPU Name: Intel HD Graphics 530Model Name(s): Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 1, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS00000800 02000000 98040000ID: 19260007, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00031302TOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109588480 bytes)GPU Name: Intel Iris Graphics 540Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP00000800 02000000 9800000001050900 00040000 C701000002040A00 00040000 C7010000 Kaby Lake1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931940x591E0000 (mobile, 3 connectors, no fbmem)0x59160000 (mobile, 3 connectors, no fbmem)0x59230000 (desktop, 3 connectors, no fbmem)0x59260000 (desktop, 3 connectors, no fbmem)0x59270000 (desktop, 3 connectors, no fbmem)0x59270009 (mobile, 3 connectors, no fbmem)0x59120000 (desktop, 3 connectors, no fbmem)0x591B0000 (mobile, 3 connectors)0x591E0001 (mobile, 3 connectors, no fbmem)0x59180002 (mobile, 0 connectors, no fbmem)0x59120003 (mobile, 0 connectors, no fbmem)0x59260007 (desktop, 3 connectors)0x59270004 (mobile, 3 connectors, no fbmem)0x59260002 (mobile, 3 connectors, no fbmem)0x591B0006 (mobile, 1 connectors, no fbmem)ID: 591E0000, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000078BTOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109588480 bytes)GPU Name: Intel HD Graphics 615Model Name(s): MacBook10,1Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 59160000, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000B0BTOTAL STOLEN: 35 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 103 MB, MAX OVERALL: 104 MB (109588480 bytes)GPU Name: Intel HD Graphics 620Model Name(s): MacBookPro14,2Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - HDMI00000800 02000000 9800000001050900 00040000 8701000002040A00 00080000 87010000ID: 59230000, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B8BTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel HD Graphics 635Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 59260000, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B8BTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel Iris Plus Graphics 640Model Name(s): MacBookPro14,1 iMac18,1Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 59270000, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B8BTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel Iris Plus Graphics 650Model Name(s): MacBookPro14,2Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 59270009, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00830B0ATOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel Iris Plus Graphics 650Model Name(s): Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP00000800 02000000 9800000001050900 00040000 C701000002040A00 00040000 C7010000ID: 59120000, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000110BTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel HD Graphics 630Model Name(s): iMac18,2 iMac18,3Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP01050900 00040000 8701000002040A00 00040000 8701000003060A00 00040000 87010000ID: 591B0000, STOLEN: 38 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 136 MB, MAX OVERALL: 137 MB (144191488 bytes)GPU Name: Intel HD Graphics 630Model Name(s): MacBookPro14,3Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[2] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - HDMI[3] busId: 0x06, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000002040A00 00080000 8701000003060A00 00040000 87010000ID: 591E0001, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x002B0702TOTAL STOLEN: 39 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 115 MB, MAX OVERALL: 116 MB (122171392 bytes)GPU Name: Intel HD Graphics 615Model Name(s): MacBook10,1Camelia: V2, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000181 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000181 - DP00000800 02000000 9800000001050900 00040000 8101000002040A00 00040000 81010000ID: 59180002, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: UnknownModel Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 59120003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel HD Graphics 630Model Name(s): iMac18,2 iMac18,3Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 59260007, STOLEN: 57 MB, FBMEM: 21 MB, VRAM: 1536 MB, Flags: 0x00830B0ETOTAL STOLEN: 79 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Iris Plus Graphics 640Model Name(s): Camelia: Disabled, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9800000001050900 00040000 C703000002040A00 00040000 C7030000ID: 59270004, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Plus Graphics 650Model Name(s): MacBookPro14,2Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 59260002, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Plus Graphics 640Model Name(s): MacBookPro14,1 iMac18,1Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 591B0006, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00031302TOTAL STOLEN: 39 MB, TOTAL CURSOR: 512 KB, MAX STOLEN: 39 MB, MAX OVERALL: 39 MB (41422848 bytes)GPU Name: Intel HD Graphics 630Model Name(s): Camelia: V3, Freq: 1388 Hz, FreqMax: 1388 HzMobile: 1, PipeCount: 1, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS00000800 02000000 98040000 Coffee Lake1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521530x3EA50009 (移动版，3 端口，无 FBMEM，58 MB)0x3E920009 (移动版，3 端口，无 FBMEM，58 MB)0x3E9B0009 (移动版，3 端口，无 FBMEM，58 MB)0x3EA50000 (移动版，3 端口，无 FBMEM，58 MB)0x3E920000 (移动版，3 端口，无 FBMEM，58 MB)0x3E000000 (移动版，3 端口，无 FBMEM，58 MB)0x3E9B0000 (移动版，3 端口，无 FBMEM，58 MB)0x3EA50004 (移动版，3 端口，无 FBMEM，58 MB)0x3E9B0006 (移动版，1 端口，无 FBMEM，39 MB)0x3E9B0007 (桌面版，3 端口，无 FBMEM，58 MB)0x3E920003 (桌面版，无端口，无 FBMEM，1 MB)0x3E910003 (桌面版，无端口，无 FBMEM，1 MB)0x3E980003 (桌面版，无端口，无 FBMEM，1 MB)ID: 3EA50009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00830B0ATOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaV3 (3), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - ConnectorDP00000800 02000000 9800000001050900 00040000 C701000002040A00 00040000 C7010000ID: 3E920009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0083130ATOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaV3 (3), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[255] busId: 0x00, pipe: 0, type: 0x00000001, flags: 0x00000020 - ConnectorDummy[255] busId: 0x00, pipe: 0, type: 0x00000001, flags: 0x00000020 - ConnectorDummy00000800 02000000 98000000FF000000 01000000 20000000FF000000 01000000 20000000ID: 3E9B0009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0083130ATOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaV3 (3), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3EA50000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B0BTOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E920000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E000000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E9B0000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFL CRBCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - ConnectorDP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3EA50004, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel Iris Plus Graphics 655Camelia: CameliaV3 (3), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - ConnectorLVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - ConnectorDP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 3E9B0006, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00131302TOTAL STOLEN: 39 MB, TOTAL CURSOR: 512 KB, OVERALL: 39 MB (41422848 bytes)Model name: Intel UHD Graphics 630Camelia: CameliaV3 (3), Freq: 0 Hz, FreqMax: 0 HzMobile: 1, PipeCount: 1, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - ConnectorLVDS00000800 02000000 98040000ID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302TOTAL STOLEN: 172 MB, TOTAL CURSOR: 1 MB (1572864 bytes), OVERALL: 173 MB (181940224 bytes)Model name: Intel HD Graphics CFLCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - ConnectorDP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - ConnectorDP[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - ConnectorDP01050900 00040000 C703000002040A00 00040000 C703000003060800 00040000 C7030000ID: 0x3E920003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000 TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MB Model name: Intel HD Graphics CFL Camelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 Hz Mobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0 ID: 0x3E910003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000 TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MB Model name: Intel HD Graphics CFL Camelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 Hz Mobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 0x3E980003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBModel name: Intel HD Graphics CFLCamelia: CameliaDisabled (0), Freq: 0 Hz, FreqMax: 0 HzMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0推荐的 FB 设置：0x3EA50000（桌面版，缺省值）或 0x3E9B0007（桌面版，推荐）；0x3EA50009（移动版，缺省值）。注意：使用第九代 Coffee Lake R 处理器时，需设定（仿冒）IGPU 的 device-id 为 923E0000。（如下所示）从 macOS Mojave 10.14.4 起，无需再设定此参数！ Cannon Lake1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911920x5A510009 (mobile, 3 connectors, no fbmem)0x5A400009 (mobile, 3 connectors, no fbmem)0x5A410009 (mobile, 3 connectors, no fbmem)0x5A590009 (mobile, 3 connectors, no fbmem)0x5A490009 (mobile, 3 connectors, no fbmem)0x5A500009 (mobile, 3 connectors, no fbmem)0x5A510000 (mobile, 3 connectors, no fbmem)0x5A400000 (mobile, 3 connectors, no fbmem)0x5A410000 (mobile, 3 connectors, no fbmem)0x5A590000 (mobile, 3 connectors, no fbmem)0x5A490000 (mobile, 3 connectors, no fbmem)0x5A500000 (mobile, 3 connectors, no fbmem)0x5A520000 (mobile, 3 connectors, no fbmem)0x0A010000 (mobile, 1 connectors, no fbmem)ID: 5A510009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT2Model Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A400009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A410009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT1Model Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A590009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT1.5Model Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A490009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT0.5Model Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A500009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT2Model Name(s): UnknownCamelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x000009C7 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x000009C7 - DP00000800 02000000 9800000001010900 00040000 C709000002020A00 00040000 C7090000ID: 5A510000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x00000987 - DP00000800 02000000 9800000001010900 00040000 8709000002020A00 00040000 87090000ID: 5A400000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x00000987 - DP00000800 02000000 9800000001010900 00040000 8709000002020A00 00040000 87090000ID: 5A410000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT1Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x00000987 - DP00000800 02000000 9800000001010900 00040000 8709000002020A00 00040000 87090000ID: 5A590000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT1.5Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000800, flags: 0x00000986 - HDMI00000800 02000000 9800000001010900 00040000 8709000002020A00 00080000 86090000ID: 5A490000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT0.5Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x00000987 - DP00000800 02000000 9800000001010900 00040000 8709000002020A00 00040000 87090000ID: 5A500000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00A0070BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[2] busId: 0x02, pipe: 10, type: 0x00000400, flags: 0x00000987 - DP00000800 02000000 9800000001010900 00040000 8709000002020A00 00040000 87090000ID: 5A520000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000803TOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Cannonlake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x01, pipe: 9, type: 0x00000400, flags: 0x00000987 - DP[3] busId: 0x04, pipe: 10, type: 0x00000800, flags: 0x00000187 - HDMI00000800 02000000 9800000001010900 00040000 8709000003040A00 00080000 87010000ID: 0A010000, STOLEN: 34 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000702TOTAL STOLEN: 35 MB, TOTAL CURSOR: 512 KB, MAX STOLEN: 35 MB, MAX OVERALL: 35 MB (37228544 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 1, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS00000800 02000000 98000000 Ice Lake (LP)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111120xFF050000 (mobile, 3 connectors, no fbmem)0x8A700000 (mobile, 3 connectors, no fbmem)0x8A510000 (mobile, 3 connectors, no fbmem)0x8A5C0000 (mobile, 3 connectors, no fbmem)0x8A5D0000 (mobile, 3 connectors, no fbmem)0x8A520000 (mobile, 3 connectors, no fbmem)0x8A5A0000 (mobile, 3 connectors, no fbmem)0x8A5B0000 (mobile, 3 connectors, no fbmem)ID: FF050000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000602TOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A700000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A510000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A5C0000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT1.5Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A5D0000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT1Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A520000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A5A0000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT1.5Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A5B0000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT1Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000 Ice Lake(HP)1234567891011121314151617181920212223242526272829303132333435363738394041420xFF050000 (mobile, 3 connectors, no fbmem)0x8A510000 (mobile, 3 connectors, no fbmem)0x8A520000 (mobile, 3 connectors, no fbmem)ID: FF050000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00000602TOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: UnknownModel Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A510000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000ID: 8A520000, STOLEN: 64 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0001000BTOTAL STOLEN: 65 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 193 MB, MAX OVERALL: 194 MB (203960320 bytes)GPU Name: Intel Ice Lake GT2Model Name(s): UnknownCamelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 0, type: 0x00000002, flags: 0x00000018 - LVDS[1] busId: 0x02, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP[2] busId: 0x09, pipe: 1, type: 0x00000400, flags: 0x00000201 - DP00000000 00000000 00000000 00000000 02000000 1800000001000000 02000000 01000000 00000000 00040000 0102000002000000 09000000 01000000 01000000 00040000 01020000 macOS 10.14 Beta 4 (18A336e) Coffee Lake1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511520x3EA50009 (mobile, 3 connectors, no fbmem)0x3E920009 (mobile, 3 connectors, no fbmem)0x3E9B0009 (mobile, 3 connectors, no fbmem)0x3EA50000 (mobile, 3 connectors, no fbmem)0x3E920000 (mobile, 3 connectors, no fbmem)0x3E000000 (mobile, 3 connectors, no fbmem)0x3E9B0000 (mobile, 3 connectors, no fbmem)0x3EA50004 (mobile, 3 connectors, no fbmem)0x3E9B0006 (mobile, 1 connectors, no fbmem)0x3E9B0007 (desktop, 3 connectors, no fbmem)0x3E920003 (desktop, 0 connectors, no fbmem)0x3E910003 (desktop, 0 connectors, no fbmem)ID: 3EA50009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00830B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Plus Graphics 655Model Name(s): Camelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000001C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000001C7 - DP00000800 02000000 9800000001050900 00040000 C701000002040A00 00040000 C7010000ID: 3E920009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0083130ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): Camelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[-1] busId: 0x00, pipe: 0, type: 0x00000001, flags: 0x00000020 - Dummy[-1] busId: 0x00, pipe: 0, type: 0x00000001, flags: 0x00000020 - Dummy00000800 02000000 98000000FF000000 01000000 20000000FF000000 01000000 20000000ID: 3E9B0009, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0083130ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): Camelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3EA50000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00030B0BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Plus Graphics 655Model Name(s): Camelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E920000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): Camelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E000000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: UnknownModel Name(s): Camelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3E9B0000, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x0000130BTOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): MacBookPro15,1Camelia: DisabledMobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000098 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x00000187 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x00000187 - DP00000800 02000000 9800000001050900 00040000 8701000002040A00 00040000 87010000ID: 3EA50004, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00E30B0ATOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel Iris Plus Graphics 655Model Name(s): MacBookPro15,2Camelia: V3Mobile: 1, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP00000800 02000000 9804000001050900 00040000 C703000002040A00 00040000 C7030000ID: 3E9B0006, STOLEN: 38 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00131302TOTAL STOLEN: 39 MB, TOTAL CURSOR: 512 KB, MAX STOLEN: 39 MB, MAX OVERALL: 39 MB (41422848 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): Camelia: V3Mobile: 1, PipeCount: 1, PortCount: 1, FBMemoryCount: 1[0] busId: 0x00, pipe: 8, type: 0x00000002, flags: 0x00000498 - LVDS00000800 02000000 98040000ID: 3E9B0007, STOLEN: 57 MB, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00801302TOTAL STOLEN: 58 MB, TOTAL CURSOR: 1 MB (1572864 bytes), MAX STOLEN: 172 MB, MAX OVERALL: 173 MB (181940224 bytes)GPU Name: Intel UHD Graphics 630Model Name(s): Camelia: DisabledMobile: 0, PipeCount: 3, PortCount: 3, FBMemoryCount: 3[1] busId: 0x05, pipe: 9, type: 0x00000400, flags: 0x000003C7 - DP[2] busId: 0x04, pipe: 10, type: 0x00000400, flags: 0x000003C7 - DP[3] busId: 0x06, pipe: 8, type: 0x00000400, flags: 0x000003C7 - DP01050900 00040000 C703000002040A00 00040000 C703000003060800 00040000 C7030000ID: 3E920003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel UHD Graphics 630Model Name(s): Camelia: DisabledMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0ID: 3E910003, STOLEN: 0 bytes, FBMEM: 0 bytes, VRAM: 1536 MB, Flags: 0x00001000TOTAL STOLEN: 1 MB, TOTAL CURSOR: 0 bytes, MAX STOLEN: 1 MB, MAX OVERALL: 1 MBGPU Name: Intel UHD Graphics 630Model Name(s): Camelia: DisabledMobile: 0, PipeCount: 0, PortCount: 0, FBMemoryCount: 0 显示器接口数据格式 原文链接：https://www.tonymacx86.com/threads/guide-intel-framebuffer-patching-for-mojave.256490/#post-1780416 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>framebuffer</tag>
        <tag>Mojave</tag>
        <tag>10.14</tag>
        <tag>10.13.6</tag>
        <tag>17G2112</tag>
        <tag>patch</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.6(17G2112)特别版 with Clover 4606原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.6-17G2112-Release-Special-with-Clover-4606-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.6(17G2112)特别版 with Clover 4606原版镜像随着苹果发布了最新的MacBookPro 15,1/15,2这两款产品，macOS也更新到了10.13.6 17G2112版本，它原生支持第八代核显;众多的8750H CPU的朋友们可以彻底告别黑屏的痛苦本镜像采用官方原版app制作，集成Clover 4606，支持UEFI启动安装;Drivers64UEFI/目录下只保留的AptioMemoryFix.efi以解决卡+++问题；添加ApfsDriverLoader-64.efi，自动加载apfs.efi驱动，同时去除日志显示；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;更新WhateverGreen到V1.2.0，原生支持UHD620/UHD630等八代核显，不需要注入platform-id， 同时它也支持NVIDIA和AMD的显卡，以及整合了SHIKI的驱动，现在是三合一了；特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理**[最新的macOS 10.13.4及以后的版本可以不需要屏蔽独显而进行安装使用]**；Clover默认配置文件config.plist原生支持七代HD620/HD630、八代UHD620/UHD630，platform-id 使用自动侦测；Nvidia显卡驱动方法：打开终端，输入命令：1bash &lt;(curl -s https://raw.githubusercontent.com/Benjamin-Dobell/nvidia-update/master/nvidia-update.sh)添加了config_ASUS_B360_PRIME_UHD630.plist，B360主板的可以试用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4200/4400/4600；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持BCM94352z无线网卡，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；已更新Lilu(v1.2.5)、AppleALC(v1.3.0)、WhateverGreen(v1.2.0)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载MD5 (macOS High Sierra 10.13.6(17G2112) Installer with Clover 4606.dmg) = 23c01542c04d67109e3ec76c43973e56 其它机型EFI下载：https://github.com/daliansky/Hackintosh 17G2208更新 苹果承认新MacBook Pro过热降频，于是发布一个新补丁：17G2208更新前段时间，苹果发布了2018款 MacBook Pro ，其中，搭载英特尔Core i9处理器的顶配版MacBook Pro被众多网友爆出存在过热降频的问题，在运行大型软件时，并不能发挥其全部的性能。过热降频是哪儿出了问题？针对新MBP出现的问题，苹果现在已经确定为系统散热的管理软件中的BUG导致，目前，苹果已经推出 macOS High Sierra 10.13.6 版本的补充更新补丁，解决现在高配版本的MacBook Pro 上出现的过热降频的问题。在今天早些时候，苹果也针对2018款 MacBook Pro出现的发热降频问题给出了答复，在声明中，苹果表示： “在大量工作负载下进行了广泛的性能测试之后，我们发现在固件中有个缺失的数字密钥，它会影响热管理系统，并可能在新MacBook Pro的高热负载下降低时钟速度。今天的macOS High Sierra10.13.6补充更新中包含了漏洞修复程序，建议用户进行更新。我们向任何在新系统中体验不到最佳性能的客户道歉。”**哪些机器可以进行升级？ **在此次更新的macOS High Sierra 10.13.6版本中，适用于2018年新款所有13英寸和15英寸配备 Touch Bar 触控条的机型。包括所有搭载Intel 第八代“coffee Lake”架构的Core i5/i7/i9处理器的机型，更新版本号为 17G2208。**在哪儿更新？ **在上述所涉及到的2018款MacBook Pro机型中，用户现在已经可以通过Mac APP Store 应用商店下载安装更新。建议Intel及AMD的用户直接更新，Nvidia由于没有新的驱动程序，不建议更新。下载链接更新之后性能有多大提升？苹果宣称，修复这个BUG之后，2018款的MacBook Pro 会达到之前宣传的性能提升的效果，15英寸的MacBook Pro 性能会整体提升 **70%。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.6</tag>
        <tag>17G2112</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.6(17G65)正式版 with Clover 4596原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.6-17G65-Release-Version-with-Clover-4596-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.6(17G65)正式版 with Clover 4596原版镜像重要提示：由于CLOVER新版的缘故，原来的HD3000/HD4000的配置文件不支持新版，会造成进CLOVER后卡住的情况，请降低CLOVER版本，或者直接删除掉所有的HD3000/HD4000开头的配置文件；本镜像采用官方原版app制作，集成Clover 4596，支持UEFI启动安装;Drivers64UEFI/目录下只保留的AptioMemoryFix.efi以解决卡+++问题；添加ApfsDriverLoader-64.efi，自动加载apfs.efi驱动，同时去除日志显示；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;更新IntelGraphicsFixup 到V1.2.7，原生支持UHD620/UHD630等八代核显，不需要注入platform-id特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理**[最新的macOS 10.13.4及以后的版本可以不需要屏蔽独显而进行安装使用]**；Clover默认配置文件config.plist原生支持七代HD620/HD630、八代UHD620/UHD630，platform-id 使用自动侦测；添加了config_ASUS_B360_PRIME_UHD630.plist，B360主板的可以试用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持BCM94352z无线网卡，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；已更新Lilu(1.2.4)、AppleALC(1.2.8)、IntelGraphicsFixup(1.2.7)、Shiki(2.2.7)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：请点击下载MD5 (macOS High Sierra 10.13.6(17G65) Installer with Clover 4596.dmg) = 04ef77a1c6df1ccc4930802cd9aceee0 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.6</tag>
        <tag>17G65</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.5(17F77)正式版 with Clover 4512原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.5-17F77-Release-Version-with-Clover-4512-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.5(17F77)正式版 with Clover 4512原版镜像本镜像采用官方原版app制作，集成Clover 4512，支持UEFI启动安装;Drivers64UEFI/目录下只保留的AptioMemoryFix.efi以解决卡+++问题；Clover集成了本人修改的全新主题，不喜欢的可以于安装系统后自行替换；所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;更新apfs.efi到最新的10.13.6Beta版本；更新IntelGraphicsFixup 到V1.2.7，原生支持UHD620/UHD630等八代核显，不需要注入platform-id特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理**[最新的macOS 10.13.4及以后的版本可以不需要屏蔽独显而进行安装使用]**；Clover默认配置文件config.plist原生支持七代HD620/HD630、八代UHD620/UHD630，platform-id 使用自动侦测；添加了config_ASUS_B360_PRIME_UHD630.plist，B360主板的可以试用；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持BCM94352z无线网卡，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；已更新Lilu(1.2.4)、AppleALC(1.2.3)、IntelGraphicsFixup(1.2.7)、Shiki(2.2.7)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为基本数据分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云：下载链接MD5 (macOS High Sierra 10.13.5(17F77) Installer with Clover 4512.dmg) = 76a86aba9a431b92f89d37745c36ba2c 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.5</tag>
        <tag>17F77</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Webmin的Mysql模块中警告缺少DBI和DBD::mysql的处理方法]]></title>
    <url>%2FWebmin-Mysql-module-warns-of-the-lack-of-DBI-and-DBD-mysql-processing.html</url>
    <content type="text"><![CDATA[好久没使用Webmin进行服务器的控制了，今天登录Webmin想查询下mysql的数据，打开mysql模板的时候，系统显示警告：您的系统未安装Perl模块DBI和DBD::mysql，Webmin将无法可靠地访问您的Mysql数据库。点击此处立刻安装它们的提示信息，通过搜索查询到的解决方案是安装perl-DBD-Mysql，使用命令：pkg install perl-DBD-Mysql，它顺利地执行完；但是返回Webmin的Mysql模块中，系统提示Mysql未安装，当时惊出一身冷汗，通过终端回拉输出信息，发现把mariadb102-server给删除了，转为安装了mysql56-server。这可不是我想要的结果，于是重新安装了mariadb102-server。 使用cpan的命令行安装缺失的perl module：打开终端，输入命令：1cpan出现cpan shell的命令行，在提示符后输入以下命令：123cpan[1]&gt; install DBIcpan[2]&gt; install DBD::mysqlcpan[3]&gt; q缺失的模块安装后，再返回Mysql模块就不会再显示这个警告信息了。]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>运维</tag>
        <tag>FreeBSD</tag>
        <tag>Mysql</tag>
        <tag>Webmin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[转载][原创：草原企鹅]Clover Configurator中文汉化版]]></title>
    <url>%2FClover-Configurator-Chinese-Version.html</url>
    <content type="text"><![CDATA[原文：Clover Configurator是配置CLOVER配置文件首选工具，很多新手对满屏的英文比较蒙圈，所以汉化一下本工具，希望对新手有所帮助！首次汉化：道宏工作室本工具第一次翻译有得地方汉化不准确，经过一些大神的解释，重新修改部分字词！感谢：@草原企鹅 ACPI设置 Boot设置 Cpu设置 Devices设置 GUI设置 Graphics设置 Kernel and Kext Patches设置 Rt Variables设置 SMBIOS设置 System Parameters设置 Boot.log显示 Themes Editor主题编辑 NVRAM参数设置 下载链接：https://github.com/daliansky/dell7000/blob/master/Tools/CloverConfigurator_ChineseVersion.zip 鸣谢/致敬：草原企鹅@ThinkPad黑苹果交流群QQ群：128630866 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>Clover</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】CLOVER v2.4 r4438集成小米笔记本PRO EFI安装说明]]></title>
    <url>%2FCLOVER-v2-4-r4438-Integrated-Millet-Notebook-PRO-EFI-Installation-Instructions.html</url>
    <content type="text"><![CDATA[运行Clover_v2.4k_r4438.pkg安装程序下载链接：Clover_v2.4k_r4438.pkg本安装程序会覆盖你的EFI，所以请事先备份EFI，再执行改名或者删除的操作，安装程序会安装全新的EFI到你的ESP分区（其实Clover会自动在你的macOS系统根目录下创建EFI-Backups并且自动备份）点击继续请先阅读更新内容，然后点击继续如果是更新安装的情况下是不需要更改安装位置的，由于我是测试安装，所以点击更改安装位置本例中，我选择的安装位置是EFI_TEST，点击继续勾选仅安装UEFI开机版本，勾选安装Clover到EFI系统区，勾选附带的三套开机主题，点击Drivers64UEFI勾选HFSPlus apfs AptioMemoryFix勾选安装全部RC scripts到全部可开机的OSX磁区，点击安装安装开始，系统会要求输入用户密码，请输入密码，之后点击安装软件程序会自动将包含小米笔记本PRO的EFI安装到ESP分区安装完成，请点击关闭 将config_4-13.plist重命名为config.plist打开终端，输入命令：1diskutil mount ESP # 挂载ESP分区，假如你的ESP分区名称为：ESP如果ESP分区没有命名的话，可以使用以下命令：1diskutil list命令输出信息：12345/dev/disk4 (disk image): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme +6.0 GB disk4 1: EFI EFI 209.7 MB disk4s1 2: Apple_HFS EFI_TEST 5.7 GB disk4s2系统显示disk4s1为EFI分区，使用重命名命令：12diskutil rename disk4s1 ESP # 将disk4s1重命名为ESPdiskutil mount ESP # 挂载ESP分区在本例子中，我使用的是disk image，也就是新建了个包含EFI分区的镜像做演示，你的设备名很有可能是disk0s1当然你也可以直接使用应用程序CLOVER CONFIGURATOR至于如何重命名这个就不需要我多说了吧。 EFI下载/更新https://github.com/daliansky/XiaoMi-Pro 其它机型EFI下载：https://github.com/daliansky/Hackintosh 教程结束 特别鸣谢:@Steve @风之痕 @烎⁵⁷ 提供的EFI测试及部分素材 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:247451054 小米PRO黑苹果高级群137188006 小米PRO黑苹果689011732 小米笔记本Pro黑苹果]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>CLOVER</tag>
        <tag>小米PRO</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[翻译][指南]英特尔IGPU HDMI/DP音频(Sandy/Ivy/Haswell/Broadwell/Skylake/Kabylake)]]></title>
    <url>%2Ftranslate-guide-intel-igpu-hdmi-dp-audio-sandy-ivy-haswell-broadwell-skylake-kabylake.html</url>
    <content type="text"><![CDATA[翻译[指南]英特尔IGPU HDMI/DP音频(Sandy/Ivy/Haswell/Broadwell/Skylake/Kabylake)早上起床，习惯性打开手机浏览，随着macOS发布了最新的10.13.4，最近几天远景上面关于Intel核显的显卡驱动以及HDMI的声音输出的求助帖很多，于是就跑去[RehabMan](https://www.tonymacx86.com/members/rehabman.429483/)的大本营，就看到了这篇文章。之前也经常使用他发布的一些patch，包括很多笔记本机型专用的config.plist都来自这位大咖。现将这篇让INTEL的HDMI/DP音频正确输出的帖子转译过来，让更多的人都能看到。本人英语炒鸡辣鸡，使用的是google的机翻，其中难免会存在错误，请各位群友指正。 概述本指南将介绍如何为连接到英特尔集成GPU的HDMI端口的笔记本电脑实现HDMI音频。其中一些内容也适用于配备DP连接器的笔记本电脑。如果您的笔记本电脑有外部DP端口，您也可以阅读本指南。带有外部DP端口的笔记本电脑需要此处介绍的一部分补丁。为了实现HDMI/DP，必须满足以下要求：使用AppleHDA的原生音频（有关更多信息，请阅读FAQ …实现板载音频不在本指南的范围内）适当的帧缓冲（kext）补丁更改连接器类型以匹配物理连接器。这通过修补与正在使用的ig-platform-id关联的数据来完成。Haswell/Broadwell：将B0D3重命名为HDAU（设备位于0x00030000）在HDAU，IGPU，HDEF对象上注入属性&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;。Haswell/Broadwell：在HDAU上注入layout-id以匹配HDEF上的布局IDHaswell：安装FakePCIID.kext和FakePCIID_Intel_HDMI_Audio.kext注意：通常，对于PC笔记本电脑，英特尔图形设备的ACPI标识符为GFX0产品使用VID）。由于此标识符通常更改为IGPU以启用IGPU电源管理，因此本指南将其称为IGPU。请记住，如果您尚未实施IGPU PM。注意：如果您想知道Skylake（和Kaby Lake）与HD3000/HD4000类似，因为HDMI/DP编解码器在HDEF（通常是PC DSDT中的HDAS，更名为OS X的HDEF）上，而不是单独的设备HDAU 。关于Clover和Clover笔记本电脑指南的注意事项如果您按照此处的指南进行操作：https : //www.tonymacx86.com/threads/guide-booting-the-os-x-installer-on-laptops-with-clover.148093/你的config.plist将已经包含所需的重命名。您可以将config.plist/Devices中的#AddProperties重命名为AddProperties，它将启用所需的“hda-gfx”和其他音频注入。看看它… 帧缓冲区修补与ig-platform-id（或具有Sandy Bridge的snb-platform-id）关联的数据对于每个连接器具有代表连接器类型（以及其他连接器相关数据）的位。由于大多数Apple产品使用DP，因此大多数连接器默认为DP。为了使HDMI音频正常工作，您必须修补kext，使连接器数据与物理连接器匹配。如果您的连接器是DP，则无需执行任何操作，但如果您的端口是HDMI，则可能需要修补连接器，使其成为HDMI连接器而不是DP连接器。DP连接器通过连接器类型在ioreg中标识&lt;00 04 00 00&gt;HDMI连接器通过连接器类型在ioreg中标识&lt;00 08 00 00&gt;在ioreg中标识。在我的向导中链接的plist中，您将找到各种连接器ig-platform-id数据。http://www.tonymacx86.com/el-capita…de-boot-os-x-installer-laptops-clover.html默认情况下，每个补丁都是禁用的。您可以阅读关于禁用的修补程序以及如何在指南的第2篇后启用它们。您需要使用的补丁取决于HDMI连接器插入哪个端口。每个端口在IGPU下都有自己的AppleIntelFramebuffer节点。例如，该图像显示了我的Lenovo u430上的IGPU下的每个帧缓冲区节点：如果有HDMI设备插入其中一个帧缓冲区，您将在相应的帧缓冲区下看到AppleDisplay，就像您看到与LVDS相关的帧缓冲区下的AppleBacklightDisplay一样端口（笔记本电脑内部显示）。在我的联想u430的情况下，HDMI端口与AppleIntelFramebuffer @ 2相关联。每个帧缓冲区（@ 0，@ 1，@ 2，@ 3）对应于驻留在帧缓冲区kext二进制文件中的ig-platform-id数据内的一组连接器数据。每个连接器都有一个描述端口号的前缀，并且每个连接器都位于kext中（例如：按照该顺序为0105,0204,0306）。提供的plists中的每个修补程序都用前缀进行注释，并按它们在平台数据中出现的顺序进行评论。因此，对于使用ig-platform-id 0xa260006的Lenovo u430，外部端口（@ 1和@ 2）标有0105和0204。由于u430上的HDMI端口连接到AppleIntelFramebuffer @ 2这是0204连接器，我们可以将其缩小到只适用于0xa260006的0204的修补程序。plist中只有两个这样的补丁。对于每个连接器，都可以选择使用非（12）修补程序或（12）修补程序之一修补。不同之处在于“（12）”变体除了修补连接器类型外，还修补了一个据信定义某种延迟的字节。一些笔记本电脑需要将此延迟从默认（09）延长到（12）。在确定你需要什么的时候，这是试错的问题。假设您已满足所有其他HDMI音频要求，并且非12修补程序导致KP(内核崩溃) /重新启动，则可能需要12个变体。对于HDMI监视器热插拔时KP(内核崩溃) /重新启动的情况，很难确定您的外部端口分配到了哪个端口（因为在监视器插入时无法查看ioreg）。在这种情况下，您应该应用适用于您正在使用的ig-platform-id的所有（12个变体）修补程序。这应该让你通过KP(内核崩溃)/重新启动，然后你可以看看ioreg，确定哪个端口实际使用，并且消除或禁用不需要的补丁。在我的u430的情况下，我没有KP(内核崩溃) /重新启动问题，所以我可以通过插入显示器并查看ioreg来确定HDMI使用哪个端口。正如我之前提到的那样，它是0204连接器（framebuffer @ 2）。因此，Lenovo u430使用标有“HDMI-audio，端口0204，0x0a260005 0x0a260006”的补丁。它出现在我的config.plist中（在Xcode中）： 在修补HDMI音频之前，AppleIntelFramebuffer @ 2的连接器类型为&lt;00 04 00 00&gt;。修补后，它将变为&lt;00 08 00 00&gt;。 修补之前： 修补后： 如果您的物理连接器是DP，则无需为连接器类型打补丁。但是，您可能需要为09和12延迟打补丁。查看每个修补程序中替换的十六进制数据，应该很明显如何更改修补程序，使其保持&lt;00 04 00 00&gt;连接器类型而不是将其更改为&lt;00 08 00 00&gt;。将B0D3重命名为HDAU:Sandy Bridge（HD3000）和Ivy Bridge（HD4000）使用具有多个编解码器的单个音频设备（HDEF）。板载音频和HDMI音频均位于同一HDEF设备上。因此，没有第二个设备，所以不需要将其重命名为HDAU。Haswell和Broadwell为HDMI音频编解码器使用单独的设备。通常它被命名为B0D3（它可以在DSDT或OEM SSDT中定义）。您将在ioreg中看到PCI0下的B0D3节点。对于OS X，它必须重命名为HDAU。设备的地址始终为0x00030000。您可以使用笔记本修补程序存储库中的“将B0D3重命名为HDAU”来重命名设备。该补丁应该适用于包含B0D3参考的任何DSDT或SSDT。同一个补丁还定义了一个在HDAU上注入“hda-gfx”=“onboard-1”的_DSM。它还包含一个补丁，为IGPU注入“hda-gfx”。请参阅ACPI修补指南更多有关ACPI修补程序的信息：http : //www.tonymacx86.com/el-capitan-laptop-support/152573-guide-patching-laptop-dsdt-ssdts.html注意：Skylake似乎使用单个音频设备，通常名为HDAS。它必须被重新命名为HDEF为OS X 注入性质HDA-GFX（和布局-ID）对于桑迪桥和常春藤桥（HD3000/HD4000），&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;必须在注入iGPU的和HDEF。对于Haswell和Broadwell，必须在IGPU和HDAU上注入&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;。没有必要在HDEF上注入“hda-gfx”，尽管它似乎不会引起问题。Audio Layout音色（Audio Layout 3，Audio Layout 12或为您的布局ID自定义的音色）会在HDEF中注入“hda-gfx”。通常情况下，HDEF在DSDT中定义。注意：HDAU/IGPU“hda-gfx”来自“将B0D3重命名为HDAU”，或者对于IGPU其他IGPU相关的修补程序。搜索“hda-gfx”的回购补丁，你会看到几个。Rename B0D3 to HDAU&quot;补丁也为IGPU注入“hda-gfx”。通常，HDAU和IGPU对象在相同的SSDT中定义，但有可能是一个不同的文件（如DSDT）。仅在应用修补程序时查看它是否适用于给定文件没有任何坏处。通常情况下，以下工作将完成所有必需的重命名和注入操作：将“Audio Layout *”（布局ID取决于您修补的AppleHDA）应用于DSDT将Rename B0D3 to HDAU应用于DSDT和所有OEM SSDT。另请注意，“将B0D3重命名为HDAU”补丁会在HDAU上注入布局ID。布局ID必须与HDEF上的布局ID匹配。在应用之前，根据需要修改修补程序中的布局ID。注意：Haswell和Broadwell不需要HDEF上的hda-gfx。 安装FakePCIID.kext FakePCIID_Intel_HDMI_AudioAppleHDAController kext实现了某些HDAU设备的白名单。一些PC使用不直接支持的设备。但FakePCIID_Intel_HDMI_Audio可以欺骗PCI ID以满足AppleHDAController安装FakePCIID.kext和FakePCIID_Intel_HDMI_Audio.kext：https：//github.com/RehabMan/OS-X-Fake-PCI-ID阅读README以查找预构建的kext二进制文件。即使在您拥有支持的HDAU设备的情况下，安装FakePCIID_Intel_HDMI_Audio也不会造成任何伤害。kext不会附加到本机支持的设备。 检查你的工作你可以判断一切是否完全在IORegistryExplorer中实现。初始IORegistryExplorer设置：从这里下载（附加到帖子）：http : //www.tonymacx86.com/audio/58368-guide-how-make-copy-ioreg.html首选项 - &gt;查找，勾选“属性键“检查&quot;hda-gfx&quot; = &lt;&quot;onboard-1&quot;&gt;在搜索框中输入”你应该在HDEF/IGPU（Sandy/Ivy/Skylake/Kabylake）和HDAU/IGPU（Haswell/Broadwell）上找到它。查看属性值，您应该看到“onboard-1”检查HDAU（仅限Haswell/Broadwell）：您应该在PCI0检查layout-id 下找到HDAU（不是B0D3）：在搜索框中键入“ layout-id“您应该在HDAU（如果适用）和HDEF上找到它如果您检查每个HDAU和HDEF中的值，HDAU应具有相同的值检查帧缓冲区：检查与您的HDMI对应的IGPU下的帧缓冲区/ DP连接器它应该与物理连接器（DP：&lt;00 04 00 00&gt;，HDMI：&lt;00 08 00 00&gt;）匹配检查HDAU下的FakePCIID加载：如果您有不受支持的HDAU，您会注意到FakePCIID已连接到HDAU设备。如果只有其中一项要求未得到满足，则不起作用。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>AppleALC</tag>
        <tag>AppleHDA</tag>
        <tag>HDMI</tag>
        <tag>Audio</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.4 17E199 正式版 with Clover 4418原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.4-17E199-Release-Version-and-Clover-4418-Original-Image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.4(17E199)正式版 with Clover 4418原版镜像10.13.4镜像的制作比较坑人，之前所有的制作方法都无法正常安装，详见解决10.13.4制作镜像出现的安装盘找不到和显卡代码刷屏问题本镜像采用官方原版app制作，集成Clover 4418，支持UEFI启动安装;Drivers64UEFI/目录下只保留的AptioMemoryFix.efi以解决卡+++问题；所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;更新apfs.efi到10.13.4正式版；更新IntelGraphicsFixup 到V1.2.7，原生支持UHD620/UHD630等八代核显，不需要注入platform-id特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理**[最新的macOS 10.13.4可以不需要屏蔽独显而进行安装使用]**；Clover默认配置文件config.plist原生支持七代HD620/HD630、八代UHD620/UHD630，platform-id 使用自动侦测；config_DalianSky.plist为部分机型增加Drop Tables,如果默认的config.plist无法进入安装界面,可以试试这个其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；本镜像集成的EFI如果无法安装，请根据自己的机型寻找相应的EFI进行替换，请参考：macOS High Sierra区笔记本安装情况集合帖支持BCM94352z无线网卡，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；已更新Lilu(1.2.3)、AppleALC(1.2.3)、IntelGraphicsFixup(1.2.7)等驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对 黑果小兵 的大力支持，由于人员众多，恕不一一列名致谢！挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd窗口,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="C12A7328-F81F-11D2-BA4B-00A0C93EC93B" # 设置为EFI分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接：请点击下载Mega网盘下载链接:请点击下载如果mega无法下载,请进群下载hosts_mega.txt迅雷下载链接:请点击下载 感谢@难忘情怀提供下载资源MD5 (macOS High Sierra 10.13.4(17E199) Installer with Clover 4418.dmg) = e1d1fb0f036c35582a016d50035fc1a3 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.4</tag>
        <tag>1.7e+200</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[修改DSDT实现电量显示方法【转载】]]></title>
    <url>%2FModify-DSDT-to-achieve-power-display-method.html</url>
    <content type="text"><![CDATA[这篇帖子主要来源于论坛https://github.com/RehabMan/Laptop-DSDT-Patch。但是很多笔记本并未出现在这个补丁源里，并且我们要了解补丁的意思才知道它适不适合我们的电脑。 电量补丁制作过程我们需要确定DSDT里的哪些部分需要改。用MaciASL软件打开DSDT，搜索**EmbeddedControl。在DSDT里，可能会有一到多个。同时注意一个计算机名字如下图为EC0**1OperationRegion (ECF2, EmbeddedControl, Zero, 0xFF)​ 上面的代码，我们只需要关注ec域声明的名字，即**ECF2（别的可能是ECF0等）。​ 我们开始搜索Field（ECF2**。我们需要查看Field里所有大于8位的元素，例如：12345Field (ECF2, ByteAcc, Lock, Preserve) &#123; Offset (0x10), BDN0, 56,...​ 可以看到**BDN0**是一个大于8位的字段。​ 我们对其进行记录。之后我们要确定除了这里还有没有其他地方调用了这个字段。搜索他的名字：BDN0。如果**只有这里被用到则不用拆分可以删除记录，**如果除了这里还有其他地方用到，则进行记录。​ 整理到如下的结果：​ 可以看到我有意对16位 32位以及高于32位进行了一个空行的区分，大家也可以这样，这对下面的修改操作有着重要意义。 补丁的制作方法 对于16位和32位字段的处理对于16位的BDC0，我么需要把它拆分为两部分（低字节，高字节）。在拆分的时候，需要注意两点：​ 1.拆分后，它的名字应该是 4个字符 。不能多，也不能少。如图// 拆分前： BDC0, 16DC00, 8,DC01, 8,复制代码​ 2.拆分后到名字不能已经出现在dsdt中（最好也不要与拆分到名字重复，虽然没什么问题，但是如果多次打这个补丁就会发生错误），可以先想好几个名字，然后在dsdt中搜索，如果没有就可以。​ 然后。重点来了，拆分16位字段的补丁结构。（这里只会拆分ec域内的名称）into device label H_EC code_regex BDC0,\s+16, replace_matched begin DC00,8,DC01,8, end;复制代码​ 对于各部分的含义以及修改方法：​ 1.into device label** H_EC**​ 含义：针对H_EC这个设备操作。对于自己电脑的名称请查看制作过程第一步的截屏处。​ 2.code_regex** BDC0,\s+16,**含义：code_regex表示寻找后面的匹配项。 后面的BDC0,\s+16,是寻找的内容，对于小白，只要知道把BDC0替换成你所记录的16位名称即可。相关解释：\s+表示多个空格。所以这句话的意思是搜索BDCO，16，​ 个人建议：这一步中的最后的“，”个人觉得没必要加，因为如果这个数据出现在右括号前贼不会有这个“，”。​ 3.replace_matched begin** DC00,8,DC01,8,** end;​ 含义：replace_matched begin…end表示将前面搜索到的字段替换为省略后里的字段。**DC00,8,DC01,8,**即替换为的内容。这里DC00 DC01即你要改为的名 字。​ 注意和上文的对应，如过上文按照我的建议不加最后的“，”则这里应为“DC00,8,DC01,8”！​ 到了这里，我们已经可以自己写替换（或者说拆分）16位字段的补丁了。但是，对于示例DSDT，BDC0是被用到的字段，因此，只是拆分它是不行的。用到它的地方也需要修改。例如这些地方：Store (BDC0, Index (DerefOf (Index (Local0, 0x02)), Zero))Store (ShiftRight (BDC0, 0x08), Index (DerefOf (Index (Local0, 0x02)), One))复制代码​ 由于拆分，BDC0已经变成两个字段了，于是，我们需要1个工具方法来处理拆分后的字段。into method label B1B2 remove_entry;into definitionblock code_regex . insertbeginMethod (B1B2, 2, NotSerialized)\n{\nReturn(Or(Arg0, ShiftLeft(Arg1, 8)))\n}\nend;复制代码​ 对于小白直接将这个加入加入你的补丁中就ok。​ 对这个补丁的解读：​ 1.into method label B1B2 remove_entry; 查找B1B2方法，如果有，删除它。​ 2.into definitionblock code_regex . insert 把后面的内容插入DefinitionBlock { }（每个dsdt的第一个就是这个）内。​ 对于dsdt内其他部分的修改，如下：上面是本身的效果，下面为修改结束的效果：Store (BDC0, Index (DerefOf (Index (Local0, 0x02)), Zero))Store (ShiftRight (BDC0, 0x08), Index (DerefOf (Index (Local0, 0x02)), One))复制代码Store (B1B2(DC00,DC01), Index (DerefOf (Index (Local0, 0x02)), Zero))Store(ShiftRight (B1B2(DC00,DC01), 0x08), Index (DerefOf (Index (Local0, 0x02)), One))复制代码​ 于是有了这个补丁：into method label GBTI code_regex (BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;复制代码​ 主要介绍下几个参数：​ 1.into method label GBTI这部分GBTI为dsdt出现的BDC0的方法，至于如何查看，点中你想要的参数，maciasl自然会显示，如下图：灰色部分即为你要修改为的名称，注意有些是有_的也要完全相同的加进去​ 2.code_regex (BDC0,这部分(BDC0,与上面的查找相同，不过这部分并不能直接把BDC0改成你自己的方法就完事！！！举个例子：Store (^^PCI0.LPCB.EC0.XIF1, Index (PAK0, One))复制代码​ 如果我要改这个中的XIF1应该怎么写？ 应该写为：(^^PCI0.LPCB.EC0.XIF1,​ 所以这个地方就是看自己的代码具体的情况，改成自己的形式，并且每个标点符号左边要加&quot;&quot;​ 3. replaceall_matched begin (B1B2(DC00,DC01), end;​ 这部分括号内就是你要修改为的内容，还以2中例子，应该改成什么？​ 应该改为：(B1B2(^PCI0.LPCB.EC0.XID1,^PCI0.LPCB.EC0.XID2),​ 这个地方就是把B1B2括号内的两个参数改成你本身括号内的内容，并且把你想改的参数分别改掉。​ **特别提醒：1.以上都是对于在dsdt中，store（要修改参数，xxx）的形式** 如果出现store（xxx，要修改的参数）则我们要改前改后的形式如下：Store (Arg0, ENCR)//修改前Store (ShiftRight(Arg0,8),ENC2)Store (Arg0,ENC1)复制代码​ 具体代码请结合上处解释自行书写，另外 换行为/n，空格为/s。 2.如果出现Or （你要修改的参数，xxx，你要修改的参数）的形式则应该修改为如下形式：Or (BATD, 0xC0, BATD)//修改前Store(ShiftRight(Or(B1B2(BTD0,BTD1),0xC0),8), BTD1)Store(Or(B1B2(BTD0,BTD1),0xC0), BTD0)复制代码​ 3.如果出现****And （你要修改的参数，xxx，你要修改的参数）的形式则修改形式如下：And (BATD, 0xFF3F, BATD)//修改前Store(ShiftRight(And(B1B2(BTD0,BTD1),0xFF3F),8), BTD1)Store(And(B1B2(BTD0,BTD1),0xFF3F), BTD0)复制代码​ 至此，16位修改完毕，得到形如下补丁：# 16-bit registersinto device label H_EC code_regex BDC0,\s+16 replace_matched begin DC00,8,DC01,8 end;into device label H_EC code_regex BDC1,\s+16 replace_matched begin DC10,8,DC11,8 end;into device label H_EC code_regex BFC0,\s+16 replace_matched begin FC00,8,FC01,8 end;into device label H_EC code_regex BFC1,\s+16 replace_matched begin FC10,8,FC11,8 end;into device label H_EC code_regex BDV0,\s+16 replace_matched begin DV00,8,DV01,8 end;into device label H_EC code_regex BDV1,\s+16 replace_matched begin DV10,8,DV11,# fix 16-bit methodsinto method label GBTI code_regex (BDC0, replaceall_matched begin (B1B2(DC00,DC01), end;into method label GBTI code_regex (BDC1, replaceall_matched begin (B1B2(DC10,DC11), end;into method label GBTI code_regex (BFC0, replaceall_matched begin (B1B2(FC00,FC01), end;into method label GBTI code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;into method label BTIF code_regex (BFC0, replaceall_matched begin (B1B2(FC00,FC01), end;into method label BTIF code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;into method label ITLB code_regex (BFC1, replaceall_matched begin (B1B2(FC10,FC11), end;复制代码接着是32位字段的修改​ 这是与16位类似的处理方法：直接打进去就好nto method label B1B4 remove_entry;into definitionblock code_regex . insertbeginMethod (B1B4, 4, NotSerialized)\n{\n​ Store(Arg3, Local0)\n​ Or(Arg2, ShiftLeft(Local0, 8), Local0)\n​ Or(Arg1, ShiftLeft(Local0, 8), Local0)\n​ Or(Arg0, ShiftLeft(Local0, 8), Local0)\n​ Return(Local0)\n}\nend;复制代码​ 32位的修改方法与16位差不多。形如：# 32-bit registersinto device label H_EC code_regex BTY0,\s+32 replace_matched begin TY00,8,TY01,8,TY02,8,TY03,8 end;into device label H_EC code_regex BTY1,\s+32 replace_matched begin TY10,8,TY11,8,TY12,8,TY13,8 end;# fix 32-bit methodsinto method label GBTI code_regex (BTY0, replaceall_matched begin (B1B4(TY00,TY01,TY02,TY03), end;复制代码​ 这部分不懂的去看16位的修改方法，完全相同，只是数据变成了四个！二、大于32位的字段补丁处理对于大于32位的字段不用进行拆分操作，只需要将用到的地方进行处理就行了。** 我们先来认识个东西：偏移量。偏移量是啥？ 看看图中的offset代表的就是偏移量。中间的咋算？**** 偏移量逢8进1，所以在对嘴上面的offset往下加就可以得出，如图：**Offset (0x04),​ CMCM, 8, //0x04​ CMD1, 8, //0x05（8位是1字节，所以加1）​ CMD2, 8, //0x06​ CMD3, 8, //0x07​ Offset (0x18), 这里空了一些，不用纠结，按原始DSDT给出的偏移量计算就好（会给开头的偏移量）​ Offset (0x19),​ SMST, 8, //0x19​ MBMN, 80, //0x1A​ MBPN, 96, //0x25 = 0x1A+A+1（0x1A是上一个的起始地址，A的得来：80除以8得10，也就是上一个占了10个字节，16进制表示就是A。 0x2A+A是它占到了哪个地址，它的下一个地址才是下一个开始，所以再加1。）​ GPB1, 8, // 0x32 = 0x25 + C（96位占了12个字节）+1​ GPB2, 8, //0x33​ GPB3, 8, //0x34​ GPB4, 8, //0x35复制代码​ 另外上r神的方法：（其中的H_EC同上 请改为自己的设备名，不知道在呢？去看一！）# utility methods to read/write buffers from/to ECinto method label RE1B parent_label H_EC remove_entry;into method label RECB parent_label H_EC remove_entry;into device label H_EC insertbeginMethod (RE1B, 1, NotSerialized)\n{\n​ OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n​ Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n​ Return(BYTE)\n}\nMethod (RECB, 2, Serialized)\n// Arg0 - offset in bytes from zero-based EC\n// Arg1 - size of buffer in bits\n{\n​ ShiftRight(Arg1, 3, Arg1)\n​ Name(TEMP, Buffer(Arg1) { })\n​ Add(Arg0, Arg1, Arg1)\n​ Store(0, Local0)\n​ While (LLess(Arg0, Arg1))\n​ {\n​ Store(RE1B(Arg0), Index(TEMP, Local0))\n​ Increment(Arg0)\n​ Increment(Local0)\n​ }\n​ Return(TEMP)\n}\nend;复制代码into method label WE1B parent_label H_EC remove_entry;into method label WECB parent_label H_EC remove_entry;into device label H_EC insertbeginMethod (WE1B, 2, NotSerialized)\n{\n​ OperationRegion(ERAM, EmbeddedControl, Arg0, 1)\n​ Field(ERAM, ByteAcc, NoLock, Preserve) { BYTE, 8 }\n​ Store(Arg1, BYTE)\n}\nMethod (WECB, 3, Serialized)\n// Arg0 - offset in bytes from zero-based EC\n// Arg1 - size of buffer in bits\n// Arg2 - value to write\n{\n​ ShiftRight(Add(Arg1,7), 3, Arg1)\n​ Name(TEMP, Buffer(Arg1) { })\n​ Store(Arg2, TEMP)\n​ Add(Arg0, Arg1, Arg1)\n​ Store(0, Local0)\n​ While (LLess(Arg0, Arg1))\n​ {\n​ WE1B(Arg0, DerefOf(Index(TEMP, Local0)))\n​ Increment(Arg0)\n​ Increment(Local0)\n​ }\n}\nend;复制代码​ 两个方法不用同时打，简单来说如果你要改的参数挨着左括号则用一，如果你改的参数离右括号进就用二！ 修改形式：如图改法：Store(MBMN, XXXX) -&gt; Store(RECB(0x1A, 80), XXXX)复制代码​ 这时补丁就是into method label XXXX code_regex (MBMN, replaceall_matched begin (RECB(0x1A,80), end;into method label XXXX code_regex (MBPN, replaceall_matched begin (RECB(0x25,96), end;复制代码​ 对比16位改对应的位置 如果你的要改参数离右括号进则：Store (Arg3, _SB.PCI0.LPCB.EC0.SMD0) -&gt; _SB.PCI0.LPCB.EC0.WECB(0x1C,264,Arg3)复制代码​ 这时补丁则为：nto method label SMRW code_regex Store\s(Arg3,\s\_SB.PCI0.LPCB.EC0.SMD0) replaceall_matched begin \_SB.PCI0.LPCB.EC0.WECB(0x1C,264,Arg3) end;复制代码最后总结下补丁结构：# Tip: If you get a 0% battery status,you should also patch the Rehabman’s “Fix Mutex with non-zero SyncLevel” patch.# You also can patch the both of your computer’s battery patch and the Rehabman’s patch at one time.# 注意：如果打过电量补丁后，有获取的电池状态显示为0%的情况，还需要打 Rehabman的 “Fix Mutex with non-zero SyncLevel” 补丁。# 你也可以，一次性打好 自己电脑的电量补丁 和 Rehabman 的那个补丁。# ==== Field devide 字段拆分 ====# ==== Replace called method 替换调用方法 ====# ==== Data handling method 数据处理方法 ====复制代码最后的解释：文中多次提到特殊情况和离括号的的远近不同的处理方法，这是为什么呢？很简答的原因是sotre（A，B）是一个从左到右的操作，也就是将A写到B所以如果A是你的参数则是读的操作，而如果是B则是写的操作，也就用到不同的方法。而Or 的第三个参数，是把前两个数的计算结果，写入到第三个参数的意思。And 的第三个参数，是把前两个数的计算结果，写入到第三个参数的意思。不过能理解store就够了。** 将整理好的补丁保存位txt格式就能打入了 软件中点patch。点open就行**最后，特别感谢翻译贴和r神的帖子，也希望你们都能搞定电量显示的问题，另外，如果成功请回馈社会将补丁放于最上面所说帖子的补丁源！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>电池</tag>
        <tag>电量</tag>
        <tag>拆分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.3 17D47 正式版 with Clover 4391原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.3-(17D47)-official-version-and-Clover-4391-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.3(17D47)正式版 with Clover 4391原版镜像本镜像采用官方原版app制作，集成Clover 4391，支持UEFI启动安装;如果卡+++请替换Drivers64UEFI/Backup目录下的OsxAptioFix3Drv-64.efi所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;支持UHD620/UHD630等八代核显特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理Clover默认配置文件config.plist为620/630/640/650；config_DalianSky.plist为部分机型增加Drop Tables,如果默认的config.plist无法进入安装界面,可以试试这个其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列有线网卡，支持Intel板载有线网卡；已更新Lilu(1.2.2)、AppleALC(1.2.2)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接：https://pan.baidu.com/s/1bqmWMLp 密码: 7pu8迅雷下载链接:请点击下载 感谢@难忘情怀提供下载资源Mega网盘下载链接:https://mega.nz/#!51tiVY6b!MFPR59UxDI54xHWORLwg4r121XI9ns6iXfJpShQE9lo如果mega无法下载,请进群下载hosts_mega.txtMD5 (macOS High Sierra 10.13.3(17D47) Installer with Clover 4391.dmg) = e984c189a3342bb6ae293ad9c1c8a1ec 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.2</tag>
        <tag>17C88</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】AMD Ryzen安装macOS High Sierra(10.13)指南[授权翻译]]]></title>
    <url>%2FFresh-installing-macOS-High-Sierra(10.13)-on-AMD-Ryzen-Hackintosh-Guide.html</url>
    <content type="text"><![CDATA[【黑果小兵】AMD Ryzen安装macOS High Sierra(10.13)指南[授权翻译]这是一个基本指南，可以用来得到一台运行macOS High Sierra 10.13.x的Ryzen台式电脑。 在AMD版本上安装macOS有更多的步骤，也更难以为初学者工作，所以我尽可能地简化了这个过程，并尽可能使本指南更容易理解。如果你有一个基于Intel的系统，请参阅： macOS安装教程兼小米Pro安装过程记录，因为本指南仅适用于Ryzen。使用这个Ryzen High Sierra指南的基本步骤，以下设备工作正常：声卡以太网络所有USB端口USB3速度Nvidia GPUAMD GPU睡眠唤醒 Ryzen High Sierra Hackintosh概述稍微额外的努力，Ryzen可以在黑客行业工作，虽然它不会像英特尔的机器那样流畅，但是这是Mac的基础。本指南基于Clover方法，并使用在Ryzen兼容性安装期间应用的定制Ryzen内核。 与英特尔的机器相比，安装的时间还要长得多。您只需要一个备用闪存驱动器，硬盘驱动器以及能够运行虚拟机来完成此操作的Mac或Windows / Linux计算机。 我已经包含一个EFI文件夹以及执行安装所需的PreInstall＆PostInstall文件夹。 安装完成后，声音应该工作我使用VoodooHDA.kext驱动程序，USB 2/3端口工作正常，使用USBInjectAll.kext /GenericUSBXHCI.kext，而对于以太网我包含了所有的可能的驱动文件，我可以想到Ryzen主板使用的，所以安装完成后也要工作。使用本指南中包含的步骤和文件，我可以同时获得AMD RX和Nvidia GTX显卡的功能。 使用Ryzen CPU会出现一些图形化的性能下降。更新的AMD显卡的性能下降了10-15%，而对于Nvidia来说，性能下降了50%，fps下降了50%。睡眠也适用于我是否插入了AMD或Nvidia显卡。在Ryzen + Nvidia上使用睡眠工具已经导致其他人重新启动问题，而不是正常唤醒，但似乎从High Sierra 10.13开始已经解决。包括10.13.1 build (17B1003)和10.13.2 (Beta)，因为我没有遇到这个问题与我的GTX 1050钛使用本指南中包含的文件。Ryzen hackintosh的一个重要问题是无法安装macOS更新。 例如，当我尝试时，我无法运行更新安装程序从10.13.1到10.13.2。 例如，当苹果有macOS的根问题时，小的更新可以工作10.13.1我能够更新到更新的版本10.13.1。 但是要升级到 10.13.2，我唯一的选择就是在应用商店下载更新后的版本，然后创建另一个USB安装程序，重新安装High Sierra。这个和更慢的图形性能，特别是在我看来与Nvidia显卡配对时，是使用Ryzen黑金刚的最不方便的部分。 如果你还没有购买你的电脑零件，并计划使用macOS作为你的主要操作系统，我建议与英特尔一起，只为了更平滑的体验，但如果你已经有一台像我这样的Ryzen PC，让我们开始吧… Part 1 - 创建一个Ryzen安装程序要创建Ryzen hackintosh，您需要创建一个备用的8GB +闪存驱动器来安装High Sierra安装程序。另外需要一个mac或没有Mac的人，你需要创建一个运行macOS的虚拟机这是一个书面指南，但是如果你喜欢视频教程请参阅XLNC**创建的视频 1. 创建一个High Sierra USB安装程序学习如何做到如下： 如何创建MacOS系统安装U盘 2. Ryzen内核设置现在我们手中已经有了High Sierra的安装程序，我们需要将其配置为更友好的方式，方法是放入修改好的内核Bronya @ InsanelyMac和由XLNC创建的PreInstall/PostInstall的脚本。 2.1 文件夹可见性AMD内核文件被添加到默认情况下在macOS上隐藏的文件夹，所以让我们取消隐藏这些文件夹：打开终端输入以下两行命令：12defaults write com.apple.Finder AppleShowAllFiles truekillall Finder​ 屏幕输出如下：重新启动 macOS，以便在编辑默认值后显示隐藏的文件。打开你在步骤1中所做的闪存驱动器Install macOS High Sierra你看到一堆半透明的文件夹。 这些是我们将要更改的隐藏文件夹。注意文件夹.IABootFiles和System ，这是你将要添加东西的目录。 2.2 添加AMD修补的内核现在我们要开始将粘贴文件从可下载的文件夹复制到USB闪存驱动器下载Ryzen_Kernel_10.13.zip解压Ryzen_Kernel_10.13进入Ryzen_Kernel_10.13/PreInstall/Prelinkedkernel/目录复制prelinkedkernel （注意：是文件而不是文件夹）我们将使用prelinkedkernel的补丁版本来替换安装macOS High Sierra上现有的Apple版本。 在以下位置粘贴并替换prelinkedkernel/Volumes/Install macOS High Sierra/.IABootFiles//Volumes/Install macOS High Sierra/System/Library/PrelinkedKernels/导航回Ryzen_Kernel_10.13文件夹复制PreInstall和PostInstall文件夹将它们粘贴到闪存驱动器/Volumes/Install macOS High Sierra/ 第3步。EFI分区配置现在，必须通过添加预配置的EFI文件夹来配置闪存驱动器的启动分区。装载EFI分区：下载Clover配置器打开三叶草配置程序在工具下选择装载EFI单击安装分区以安装macOS …。点击打开分区如果在挂载的分区中存在，则选择名为EFI的文件夹。下载Ryzen_High_Sierra_10.13_EFI.zip解压 Ryzen_High_Sierra_10.13_EFI.zip复制解压缩的EFI文件夹将复制的EFI粘贴到已装入的EFI分区或**/卷/ EFI中** 第2部分 - 在Ryzen上安装High Sierra在Ryzen上安装High Sierra相对于兼容的英特尔机器来说更难执行，主要是因为需要时间加载各个部件，而且由于需要耐心处理失败的靴子，您可能经常遇到这个着名的屏幕：不用担心，只需重新启动系统，然后重试。 在启动Ryzen hackintosh的时候，斜线的圆/失败的启动图标也可能会出现，然后安装后，虽然它应该比安装发生的频率低。 如果你睡觉了，而不是把它关掉，那么这个问题不应该是一个大问题，这对AMD和Nvidia显卡都适用。 步骤1. BIOS设置现在USB安装程序已经完成了，现在可以配置BIOS以兼容macOS。重新启动机器并进入BIOS，热键将为F8，F10，F11或F12转过“退出”部分并将BIOS设置重置为“默认”我建议将闪存驱动器的UEFI：分区设置为在Boot的引导部分下找不到的Boot＃1设置以下BIOS设置：（您可能没有所有这些设置，这没关系）AMD-V / SVM =禁用（可以重新启用后如果需要安装）SATA端口= AHCIIOMMU =禁用APU =禁用HPET =启用EHCI Hands-off =已启用XHCI Hands-off =已启用串行端口=禁用并行端口=禁用 第2步。启动USB安装程序启动到MacOS USB闪存驱动器安装程序的UEFI以加载Clover启动菜单。如果USB驱动器没有设置为默认启动音量，则在启动屏幕出现时更改临时启动设备，需要按下的按钮通常为F10，F11或F12。 出现临时选择屏幕时选择UEFI 😦 USB设备名称）。你现在在三叶草菜单。 使用箭头键验证Boot OS X安装从安装选择macOS High Sierra按Enter键安装程序现在将缓慢加载…如果您得到香烟十字标志而不是下面的图像，只需重新启动并再次尝试。 当我通过安装程序的步骤时，发生了几次这样的事情，只是再次尝试让我解决这个问题。 **当安装程序加载时，我们希望在开始安装之前将磁盘格式化为适合黑客可用性的GUID。安装程序出现时按继续选择你的语言从安装菜单中选择磁盘工具按下左上角左上角的查看按钮，从下拉菜单中选择显示所有设备 。 （注意： NVME驱动器不显示？ ）选择要安装macOS的磁盘，并使用以下设置删除它：名称:(可以任意命名）格式： Mac OS扩展（日志式）Scheme： GUID分区映射​记住为AMD内核选择的驱动器名称和禁用APFS转换非常重要。按擦除关闭磁盘工具安装macOS High Sierra注意：在安装macOS时，屏幕可能会变黑，显示屏正在睡眠，您可以按住键盘上的某个键或摇动鼠标来唤醒屏幕安装程序完成后，计算机将重新启动，您将希望返回到Clover菜单。 步骤3. AMD PreInstall内核执行Clover现在有了第二个选项，但是在我们做这个之前，我们必须先做AMD内核的预安装部分选择引导OS X从安装macOS高山再次安装一旦安装程序完成加载，在顶部菜单栏中通过实用程序打开终端 。（可选） 禁用终端的APFS如果您忘记了您的驱动器名称，请键入以下内容：1ls -1 /Volumesls -1 /Volumes将列出可用卷。 我们需要在步骤4.2中为下面一行设置的驱动器的名称在**终端中输入以下命令：1/Volumes/Image\ Volume/PreInstall/pre按Enter键**卷名称：**是您格式化时命名的驱动器。 所以输入并按回车。让它运行…在终端中提示您重新启动计算机时，将从顶部的银色菜单栏中重新启动计算机 第4步 完成安装程序在重新启动时重新进入Clover菜单从“Hackintosh”选择启动macOS安装安装程序将完成High Sierra安装…如果您在灰色屏幕重新启动，并再次尝试，直到它加载底部图像成功。 另外这部分花了我很长时间才完成，我被困在“约18分钟”，等了约10分钟。检查出High Sierra fix - “macOS无法安装在您的计算机上”，如果你得到一个重新启动错误提示，而不是这张照片。 步骤5. AMD Post安装内核执行选择Boot OS X Install from Install macOS High Sierra再次进行安装一旦安装程序完成加载，在顶部菜单栏中通过实用程序打开终端 。在终端中键入以下内容：1/Volumes/Image\ Volume/PostInstall/kernel_kext_install_only按Enter键输入卷名称的驱动器名称：让它运行…在终端中提示您重新启动计算机时，将从顶部的银色菜单栏中重新启动计算机 第6步。Ryzen最终安装和第一次启动安装完成后电脑会自动重启。从“Hackintosh”中选择Boot macOS选择语言选择键盘选择我的电脑没有连接到互联网选择不传输任何信息同意条款和条件填写登录信息（可选）如果您不希望被跟踪，请在快速设置中选择自定义设置 。macOS High Sierra将首次启动… 第3部分 - Ryzen Hackintosh后安装还有很多事情可以从硬盘驱动器而不是闪存驱动器启动，并从图形卡获得适当的视频加速必须完成。 步骤1.配置EFI分区现在我们在macOS中，我们希望能够在没有USB闪存驱动器插件的情况下加载macOS。为了能够从驱动器启动macOS，它需要被复制到启动驱动器的EFI分区上。 你也应该有互联网接入。打开三叶草配置程序安装 闪存驱动器的EFI按打开EFI或导航到取景器中的EFI位置将EFI文件夹复制到您的桌面上打开查找器并弹出闪存驱动器使用Clover Configurator安装磁盘的EFI按打开EFI或导航到取景器中的EFI位置将EFI粘贴到磁盘上的现有EFI上当它通过菜单提示您EFI文件夹已经存在时，选择Replace现在，您将能够在没有USB闪存驱动器的情况下启动macOS**建议：**删除EFI文件夹中名为APPLE的文件夹（如果存在）。 这个文件夹是在安装过程中自动在闪存驱动器的EFI分区上创建的，可能会导致hainstintosh问题。 该文件夹最终将被重新创建，但只需要在安装macOS后删除一次。 步骤2. AMD CPU速度增强运行AMD Ryzen Hackintosh时，CPU的性能下降了大约20％。 这可以通过设置busratio bootflag来匹配你的Ryzen CPU来解决。总线 速率由以下公式计算： CPU速度时钟（MHz）/总线速度（MHz）=总线速率。CPU速度时钟（MHz）= CPU速度（GHz）x 1000所有Ryzen CPU的总线速度（Mhz）= 100MHz例子：Ryzen 1800X 3.6GHz; busratio = 36Ryzen 1700x 3.4GHz; busratio = 34Ryzen 1700 3.0GHz; busratio = 30Ryzen 1600X 3.6GHz; busratio = 36Ryzen 1600 3.2GHz; busratio = 32Ryzen 1500X 3.5GHz; busratio = 35Ryzen 1400 3.2GHz; busratio = 32 设置公交车比例：装入EFI分区导航到/卷/ EFI / EFI / CLOVER /在Clover Configurator中打开config.plist在左侧栏中选择引导在自定义标志下为你的CPU添加正确的busratio = xx：我使用的是Ryzen 1700 CPU，所以我的busratio是30，因为3.0GHz的时钟速度。 第3步。专用GPU加速对于您的特定主板，您可能需要将NVRAM检测修补程序添加到dGPU加速中。 我在AMD RX 560上不需要它，但是当我插入我认为很奇怪的Nvidia GTX 1050 Ti时需要它。添加EmuVariableUefi-64.efi：打开三叶草配置程序安装您的EFI分区使用Clover配置器打开config.plist单击Clover Configurator左栏中的安装驱动程序点击左下角的EmuVariableUefi 。在**/卷/ EFI / EFI / Clover / Drivers64UEFI /** AMD：我把这些文件包括在内，让AMD RX卡工作，除了Vega 56/64，这将需要更多的工作。如果您有RX 560，请添加引导标志-rad4200以防止冻结，如此处所述 。 NVIDIA：除EmuVariableUefi-64.efi外，如果您使用的是最新发布的Nvidia GPU之一，您将安装网络驱动程序。 不应该有任何你需要做的事情我已经设置了适当的CsrActivateConfig并添加了必要的kexts。 如果在安装网络驱动程序后出于某种原因无法正常工作，则可能需要在BIOS中禁用CMS。转到驱动程序页面获取Web驱动程序：下载 - Nvidia Web驱动程序注意：如果由于隐私设置而未能成功安装，可能需要重新安装Nvidia网络驱动程序。步骤4.声音，以太网和其他一切声音使用VoodooHDA.kext启用。 我包括了所有的以太网kexts，我可以想到，这将与Ryzen，但我建议删除你不需要的kexts。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>教程</tag>
        <tag>AMD</tag>
        <tag>Ryzen</tag>
        <tag>安装指南</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LNMP环境下正确配置HTTP强制跳转HTTPS的方法]]></title>
    <url>%2FMethod-for-correctly-configuring-HTTP-forced-HTTPS-in-LNMP-environment.html</url>
    <content type="text"><![CDATA[概述一般来说，给站点申请了安全证书以后，都会希望访问者强制使用HTTPS来进行连接。HTTP强制跳转HTTPS通常有两种方法，一种是对整个域名使用正则表达式来进行rewrite重写，另外一种是通过301跳转来处理。Nginx官方并不推荐前者，其原文如下：https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/#taxing-rewrites123456# 不好的方法: rewrite ^/(.*)$ http://example.com/$1 permanent;# 好的方法: rewrite ^ http://example.com$request_uri? permanent;# 更好的方法: return 301 http://example.com$request_uri;因此，对于HTTP强制跳转HTTPS的语句，应当写成：1return 301 https://$server_name$request_uri; 默认配置对于自己手动编译安装的Nginx，其默认配置文件nginx.conf 将80端口和443端口（默认被注释）的监听分别写进了两个server段中，这是一种非常符合生产环境的标准做法。因此，只需要将上述语句直接复制到80端口对应的server段中，同时将该段中的location配置全部复制到443端口对应的server段中即可。类似如下：12345678910111213141516171819202122232425262728293031# https部分server &#123; listen 443 ssl; server_name yourname.com; ssl_certificate /dir/xx.crt; ssl_certificate_key /dir/xx.key; ssl_dhparam /dir/dhparam.pem; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+EXP; location / &#123; root /your/wwwroot/; index index.html index.htm index.jsp index.do; &#125; &#125;# http部分server &#123; listen 80; server_name yourname.com; return 301 https://$server_name$request_uri; location / &#123; root /your/wwwroot/; index index.html index.htm index.jsp index.do; &#125; # http部分的location字段可保留可删除 &#125; LNMP环境配置如果你的LNMP环境使用的是流行的一键安装包，那么问题就来了。这个脚本生成的nginx.conf中没有443端口的server字段，因此在配置SSL证书的时候，有些人为了省事，可能会直接将443端口的监听一起写到server字段中，类似这种：12345678910111213server &#123; listen 80; listen 443 ssl; ssl_certificate /dir/xx.crt; ssl_certificate_key /dir/xx.key; ssl_dhparam /dir/dhparam.pem; #listen [::]:80 default_server ipv6only=on; server_name www.yourname.com yourname.com; index index.html index.htm index.php; root /your/wwwroot/; &#125;那么如果你直接使用return 301 https://$server_name$request_uri; ，由于443端口和80端口在同一个server段监听，就会产生内部无限循环。当用户访问时，就会出现“重定向次数过多(ERR_TOO_MANY_REDIRECTS)”的错误。正确的方法，使用IF判定，只对HTTP连接进行重定向：1234567891011121314151617server &#123; listen 80; listen 443 ssl; ssl_certificate /dir/xx.crt; ssl_certificate_key /dir/xx.key; ssl_dhparam /dir/dhparam.pem; #listen [::]:80 default_server ipv6only=on; server_name www.yourname.com yourname.com; if ( $scheme = http )&#123; return 301 https://$server_name$request_uri; &#125; index index.html index.htm index.php; root /your/wwwroot/; &#125;但Nginx官方并不推荐过多的IF判定（可参考：https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/ ）。因此最好还是像Nginx默认配置文件那样，将80端口和443端口的监听区分开，同时采用第一种跳转方法，这也是更符合生产环境的一种做法。]]></content>
      <categories>
        <category>Linux</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>LNMP</tag>
        <tag>NGINX</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自用next自定义引用格式表]]></title>
    <url>%2FSelf-use-next-theme-custom-reference-format-table.html</url>
    <content type="text"><![CDATA[next自定义引用格式表A note 标签1&lt;div class="note default"&gt;&lt;p&gt;default&lt;/p&gt;&lt;/div&gt;default1&lt;div class="note primary"&gt;&lt;p&gt;primary&lt;/p&gt;&lt;/div&gt;primary1&lt;div class="note success"&gt;&lt;p&gt;success&lt;/p&gt;&lt;/div&gt;success1&lt;div class="note info"&gt;&lt;p&gt;info&lt;/p&gt;&lt;/div&gt;info1&lt;div class="note warning"&gt;&lt;p&gt;warning&lt;/p&gt;&lt;/div&gt;warning1&lt;div class="note danger"&gt;&lt;p&gt;danger&lt;/p&gt;&lt;/div&gt;danger1&lt;div class="note danger no-icon"&gt;&lt;p&gt;danger no-icon&lt;/p&gt;&lt;/div&gt;danger no-iconB Label 标签1&#123;% label default@显示内容 %&#125;显示内容1&#123;% label primary@黑果小兵 %&#125;黑果小兵1&#123;% label success@success %&#125;success1&#123;% label info@info %&#125;info1&#123;% label warning@warning %&#125;warning1&#123;% label danger@danger %&#125;dangerC 自定义样式 引用1&lt;blockquote class="question"&gt;内容&lt;/blockquote&gt;内容D 自定义样式 数字块1&lt;span id="inline-toc"&gt;1.&lt;/span&gt;1.这是一个测试]]></content>
      <categories>
        <category>hexo</category>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>lable</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.2(17C88)正式版 with Clover 4333原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.2-(17C88)-official-version-and-Clover-4333-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.2(17C88)正式版 with Clover 4333原版镜像本镜像采用官方原版app制作，集成Clover 4333，支持UEFI启动安装;所有配置文件中默认去掉Lilu的输出信息,让你看清10.13 内核崩溃(kernel pance)的真相;Clover支持UHD620/UHD630等八代核显特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理Clover默认配置文件config.plist为620/630/640/650；config_DalianSky.plist为部分机型增加Drop Tables,如果默认的config.plist无法进入安装界面,可以试试这个其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡；已更新Lilu(1.2.1)、AppleALC(1.2.1)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的部落阁 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接:https://pan.baidu.com/s/1i5hBZDVMega网盘下载链接:https://mega.nz/#!MgUymRaR!wMyIcgmOlihCj9pMCskP9Qxkru2uEDfmGY5LVSmWnrQ如果mega无法下载,请进群下载hosts_mega.txtMD5 (macOS High Sierra 10.13.2(17C88) Installer with Clover 4333.dmg) = 7a05f3e9ccaf81a4e8d2f5e558a075ae 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.2</tag>
        <tag>17C88</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[显示器接口数据及显存等参数修改]]></title>
    <url>%2FDisplay-interface-data-and-parameter-changes.html</url>
    <content type="text"><![CDATA[查看显卡platform-id显卡注入platform-id通过命令读取:1ioreg -l | grep platform-id显示结果如下1"AAPL,ig-platform-id" = &lt;00001659&gt; 得出显卡注入ID是:59160000读取核显驱动的加载情况,使用命令:1kextstat | grep -y appleintel1234567com.apple.driver.AppleIntelLpssI2C (3.0.60) com.apple.driver.AppleIntelLpssDmac (3.0.60)com.apple.driver.AppleIntelLpssI2CController (3.0.60) com.apple.driver.AppleIntelSlowAdaptiveClocking (4.0.0) com.apple.driver.AppleIntelKBLGraphicsFramebuffer (10.2.8)com.apple.driver.AppleIntelPCHPMC (2.0.1) com.apple.driver.AppleIntelKBLGraphics (10.2.8)由此可以判断所使用的驱动是AppleIntelKBLGraphics和AppleIntelKBLGraphicsFramebuffer,显示器的接口数据定义在AppleIntelKBLGraphicsFramebuffer里,通过AppleIntelKBLGraphicsFramebuffer提取接口数据 接口数据接口数据说明00001659 00000000 2A8A0800注入ID00000000 01030303 00002002端口数量定义00000000 00000060 6C050000显存6C050000 00000000 0000000000000800 02000000 98000000LVDS接口01050900 00040000 870100000105接口02040A00 00080000 870100000204接口FF000000 01000000 200000000306预留 显存容量修改01030303 00002002 00000000 0000 0060 0600是16进制,转换成10进制就是:153601030303 00002002 00000000 0000 0080 0800是16进制,转换成10进制就是:2048 视频教程 显示器接口数值定义连接类型(connetor type)数值(Data)HDMI00 08 00 00DVI00 02 00 00eDP00 04 00 00DP00 04 00 00LVDS02 00 00 00VGA01 00 00 00 提取FB接口数据的新方法，感谢@emyself打开FB-VRAM Patcher点击提取FB数据窗口里显示出来的就是你的显卡的FB接口数据。当然，这个软件发布的初衷是为了自动生成1536MB-&gt;2048MB的补丁，只是被我们给玩坏了才增加了这个功能。 自动生成1536MB-&gt;2048MB补丁打开FB-VRAM Patcher点击生成显存补丁它会自动生成两种格式的补丁，形式如下：16进制格式Base64格式 修改显示器接口数据比如我想将0105这个接口修改为支持HDMI的显示器，怎么做呢？Find: 01050900 00040000 87010000 # eDP 00 04 00 00Replace:01050900 00080000 87010000 # HDMI 00 08 00 00 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>接口</tag>
        <tag>platform-id</tag>
        <tag>显存</tag>
        <tag>显示器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS安装教程兼小米Pro安装过程记录]]></title>
    <url>%2FMacOS-installation-tutorial-XiaoMi-Pro-installation-process-records.html</url>
    <content type="text"><![CDATA[引言一直以来就想写个macOS的安装教程,可惜没有TransMac以及BIOS设置的截图,正好小米PRO黑苹果高级群的班长@原味菠萝最近一直在写小米Pro安装黑苹果的教程,由于他工作繁忙,一直也没有完稿,我就在他写作的基础上将这篇教程完善. Windows下制作macOS安装盘 准备工具U盘大于8GU 盘大小不限做 PE 盘etcher小米PRO专用EFI文件系统镜像 制作安装镜像镜像制作：下载etcher，打开镜像，选择U盘，点击Flash即可安装镜像的制作到这里就完成了,下一步,我们需要将EFI复制进刚制作好的USB磁盘的EFI分区里 将镜像里的EFI复制到USB安装盘的EFI分区下 显示磁盘分区信息打开终端,输入命令:diskutil list,它会显示类似的信息:1234567891011/dev/disk4 (disk image): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme +8.0 GB disk4 1: EFI EFI 209.7 MB disk4s1 2: Apple_HFS XiaoMiPro 10131 7.7 GB disk4s2/dev/disk5 (disk image): #: TYPE NAME SIZE IDENTIFIER 0: GUID_partition_scheme +7.0 GB disk5 1: EFI EFI 209.7 MB disk5s1 2: Apple_HFS XiaoMiPro 10131 6.7 GB disk5s2这里显示的8.0 GB的磁盘设备为:disk4,也就是我们刚才制作的安装磁盘,EFI分区的设备为:disk4s1;7.0 GB的磁盘设备为:disk5,这个是我们刚才打开的磁盘镜像,它包含的EFI分区的设备为:disk5s1; 挂载EFI分区我们使用diskutil命令分别挂载这两个EFI分区,命令如下:12345sudo diskutil mount disk4s1 # 挂载USB的EFI分区Volume EFI on disk4s1 mountedsudo diskutil mount disk5s1 # 挂载安装镜像的EFI分区Volume EFI on disk5s1 mountedopen . # 在当前位置打开Finder 复制/替换EFI将EFI复制进USB的EFI分区下即可,至于你想替换EFI也可以参考此方法操作 小米BIOS设置小米笔记本的BIOS默认开启了安全认证,UEFI引导需要关闭安全启动Secure Boot Mode方式,否则无法加载UEFI引导设备,比如刚制作好的macOS安装USB盘 操作方法:开机按F2进入BIOS设置,光标移动到Security,点击Set Supervisor Password设置一个BIOS密码,输入两次相同的密码,点击YES保存Supervisor Password由Not Installed变为Installed关闭安全启动点击Secure Boot Mode,设置为Disabled关闭安全启动按F10保存设置 安装macOS开机按F12键进入Boot Manager引导管理,选择EFI USB Device,回车进入Clover主菜单移动光标到Boot OS X Install from XiaoMiPro 10131回车如果无法进入安装界面,需要打开啰嗦模式进行排错,具体的操作方法请参考Clover使用教程11-26-2017 19:25更新未完待续 安装第一阶段 开始引导macOS系统这个过程需要1-2分钟,耐心等待进入安装程序,出现语言选择界面 语言选择选择简体中文出现macOS实用工具界面,选择磁盘工具 磁盘工具选择显示所有设备:选择SSD Media,点击抹掉按钮,选择默认的Mac OS扩展(日志型),将名称修改为Macintosh HD,点击抹掉按钮假设您的磁盘是空的且数据是已经备份过的,别怪我没提醒你!!!抹盘成功后,它会自动生成一个200MB的EFI分区,这样做的好处是不会出现安装过程中的由于EFI分区尺寸小于200MB而引起的无法安装的错误.当然前提是你的磁盘中没有重要的数据,或者您的数据已经提前备份过了.到这里,磁盘工具的动作就已经结束了.退出磁盘工具进入安装界面,进行系统的安装了. 安装macOS进入安装界面选择继续点击同意,选择Macintosh HD选择安装期间,它会把USB安装盘上的安装文件预复制到要安装的系统分区里,这个过程在小米Pro的笔记本上它跑得飞快,数据复制完后,它会自动重启然后进行第二阶段的安装 安装第二阶段第二阶段的安装会有两种界面,一种是不进安装界面直接安装,另一种是先进入安装界面直接安装,需要注意的是,无论是哪一种界面下,安装的过程中全程是禁用鼠标和键盘的,需要你做的只是耐心等待它安装完成安装速度取决于你的磁盘速度,第二阶段的安装已经与USB安装盘没什么关系了.macOS 10.13的安装完全区别于10.12,它不能免二次安装,甚至还需要重启多次,这些都是正常现象,请不要大惊小怪的.系统安装完成后,重启进入系统设置向导 设置向导 国家选择首先让你选择国家,这里我选择中国点击继续,设置键盘 设置键盘这里询问你是否传输信息到这台Mac 数据恢复可以从Mac或者Time Machine备份恢复我选择现在不传输任何信息,点击继续 Apple ID登录选择是否使用您的Apple ID登录,如何想现在就登录到Apple ID,请输入Apple ID和密码登录,否则选择不登录,进入系统后也可以设置登录到iCloud,点击继续阅读条款与条件,选择同意继续出现创建电脑用户的窗口,输入用户名和密码,点击继续 创建电脑用户系统会创建初始用户用户创建成功后,弹出iCloud的正在设置用户的窗口紧接着弹出设置iClound钥匙串的设置窗口,选择稍候设置,点击继续 设置iCloud钥匙串出现快捷设置,点击继续 快捷设置自定义设置定位以及数据反馈,请根据自己的喜好进行设置出现iCloud中的所有文件,如果你需要将文稿和桌面上的文件储存在 iCloud Drive中,请勾选,否则取消勾选,点击继续 iCloud文件同步设置出现FileVault磁盘加密,如果你需要打开 Filevault 磁盘加密,请勾选,否则取消勾选,点击继续 FileVault磁盘加密设置出现正在设置您的Mac,请稍候完成设置向导 设置向导完成出现桌面后,整个的安装向导就完成了.更新于 11-27-2017 21:15未完待续 安装后的系统设置系统安装后,你可以先喝杯咖啡兴奋会儿,马上还有更艰巨的任务在等着你呢 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[macOS篇]新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。diskutil命令的基本用法： 查看磁盘分区表1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme256 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s23:Microsoft Basic DataWIN10127.7 GBdisk0s3/dev/disk1(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme16 GBdisk11:EFIEFI200 MBdisk1s12:Apple_HFSInstall macOS Sierra15.8 GBdisk1s2 挂载磁盘EFI分区1sudo diskutil mount disk0s1 挂载U盘EFI分区1sudo diskutil mount disk1s1打开Finder，注意后面有个.1open .左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 教你将U盘上的EFI复制到磁盘的EFI分区,脱离USB运行[Windows篇] 挂载EFI分区Windows操作系统下面,打开cmd窗口,输入命令:1234567diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为EFI分区assign letter=X # x为EFI分区盘符您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式,将USB的EFI分区下面的EFI目录复制到安装磁盘的EFI分区下 合并EFI分区这里有一点需要注意:如果之前安装过Windows系统的话,会存在EFI的目录,只是EFI的目录下面只有BOOT和Microsoft这两个目录,如果希望添加macOS的Clover引导的话,可以将USB的EFI分区里面的EFI目录下面的CLOVER复制到磁盘里的EFI目录下,也就是执行的是**合并**的操作,让EFI同时支持WINDOWS和macOS的引导.千万不要全部复制,否则有可能造成EFI无法启动Windows. 复制EFI分区如果磁盘上的EFI分区里为空的,可以直接将USB的EFI分区下面的EFI目录直接复制到磁盘上的EFI分区里. 添加UEFI引导选项使用工具:BOOTICE 操作过程:打开BOOTICE软件,选择物理磁盘,选择欲操作的目标磁盘,点击分区管理,弹出分区管理的窗口,点击分配盘符,为ESP分区分配一个盘符,点击确定选择UEFI,点击修改启动序列,点击添加按钮,菜单标题填写:CLOVER,选择启动文件,在打开的窗口里选择ESP分区下的目录\EFI\CLOVER\CLOVERX64.EFI,点击保存当前启动项设置 完善驱动小米Pro的专用镜像已经包括了笔记本本身的所有的驱动.由于众所周知的原因,小米板载的INTEL无线网卡是焊死在主板上的,扩展槽又无法添加WIFI无线网卡,所以选择一个外置的USB无线网卡是种无奈之举. USB无线网卡及安装驱动程序补充 EFI下载/更新：https://github.com/daliansky/XiaoMi-Pro 特别鸣谢:@原味菠萝 @(￣(工)￣)_小哥哥 @_ 为本教程提供的部分素材 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:247451054 小米PRO黑苹果高级群137188006 小米PRO黑苹果756750452 小米游戏本吃黑果讨论]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>安装</tag>
        <tag>macOS</tag>
        <tag>小米Pro</tag>
        <tag>XiaoMi-Pro</tag>
        <tag>XiaoMiPro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[借助VoodooHDA自带的getdump找出有效节点和路径]]></title>
    <url>%2FWith-VoodooHDA-comes-getdump-find-valid-nodes-and-paths.html</url>
    <content type="text"><![CDATA[借助VoodooHDA自带的getdump找出有效节点和路径声卡驱动了,音量调节的图标也显示正常,就是不发声怎么办如果您的声卡使用了AppleALC,也注入了正确的ID后不发声怎么办呢?这个问题就出现在有效节点和路径不正确上面.所谓条条大路通罗马,我们总不能在同一棵树上吊死吧.现在可以请出VoodooHDA[教程]万能声卡驱动程序下载链接了,说它万能是不正确的,如果它万能了估计就没AppleALC啥事儿了吧. VoodooHDA Clover版安装教程你需要有现成的Clover，它只会安装VoodooHDA和其他必需的组件来正常运行。 方法一:通过Clover UEFI/ESP驱动请点击下载:VoodooHDA 2.9.0 Clover-V12.dmg这个安装程序会自动安装到/ESP/EFI/CLOVER/kexts/以及下面的目录里10.14/10.13/10.12/10.11/10.10/10.9/10.8/10.7/10.6安装目录取决于你安装的macOS系统决定.**这个驱动将通过Clover加载而不需要安装到/System/Library/Extensions/,同时它也不会删除系统自带的AppleHDA.kext,您甚至无需备份/Others/AppleALC.kext** 方法二:Clover传统模式你也可以安装VoodooHDA.kext内核扩展程序到/EFI/Clover/kexts/10.14/10.1310.12/10.11/10.10/10.9/10.8/10.7/10.6这个驱动将通过Clover加载. 方法三: 经典方法您也可以选择10.6到10.12的Clasic方法，这将在系统库扩展上安装VoodooHDA.kext + AppleHDADisabler.kext这将在应用程序上安装VoodooHdaSettingsLoader.app，在Library / PreferencePanes上安装VoodooHDA.prefPane在这两种方法中，在usr/local/bin/getdump上安装getdump。注意：对于所有OS X系统，VoodooHDA.prefPane安装在Library / PreferancesPanes中 视频教程请点击下方1⟱[ getdump用法这里可以借助VoodooHDA自带的应用程序:getdump,使用方法:打开终端,输入命令:123sudo cp ~/Downloads/getdump /usr/local/bin # 将getdump命令复制到/usr/local/bin目录下sudo chmod +x /usr/local/bin/getdump # 为getdump添加执行权限getdump &gt; ~/Desktop/voodoo_dump.txt用它可以生成一份voodoo_dump.txt的文件,里面会有两段以DUMPING Playback/Record Paths开头的文字描述,这里面即包括了有效节点,同时也包括了有效的路径从上面的两张截图中,可以将有效的节点和路径整理出下面的表格:有效节点10进制设备名称路径0x1420Speaker out20-&gt;12-&gt;20x2133HP out33-&gt;13-&gt;30x1925Headset Mic in8-&gt;35-&gt;24 8-&gt;35-&gt;29备用0x1218Internal Mic in9-&gt;34-&gt;18 9-&gt;34-&gt;29备用有了这个表格,再结合configdata,找出有效的ID,编译AppleALC,注入ID并使用声卡驱动. 备注该种方法摘自使用AppleALC声卡仿冒驱动AppleHDA的正确姿势的部分内容,之所以单独发布就是想让更多的人看到 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>声卡仿冒</tag>
        <tag>VoodooHDA</tag>
        <tag>getdump</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS下使用dd命令制作Ubuntu安装USB盘]]></title>
    <url>%2FMacOS-use-the-dd-command-to-make-Ubuntu-install-USB-disk.html</url>
    <content type="text"><![CDATA[MacOS下使用DD命令制作Ubuntu Linux启动USB盘:下载Ubuntu Linux镜像,可以选择国内开源镜像站点下载:网易 搜狐 阿里云如果你只是想通过Linux提取codec的话,可以随便下载个旧的版本即可,比如这个ubuntu 14.04.5LTS,如果想做为日后的生产力工具的话,我推荐你下载最新发布的ubuntu 17.10制作Ubuntu Linux安装盘Windows下请使用工具UltraISO,方法略macOS下制作过程:插入U盘,确定设备名,方法为打开磁盘工具,选择U盘,可以看到U盘下面有两个分区:disk4s1和disk4s2,那么U盘的设备名就是:disk4当然最简单的方法还是直接使用命令查看:diskutil list,输出的信息为:12345/dev/disk4 (internal, physical): #: TYPE NAME SIZE IDENTIFIER 0: Apple_partition_scheme *2.0 GB disk4 1: Apple_partition_map 4.1 KB disk4s1 2: Apple_HFS 2.4 MB disk4s2这个disk4就是你要操作的设备名,后面我们会用到它卸载U盘,准备写入镜像,输入命令:diskutil umountDisk disk4 # 卸载U盘使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上,操作之前我有必要提醒各位小白,万一你不小心输入错了设备名,那么你连哭的机会都没有,因为dd是按扇区直接物理写入磁盘,别到时候找不到数据了再悔不当初没有认真看到这段文字1sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m命令输入完后,请仔细认真检查下,尤其是of=/dev/disk4这里,再三确认后回车执行,输入用户密码后请耐心等待6-7分钟,写盘速度取决于你的U盘,镜像恢复的过程中不会有任何的文字输出,U盘写入成功后会显示下面类似的输出信息:1234567~ % diskutil umountDisk disk4Unmount of all volumes on disk4 was successful~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1mPassword:1431+1 records in1431+1 records out1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec)我的U盘竟然写了906秒(15分钟),我先找个地方哭会儿去同时系统会弹出一个错误的窗口,显示类似的信息:那是因为Linux的分区格式是ext,在macOS系统下无法识别才会报错,但是其实一个支持UEFI引导的Ubuntu Linux 17.10启动U盘已经制作成功了.点击Ignore忽略或者Eject退出U盘现在您可以使用这个新制作的Ubuntu Linux安装U盘引导Linux快乐地玩耍啦 收工喽 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>USB</tag>
        <tag>Ubuntu</tag>
        <tag>Linux</tag>
        <tag>dd</tag>
        <tag>diskutil</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用HIDPI解决睡眠唤醒黑屏、花屏及连接外部显示器的正确姿势]]></title>
    <url>%2FUse-HIDPI-to-solve-sleep-wake-up-black-screen%2C-Huaping-and-connect-the-external-monitor-the-correct-posture.html</url>
    <content type="text"><![CDATA[前言经常会有网友反馈说自己的显示器黑屏或者花屏,早期的方式是注入EDID可有效解决类似问题.经常摸索后发现打开显示器的HIDPI高分辨率支持的同时可有效去掉这种现象,同时这种操作也会减少或者消除出现8个苹果的概率 教程开始 提取EDID使用工具DarwinDumper操作步骤：打开 DarwinDumper，点击Choose，选择保存位置。可以将生成的文件保存到桌面点击Deselect All Dumps,取消所有的选择项勾选右侧的EDID点击Run按钮,生成EDID.BIN,保存于桌面生成的新目录中生成的HTML报告如下:如果选择Select All Dumps再按Run它会生成一份完整的系统信息,类似于WINDOWS下面的AIDA64导出的详细信息 修正EDID及打开HIDPI显示支持 目的:通过此操作可有效解决开机内屏黑屏/花屏,显示器睡眠唤醒黑屏/花屏,可直接连接外部显示器备注:部分显卡需要修正显示器接口数据,可通过Clover打补丁实现 使用工具:FixEDID 操作步骤:打开FixEDID,点击Open EDID binary file,选择上面生成的EDID.BIN,这个文件位于~/Desktop/DarwinDumperxxx依次打开EDID,EDID的目录中存在三种格式的文件,请选择打开EDID.bin根据自己的显示器的分辨率选择16:9或者16:10,我的显示器是15.6寸,分辨率为1920x1080,长宽比为16:9,所以我需要将插图中的16:10通过下拉菜单选择调整为16:9,如下图其中:前面的16:9是程序自动检测出的长宽比,后面的16:9通过下拉菜单选择,保持前后一致添加HIDPI高分辨率:请根据个人喜好添加,我通常会添加的分辨率如下:3200x1800 2880x1620 1920x1080 1600x900 1440x810 点击Make按钮,会自动在桌面生成一个新目录,比如我的目录为:DisplayVendorID-dae将该目录复制到显示器设备描述目录下,打开终端,输入命令:1sudo cp -R ~/Desktop/DisplayVendorID-dae /System/Library/Displays/Contents/Resources/Overrides 如何修改分辨率使用工具:RDM其中:分辨率后边带有闪电符号的即为HIDPI高分辨率 另一种一键开启HIDPI并注入EDID的方法 特别感谢冰水加劲Q提供此一键命令可开启接近原生的HIDPI设置，不需要RDM软件即可在系统显示器设置中设置双击安装命令即可进入设置，可选择安装或卸载效果：备注:此方法的分辨率是写死的,某些高分屏需要单独设备 收工 关于打赏您的支持就是我更新的动力!如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EDID</tag>
        <tag>花屏</tag>
        <tag>黑屏</tag>
        <tag>HIDPI</tag>
        <tag>睡眠唤醒</tag>
        <tag>内屏黑屏</tag>
        <tag>fixEDID</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用AppleALC声卡仿冒驱动AppleHDA的正确姿势]]></title>
    <url>%2FUse-AppleALC-sound-card-to-drive-the-correct-posture-of-AppleHDA.html</url>
    <content type="text"><![CDATA[大纲,写作中 前言经常给网友仿冒声卡驱动, 一直都没有将过程写下来,鉴于每天会有许多人问如何仿冒声卡,就想将过程记录下来,供大家参考学习 提取codec 通过CLOVER提取codec操作方法：CLOVER v2.4k r4886或者以上，CLOVER下载链接在安装CLOVER时请勾选AudioDex-64.efiCLOVER引导界面，按F8快捷键，它会在EFI/CLOVER/misc目录下生成以HdaCodec开头的文件，其中的HdaCodec#x (Realtek ALCxxx).txt就是你需要提取的codec 通过linux提取codec 制作Ubuntu Linux启动U盘:下载Ubuntu Linux镜像,可以选择国内开源镜像站点下载:网易 搜狐 阿里云如果你只是想通过Linux提取codec的话,可以随便下载个旧的版本即可,比如这个ubuntu 14.04.5LTS,如果想作为日后的生产力工具的话,我推荐你下载最新发布的ubuntu 17.10 制作Ubuntu Linux安装盘Windows下请使用工具UltraISO,方法略macOS下制作过程:插入U盘,确定设备名,方法为打开磁盘工具,选择U盘,可以看到U盘下面有两个分区:disk4s1和disk4s2,那么U盘的设备名就是:disk4当然最简单的方法还是直接使用命令查看:diskutil list,输出的信息为:123456 /dev/disk4 (internal, physical):#: TYPE NAME SIZE IDENTIFIER0: Apple_partition_scheme *2.0 GB disk41: Apple_partition_map 4.1 KB disk4s12: Apple_HFS 2.4 MB disk4s2这个disk4就是你要操作的设备名,后面我们会用到它卸载U盘,准备写入镜像,输入命令:1diskutil umountDisk disk4 # 卸载U盘使用dd命令将下载的Ubuntu Linux镜像恢复到U盘上,操作之前我有必要提醒各位小白,万一你不小心输入错了设备名,那么你连哭的机会都没有,因为dd是按扇区直接物理写入磁盘,别到时候找不到数据了再悔不当初没有认真看到这段文字1sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1m命令输入完后,请仔细认真检查下,尤其是of=/dev/disk4这里,再三确认后回车执行,输入用户密码后请耐心等待6-7分钟,写盘速度取决于你的U盘,镜像恢复的过程中不会有任何的文字输出,U盘写入成功后会显示下面类似的输出信息:1234567~ % diskutil umountDisk disk4Unmount of all volumes on disk4 was successful~ % sudo dd if=/Users/sky/Downloads/ISO/ubuntu-17.10-desktop-amd64.iso of=/dev/disk4 bs=1mPassword:1431+1 records in1431+1 records out1501102080 bytes transferred in 906.101477 secs (1656660 bytes/sec)我的U盘竟然写了906秒(15分钟),我先找个地方哭会儿去*同时系统会弹出一个警告窗口,显示类似的信息:那是因为Linux的分区格式是ext,在macOS系统下无法识别才会报错,但是其实一个支持UEFI引导的Ubuntu Linux 17.10启动U盘已经制作成功了.点击Ignore忽略或者Eject退出U盘现在您可以使用这个新制作的Ubuntu Linux安装U盘引导Linux去提取codec 提取codec开机按引导设备快捷键F12或者F8进入引导设备选单,选择Ubuntu Linux所在的USB盘回车出现Ubuntu Linux的引导界面,选择Try Ubuntu without installing,该选项可以在不安装的情况下试用Ubuntu回车后稍候会进入Ubuntu桌面:按组合键CTRL+ALT+t打开终端,输入以下命令:123456cd ~/Desktop/ # 进入用户桌面cp /proc/asound/card0/codec* . # 将codec开头的文件复制到当时位置sudo cp -R /sys/firmware/acpi/tables . # 将acpi/tables目录复制到当时位置,tables目录包括了全部的DSDT和SSDTls -l # 列表sudo chown -R ubuntu:ubuntu * # 将当前目录下所有文件及目录所有人修改为ubuntuls -l # 列表显示输出信息如下:将桌面上的codec开头的文件和tables目录复制到LINUX以外的支持写入的盘符下,Linux下面的工作已经完成,您可以继续试用或者重启/关机. 整理有效节点使用到的工具：verbit.sh,下载链接用法: verbit.sh codec#0,它会生成如下显示的信息:123456789101112131415161718192021222324252627282930Verbs from Linux Codec Dump File: codec#0Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256) Jack Color Description Node PinDefault Original Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d01 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170140 01471c40 01471d01 01471e17 01471f90 1/8 Black Speaker at Ext Rear 24 0x18 0x411111f0 01871cf0 01871d11 01871e11 01871f41 1/8 Black Speaker at Ext Rear 25 0x19 0x411111f0 01971c10 01971d20 01971e81 01971f02 1/8 Black Speaker at Ext Rear 26 0x1a 0x411111f0 01a71cf0 01a71d11 01a71e11 01a71f41 1/8 Black Speaker at Ext Rear 27 0x1b 0x411111f0 01b71cf0 01b71d11 01b71e11 01b71f41 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c2d 01d71d9a 01d71e77 01d71f40 1/8 Black Speaker at Ext Rear 30 0x1e 0x411111f0 01e71cf0 01e71d11 01e71e11 01e71f41 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f02-------------------------------------------------------------------------------------------------------- Jack Color Description Node PinDefault Modified Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d00 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170120 01471c20 01471d00 01471e17 01471f90 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c40 01d71d90 01d71e77 01d71f40 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f01--------------------------------------------------------------------------------------------------------Modified Verbs in One Line: 01271c70 01271d00 01271ea6 01271f90 01371c00 01371d00 01371e00 01371f40 01471c20 01471d00 01471e17 01471f90 01d71c40 01d71d90 01d71e77 01d71f40 02171c30 02171d10 02171e21 02171f01--------------------------------------------------------------------------------------------------------如果你希望将输出结果保存下来,可以将命令改为:1verbit.sh codec#0 &gt; ALC256_dump.txt这个ALC256_dump.txt就是上面显示的输出信息,你可以使用其它的文字编辑器打开它.重要的信息不能漏掉了,后面我们在编译声卡驱动的时候会经常用到它们:1Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256)其中的:名称解释Codec: Realtek ALC3246是告诉了你的声卡型号是ALC3246(ALC256)Address: 0会告诉你生成configdata的数据的前缀是0,比如上面显示输出信息最后一行的Modified Verbs in One Line:后面所有的数据中,每组数据的第一位就是这个 0 ,如果Address: 2,那么每组数据的第一位就是 2 ,这个后面我们会用到它DevID: 283902550 (0x10ec0256)283902550是0x10ec0256的10进制值,0x10ec 是指vendorID(芯片供应商ID),是REALTEK的设备标识,0256是指型号,去掉前面的0,您的声卡型号就是:ALC256过去的教程会告诉你,通过运行verbit.sh整理出来的节点是:12318 0x12 Mic at Int20 0x14 Speaker at Int33 0x21 HP Out at Ext Front至于上面输出信息里显示的0x13 0x1d都是无效的节点.而且它只有三个有效的节点,我的声卡ALC256是用于笔记本,按理说它至少还应该存在另一个Mic Ext的节点,我需要找出它来.看来使用传统的方法已经无法满足我的求知欲了.既然使用Linux可以提取codec,那么有没有可能 通过Linux找出有效的节点呢?为了测试我的声卡存在第四个节点,我需要找出耳机的Mic输入节点,于是乎重新引导进入Linux,插上耳机,它弹出了这个窗口:这三个选项的意思是让我选择声音设备,既然我希望找出耳机麦克风的输入,我就选择了中间带有耳麦的图标进入Sound Settings,点击 Input,选择Headset Microphone,调节Input volume,对着耳麦说话,发现有输入电平了,再切换到内置麦克风Internal Microphone,也有输入电平,那么至少说明我的声卡功能是完整的,至少在Linux下它工作的很好.测试结果已经出来了,我想要知道耳麦的有效节点是什么,使用组合键CTRL+ALT+t打开终端,输入命令:dmesg看看它会有什么变化,结果我就看到了下面的文字:12345678[ 5.040591] snd_hda_codec_realtek hdaudioC0D0: autoconfig for ALC3246: line_outs=1 (0x14/0x0/0x0/0x0/0x0) type:speaker[ 5.040593] snd_hda_codec_realtek hdaudioC0D0: speaker_outs=0 (0x0/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: hp_outs=1 (0x21/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: mono: mono_out=0x0[ 5.040596] snd_hda_codec_realtek hdaudioC0D0: inputs:[ 5.040598] snd_hda_codec_realtek hdaudioC0D0: Headset Mic=0x19[ 5.040599] snd_hda_codec_realtek hdaudioC0D0: Headphone Mic=0x1a[ 5.040600] snd_hda_codec_realtek hdaudioC0D0: Internal Mic=0x12我不想看到其它的输出信息,我只需要得到我想要的信息,于是将命令改为:123456789sky@sky-Inspiron-7560:~$ dmesg | grep snd_hda_codec_realtek[ 5.040591] snd_hda_codec_realtek hdaudioC0D0: autoconfig for ALC3246: line_outs=1 (0x14/0x0/0x0/0x0/0x0) type:speaker[ 5.040593] snd_hda_codec_realtek hdaudioC0D0: speaker_outs=0 (0x0/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: hp_outs=1 (0x21/0x0/0x0/0x0/0x0)[ 5.040595] snd_hda_codec_realtek hdaudioC0D0: mono: mono_out=0x0[ 5.040596] snd_hda_codec_realtek hdaudioC0D0: inputs:[ 5.040598] snd_hda_codec_realtek hdaudioC0D0: Headset Mic=0x19[ 5.040599] snd_hda_codec_realtek hdaudioC0D0: Headphone Mic=0x1a[ 5.040600] snd_hda_codec_realtek hdaudioC0D0: Internal Mic=0x12得到的输出结果跟上面的相同,于是我发现了在Linux下我的声卡的有效节点分别为:0x14 Speaker out0x21 HP out0x19 Headset Mic in0x1a Headphone Mic in0x12 Internal Mic in暂且不讨论我的声卡是几节点,我发现通过linux完全可以得出声卡的有效节点,而且这种方式好像也不需要使用什么专用的工具,只是在linux下面通过内部命令dmesg无意中就被我发现了声卡中最挠头的找有效节点的打怪秘籍,这种方法在整个Hackintosh社区里还没见有人用过.看来这跟我之前使用linux经常会通过dmesg排错的使用习惯是分不开的,这里要由衷地给自己点一个大大的 赞在这个特别的日子里11.11,没有陪女朋友的小伙伴们,都可以使用我刚get到的新技能愉快地打怪升级啦!暂更于此,做个记号 2017年11月11日继续更新先将节点整理成一个表格,这个表格里会包括之前整理出的数据有效节点10进制设备名称0x1420Speaker out0x2133HP out0x1925Headset Mic in0x1a26Headphone Mic in0x1218Internal Mic in之所以加上转换后的10进制,就是为了以后制作pathmap做准备 整理有效路径使用codecgraph生成pathmap图命令如下:123$ codecgraph codec\#0Codec: Realtek ALC3246Generating codec#0.svg如果出现error: dot executable not found (did you install graphviz?)的错误提示的话,那么还需要执行下面的动作,打开终端,输入命令:1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" # 安装brew安装brew的过程中会提醒你安装Xcode Command Tools,请选择yes.安装完brew之后,继续执行:1brew install graphviz # 安装codecgraph所需要的依赖程序这个生成的codec#0.svg就是声卡的pathmap,使用Sketch.app打开它是不是看了头老大?没错,我刚开始看的时候也是一头的雾水,看多了后就会总结出经验来还记得我们在前面整理出的有效节点吧?!还是以我的声卡为例,上文中我已经整理出5个节点,按照顺序来:0x14,这个是Speaker的节点,也就是喇叭,我们也俗称为外放,如果想让它正确地发声,就需要看看跟它连接的节点都有哪些,在图片里找到0x14位于图片的最下方,我把它放大下:通过观察我们会发现,0x14与0x02连接,转换成10进制就是20-&gt;2,同样的,0x21与0x03连接,转换成10进制就是33-&gt;3,我们把它放到表格中有效节点10进制设备名称路径0x1420Speaker out20-&gt;20x2133HP out33-&gt;30x1925Headset Mic in0x1a26Headphone Mic in0x1218Internal Mic in怎么样?也没想像的那么复杂吧?两个输出设备的节点和路径已经整理出来,下一步,我们要把输入设备和节点整理出来再来看图片的上半部,最右侧的0x08和0x09是两个声音输入的节点,0x23和0x22是两个混音设备,最前方是设备节点,这个就是输入设备的路径.我的声卡的0x12声音输入路径包括了3个节点;为了便于理解,被我圈起来的红线部分就是0x12(Mic in)的路径(pathmap),8-&gt;35-&gt;18就是路径,照样还是要将数据放到表格里有效节点10进制设备名称路径0x1420Speaker out20-&gt;20x2133HP out33-&gt;30x1925Headset Mic in0x1a26Headphone Mic in0x1218Internal Mic in8-&gt;35-&gt;18还记得文章前面通过linux找出来的有效节点不?我的耳麦可是支持输入的,节点也找出来了,是0x19(Headset Mic in),我需要将路径找出来,我发现0x19同时连接了两个节点:0x23和0x22,相应地路径为:8-&gt;35-&gt;25和9-&gt;34-&gt;25,顺手也把0x1a的路径也整理出来备用,将这两组数据补充进表格里有效节点10进制设备名称路径0x1420Speaker out20-&gt;20x2133HP out33-&gt;30x1925Headset Mic in8-&gt;35-&gt;25 9-&gt;34-&gt;250x1a26Headphone Mic in8-&gt;35-&gt;26 9-&gt;34-&gt;260x1218Internal Mic in8-&gt;35-&gt;18至于0x1a是否有效暂且放到一边,一个包括了有效节点/设备名称/路径的表格就整理完成了,这里***需要强调的一点是:路径数值使用10进制*** 整理ConfigDataConfigData的获得有两种方法:这两种方法分别为:通过codec里面的Pin Default提取以及通过PinConfigs提取,然后修正ConfigData.下面我们将分别介绍这两种提取方法 通过PinConfigs提取ConfigDataConfigData数据位于PinConfigs.kext/Contents/Info.plist里,PinConfigs.kext作为AppleALC插件被加载.用到的工具:Plist Editor Pro.app还是以我的ALC256为例:打开Info.plist后,使用组合快捷键⌘+f打开搜索: ALC256 或者 283902550 ,它会直接定位到你需要查找的数据位置,再按⌘+g,将相同的字符串全部搜索完毕,直到它又跳转到第一个搜索结果的位置,结果如下图:ALC256的ConfigData的数据有三组,分别对应的LayoutID为:13 28 56将这三组ConfigData复制出来:id:1301271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 02171C50 02171D10 02171E2B 02171F02 01470c02id:2801471C50 01471D00 01471E17 01471F90 01470c02 01A71C30 01A71D00 01A71EA0 01A71F90 02171C20 02171D10 02171E21 02171F00id:5601271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 01A71C40 01A71D10 01A71E81 01A71F02 01D71CF0 01D71D11 01D71E11 01D71F41 02171C50 02171D10 02171E2B 02171F02 01470c02 02170c02这么看起来是杂乱无章的,我们将它格式化一下,每个节点一行,四组数据:id:13123401271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01971C30 01971D10 01971E8B 01971F02 02171C50 02171D10 02171E2B 02171F02 01470c02id:2812301471C50 01471D00 01471E17 01471F90 01470c02 01A71C30 01A71D00 01A71EA0 01A71F90 02171C20 02171D10 02171E21 02171F00id:5612345601271C10 01271D00 01271EA6 01271F90 01471C20 01471D00 01471E17 01471F90 01470c02 01971C30 01971D10 01971E8B 01971F02 01A71C40 01A71D10 01A71E81 01A71F02 01D71CF0 01D71D11 01D71E11 01D71F41 02171C50 02171D10 02171E2B 02171F02 02170c02从中我们可以发现:id:13为四行四节点,节点为:0x12 0x14 0x19 0x21id:28为三行三节点,节点为:0x14 0x1A 0x21id:56为六行六节点,节点为:0x12 0x14 0x19 0x1A 0x1D 0x21现在有个问题摆在你们的面前,我上面明明刚说过每个节点为四组数据,那为什么在0x14和0x21的节点后面又多出来一组数据呢?这组数据又有什么作用呢?原来秘密都藏在codec里面,它定义了某些输出设备具有EAPD,比如0x14节点的数据:1234567891011121314151617Node 0x14 [Pin Complex] wcaps 0x40058d: Stereo Amp-Out Control: name="Speaker Playback Switch", index=0, device=0 ControlAmp: chs=3, dir=Out, idx=0, ofs=0 Amp-Out caps: ofs=0x00, nsteps=0x00, stepsize=0x00, mute=1 Amp-Out vals: [0x00 0x00] Pincap 0x00010014: OUT EAPD Detect EAPD 0x2: EAPD Pin Default 0x90170120: [Fixed] Speaker at Int N/A Conn = Analog, Color = Unknown DefAssociation = 0x2, Sequence = 0x0 Misc = NO_PRESENCE Pin-ctls: 0x40: OUT Unsolicited: tag=00, enabled=0 Power states: D0 D1 D2 D3 EPSS Power: setting=D0, actual=D0 Connection: 1 0x02具有EAPD的节点需要添加参数SET_EAPD_BTLENABLE,转换成数值为0x70c,完整的数值为:Address+节点+70c+02,即:01470c02,它通过hda-verb可以执行,比如CodecCommander就是调用的hda-verb执行的命令.更多的hda-verb参数请参考我之前的文章:hda-verb参数详表这里我教大家一个简单判断EAPD节点的方法:那就是它通常会位于Speaker Out和HP Out这两个输出节点上.至于其它教程提到过的关于01470c02是组神奇的代码,可以让外放发声的说法是错误的,它可能刚好声卡的Speaker Out的输出节点是0x14而已.如果您的Speaker Out输出节点是0x16,那么就需要把它修改为01670c02,当然要遵守这个公式:Address+节点+71c+02本节教程先更新到这里 11-13-2017 10:25PM续更另外一种找出EAPD节点的方法:使用工具node_dump.sh,它会显示出每个节点的信息,包括EAPD输出,详细的用法以后再补充上.说了半天,也只说了一个01470c02是干什么用的,其它的四组数据都分别代表什么呢?这个话题如果展开讲的话,没个一两天是说不明白的.接下来的部分就会介绍到这四组数据是怎么整理出来的. 通过codec里面的Pin Default提取并整理将使用verbit.sh整理出来的ALC256_dump.txt重新打开:1234567891011121314151617Verbs from Linux Codec Dump File: codec#0Codec: Realtek ALC3246 Address: 0 DevID: 283902550 (0x10ec0256) Jack Color Description Node PinDefault Original Verbs--------------------------------------------------------------------------------------------------------Digital Unknown Mic at Int N/A 18 0x12 0x90a60170 01271c70 01271d01 01271ea6 01271f90Unknown Unknown Line Out at Ext N/A 19 0x13 0x40000000 01371c00 01371d00 01371e00 01371f40 Analog Unknown Speaker at Int N/A 20 0x14 0x90170140 01471c40 01471d01 01471e17 01471f90 1/8 Black Speaker at Ext Rear 24 0x18 0x411111f0 01871cf0 01871d11 01871e11 01871f41 1/8 Black Speaker at Ext Rear 25 0x19 0x411111f0 01971c10 01971d20 01971e81 01971f02 1/8 Black Speaker at Ext Rear 26 0x1a 0x411111f0 01a71cf0 01a71d11 01a71e11 01a71f41 1/8 Black Speaker at Ext Rear 27 0x1b 0x411111f0 01b71cf0 01b71d11 01b71e11 01b71f41 Analog Pink Modem Hand at Ext N/A 29 0x1d 0x40779a2d 01d71c2d 01d71d9a 01d71e77 01d71f40 1/8 Black Speaker at Ext Rear 30 0x1e 0x411111f0 01e71cf0 01e71d11 01e71e11 01e71f41 1/8 Black HP Out at Ext Front 33 0x21 0x02211030 02171c30 02171d10 02171e21 02171f02--------------------------------------------------------------------------------------------------------将数据整理成如下的样式:[Fixed]是内部设备[Jack]是通过插孔进行连接的外部设备[N/A]是其它未知设备12345678910111213Node PinDefault Description ----------------------------------------------------------0x12 0x90a60170 [Fixed] Mic at Int 0x13 0x40000000 [N/A] Line Out at Ext N/A 0x14 0x90170140 [Fixed] Speaker at Int 0x18 0x411111f0 [N/A] Speaker at Ext Rear 0x19 0x411111f0 [N/A] Speaker at Ext Rear 0x1a 0x411111f0 [N/A] Speaker at Ext Rear 0x1b 0x411111f0 [N/A] Speaker at Ext Rear 0x1d 0x40779a2d [N/A] Modem Hand at Ext N/A0x1e 0x411111f0 [N/A] Speaker at Ext Rear 0x21 0x02211030 [Jack] HP Out at Ext Front ----------------------------------------------------------将PinDefault进行小端转换little-endian,这里借用一张紫米教程里面的图片进行小端转换的理解:就是把PinDefault的数据两两对调,比如:0x12节点的[Fixed] Mic at Int原始数据为:0x90a60170,去掉前面的0x,变成90 a6 01 70,最前面的90跑到了最后,最后的70又跑到了最前面,中间的a6和01再对调下,就变成了70 01 a6 90.整理后,变成如下的格式:1234567891011Node c d e f Description12 70 01 a6 90 [Fixed] Mic at Int 13 00 00 00 40 [N/A] Line Out at Ext N/A 14 40 01 17 90 [Fixed] Speaker at Int 18 f0 11 11 41 [N/A] Speaker at Ext Rear 19 f0 11 11 41 [N/A] Speaker at Ext Rear 1a f0 11 11 41 [N/A] Speaker at Ext Rear 1b f0 11 11 41 [N/A] Speaker at Ext Rear 1d 2d 9a 77 40 [N/A] Modem Hand at Ext N/A1e f0 11 11 41 [N/A] Speaker at Ext Rear 21 30 10 21 02 [Jack] HP Out at Ext Front下一步,我们要对数据进行修正,让它看起来更像APPLE. 修正PinDefault,并生成ConfigData上一节我们只是把数据进一步地整理出来,并进行了格式化,我们并没有对数据进行修正.本节我们就开始进行PinDefault的修正,先上一张我整理出来的表格:前面我提到过通过Linux找到的节点0x19,它在Linux下面显示的设备为Headset Mic,在上一节中我们整理出的0x19的设备为:[N/A] Speaker at Ext Rear , PinDefault值为:f0 11 11 41,通过上表我们得知,这个端口是被屏蔽掉的,就是不起作用的节点.现在我们希望它能正常工作,我的想法是把它修正为:[Jack] Mic at Ext,一个可以正常工作的外部麦克输入设备,结合上面的表格,我将f0 11 11 41修改为:70 20 a1 02.由于我的耳机插孔只有一个,也就是俗称的二合一插孔,我希望在上面的外麦克工作不正常的情况下,可以将耳麦和耳机输出定义成组合插孔(2in1),上表中Connection Type的连接类型中,正好有个B=Combination,它的意思就是:组合,我需要同时修正耳麦和耳机的数值:Mic at Ext : f0 11 11 41-&gt;70 20 ab 02HP Out Ext : 30 10 21 02-&gt;30 10 2b 02 屏蔽无效节点:f0 00 00 40屏蔽掉无效的节点,避免产生杂音和底噪,更详细的描述请见其它问题0x1d的节点为无效节点,所以必须把它屏蔽起来,为了让它更符合APPLE的规范,我们使用f0 00 00 40来屏蔽,包括其它的不用的节点.修正后的数据为:1234567891011Node c d e f Description12 70 01 a6 90 [Fixed] Mic at Int 13 f0 00 00 40 [N/A] Line Out at Ext N/A 14 40 01 17 90 [Fixed] Speaker at Int 18 f0 00 00 40 [N/A] Speaker at Ext Rear 19 70 10 ab 02 [Jack] Mic at Ext 1a f0 00 00 40 [N/A] Speaker at Ext Rear 1b f0 00 00 40 [N/A] Speaker at Ext Rear 1d f0 00 00 40 [N/A] Modem Hand at Ext N/A1e f0 00 00 40 [N/A] Speaker at Ext Rear 21 30 10 2b 02 [Jack] HP Out at Ext Front现在, 我们可以生成最终的ConfigData了,ConfigData的计算公式为:12345Final Config:Address + Node + 71c +【c】Address + Node + 71d +【d】Address + Node + 71e +【e】Address + Node + 71f +【f】这里的c d e f就是上面整理出来的2位数值我的ALC256的Address值为0,现在我将节点0x12的ConfigData值通过上面的公式整理后得出:101271c70 01271d01 01271ea6 01271f90相应地,其它的节点整理出来的数据如下:1234567891001271c70 01271d01 01271ea6 01271f9001371cf0 01371d00 01371e00 01371f4001471c40 01471d01 01471e17 01471f90 01470c0201871cf0 01871d00 01871e00 01871f4001971c70 01971d10 01971eab 01971f0201a71cf0 01a71d00 01a71e00 01a71f4001b71cf0 01b71d00 01b71e00 01b71f4001d71cf0 01d71d00 01d71e00 01d71f4001e71cf0 01e71d00 01e71e00 01e71f4002171c30 02171d10 02171e2b 02171f02 02170c02我将编辑的过程做了段视频,方便大家理解.打开Sublime Text.app,按住鼠标中键打开块复制,将c d e f下面的数据块拷贝一份到最下面空白处,在第一列按鼠标中键一下拉到下面,输入Address值0,再把上方的Node下面的数据做块复制,粘贴到0后面,再输入:71c,再将01271做块复制到后面,再分别输入d e f即可.最后在0x14和0x21节点后面添加两组EAPD数据.将上面整理出来的数据去掉每行的硬回车后得到的一组数据就是最终的ConfigData01271c70 01271d01 01271ea6 01271f90 01371cf0 01371d00 01371e00 01371f40 01471c40 01471d01 01471e17 01471f90 01470c02 01871cf0 01871d00 01871e00 01871f40 01971c70 01971d10 01971eab 01971f02 01a71cf0 01a71d00 01a71e00 01a71f40 01b71cf0 01b71d00 01b71e00 01b71f40 01d71cf0 01d71d00 01d71e00 01d71f40 01e71cf0 01e71d00 01e71e00 01e71f40 02171c30 02171d10 02171e2b 02171f02 02170c02到这里,ConfigData的数据就算整理完了. 找出适合你的id这一节里,我们就来一起动手找出最适合你的注入id正确的注入id可以保证您的声卡各项功能都能正常使用,它至关重要,这里给出的方法也是为了进一步验证前面我们所做的工作.到找注入id这一步,您至少已经有了这些数据:声卡基础资料:名称解释Codec: Realtek ALC3246是告诉了你的声卡型号是ALC3246(ALC256)Address: 0会告诉你生成configdata的数据的前缀是0,比如上面显示输出信息最后一行的Modified Verbs in One Line:后面所有的数据中,每组数据的第一位就是这个 0 ,如果Address: 2,那么每组数据的第一位就是 2 ,这个后面我们会用到它DevID: 283902550 (0x10ec0256)283902550是0x10ec0256的10进制值,0x10ec 是指vendorID(芯片供应商ID),是REALTEK的设备标识,0256是指型号,去掉前面的0,您的声卡型号就是:ALC256整理出来的有效节点及路径有效节点10进制设备名称路径0x1420Speaker out20-&gt;20x2133HP out33-&gt;30x1925Headset Mic in8-&gt;35-&gt;25 9-&gt;34-&gt;250x1a26Headphone Mic in8-&gt;35-&gt;26 9-&gt;34-&gt;260x1218Internal Mic in8-&gt;35-&gt;18最终的ConfigData数据:01271c20 01271d01 01271ea6 01271f90 01371cf0 01371d00 01371e00 01371f40 01471c40 01471d01 01471e17 01471f90 01470c02 01871cf0 01871d00 01871e00 01871f40 01971c10 01971d10 01971e8b 01971f02 01a71cf0 01a71d00 01a71e00 01a71f40 01b71cf0 01b71d00 01b71e00 01b71f40 01d71cf0 01d71d00 01d71e00 01d71f40 01e71cf0 01e71d00 01e71e00 01e71f40 02171c30 02171d10 02171e2b 02171f02 02170c02下一步,我们就要将这些数据放进AppleALC相应的位置,让它发挥作用. 下载AppleALC操作步骤:创建AppleALC的本地仓库的克隆版本:使用git命令,更多git命令的用法请参考git使用简易指南:123mkdir ~/git # 在家目录下新建立`git`目录cd ~/git # 进入`git`目录git clone https://github.com/vit9696/AppleALC # 克隆AppleALC到本地或者通过浏览器下载 AppleALC最新版打开AppleALC目录,进入Resources目录,你会发现这里面躺着截止到目前所支持的声卡的全部型号.我的声卡是ALC256,我就点击ALC256为便于理解,我将除了ALC256之外的其它型号的声卡目录全部删除了,它看起来如下图所示:我们会发现该目录下包括了一个定义文件Info.plist,打开Info.plist,你会发现,它定义了一个声卡驱动所需要的数据,CodecID后面的598是ALC256的0x256的10进制数值,CodecName是声卡名称的描述,这里是ALC256(3246),接下来是Files,它分成两部分,一部分是Layouts,它定义声卡设备的布局,另一部分是Platforms,它定义声卡的平台注入,包括有效节点和路径的定义.三个layout开头的文件以及三个Platforms开头的文件,Platforms为路径定义文件.其中layout13.xml.zlib layout28.xml.zlib layout56.xml.zlib就是注入的id,只是你的声卡需要注入的是哪个ID才能获得最佳效果,还需要分析其它的数据. 如何找出适合你的id通过制作几十个声卡仿冒的驱动,我发现找出注入的id还是有些窍门的,比如说我可以通过PinConfigs.kext的Info.plist,将同一型号的声卡的ConfigData都找出来,方法:根据上面整理的声卡基础资料将Address不为0的排除出去剩下的LayoutID里,再通过ConfigData将有效节点的数据留下,无效的排除,这样剩下来的LayoutID也就没几个了最后,通过PlatformsID,找出有效节点及路径,最终确定注入的id需要注意的是,某些型号的声卡的注入id可以是唯一的,也可以是多个,这些都需要通过分析数据进行确认这里插句题外话:之前给群友做声卡仿冒的时候,ALC269和ALC887我都是直接绕路走的,或者让群友用VoodooHDA,或者直接拒绝.现在可以使用排除法,很快就能找到注入的id更新于:11-21-2017 22:30 如何修改layout和Platforms数据上文中我们提到了通过PlatformsID,找出有效节点及路径,最终确定注入的id如何确认路径是否正确,我应该怎么做呢?先打开Platforms文件,需要用到的工具:zlib转换器.app.操作方法:打开zlib转换器.app,把需要解压缩的后缀为.zlib的文件拖进窗口里,按下CONVERT按钮,就会在当前的目录下生成去掉了.zlib后缀的可以编辑的.xml文件了.相应地,当你编辑好了的.xml文件,拖进窗口里,按下CONVERT按钮,会在当前目录下生成.zlib后缀的文件了.使用工具PlistEdit Pro.app打开Platforms56.xml,依次打开PathMap-&gt;0-&gt;0-&gt;0,这里的NodeID就是节点id.为便于理解,我将Mic Int的路径做了说明,如下图显示: 如何新建一个注入id为什么要建立一个全新的layout-id呢?很多时候,我们其实仿冒声卡驱动,只是为了让自己的声卡驱动正常,而通常的做法是找出一个存在的ID,然后整理数据,修改路径和ConfigData,最后编译使用.那如果AppleALC的维护者vit9696更新了源代码怎么办呢?你总不能再重复做一遍驱动吧?或者说你好不容易找人帮你做好了一个驱动程序,然后AppleALc就升级了,旧的驱动无法用到新的系统当中,这个时候你的选择是什么?继续找人帮你做驱动?或者自己动手仿冒?其实最好的方法是:如果你的声卡不存在于AppleALC支持的Codecs列表中,或者其中的某个注入id并不会很好地工作,那么你就需要新建一个注入id编译使用,测试无误后,你甚至还可以将这些修改提交给vit9696,他会将这些更新合并到AppleALC的源代码中,这样以后再有更新你只需要下载个AppleALC的发行版直接使用就好了.上图中,是我给小米Pro制作的全新的ALC298注入ID:99,只要是小米Pro的机型,可以直接注入id:99来驱动你的声卡.如果你想制作属于你的专属声卡注入ID,可添加文章最后的QQ群,进入群内一起讨论. 编译AppleALC使用xcode通过lilu联合编译 注入id 测试 检查AppleALC是否正确加载打开终端,输入命令:1kextstat | grep AppleALC显示内容如下:1234kextstat | grep AppleALC 36 0 0xffffff7f8331b000 0xb0000 0xb0000 as.vit9696.AppleALC (1.2.1) 7CDA2635-8BE4-36E1-B882-8CA3B90284F3 &lt;35 7 5 4 3 2 1&gt;我们可以看到AppleALC驱动已经被正确加载,版本是1.2.1,如果没有内容输出,那么就有可能没有加载.通常这种情况是因为Lilu的版本引起的,可以尝试使用Lilu Debug版本. 检查注入id是否正确打开终端,输入命令:1ioreg -l | grep layout-id显示内容如下:12345678~ % ioreg -l | grep layout-id | | | | "layout-id" = &lt;38000000&gt; | | | | | "IOAudioEngineDeviceDescription" = &#123; "num-internal-mics"=1, "driver digital input gain"=0, "layout-id"=56, "post-processing input gain"=25, "VP-pregain"=25&#125;为了便于讲解,我将内容做了换行处理.其中的&quot;layout-id&quot;=56就是指注入id是 56 ,而&lt;38000000&gt;是56的16进制 检查PinConfigurations使用IORegistryExplorer.app,找到HDEF@1F,3,右侧的PinConfigurations就是最终的四个节点的数值,同时我们发现其它的节点已经不存在了,这样的结果正是我们需要的. 其它问题 解决耳机切换/睡眠唤醒/去除底噪等常见问题经常会有群友在使用AppleALC声卡仿冒驱动程序驱动了声卡后,出现最多的问题就是外放正常,耳机不正常,具体表现为:耳机在插入一半的时候有声音,完全插入后却没有声音的现象;另一种最常见的现象是开机声音正常,睡眠唤醒后无声/出现杂音/有电流声(底噪)/单声道/只有伴奏音,没有人声等等的问题.本节教程就让我们来一起解决这些常见问题,还你一个干净的,没有杂音的声卡驱动.在我们着手解决这些问题之前,需要先说说这些问题是如何产生的:让我们打开电脑,进入MacOS系统后,AppleALC仿冒驱动会成功加载AppleHDA以驱动你的声卡,这个时候声卡通常工作都是正常的.为了证明AppleALC加载后的有效节点的状态,我们需要使用两个工具widget_dump.sh和node_dump.sh,使用方法:打开终端,输入命令:1widget_dump.sh显示的输出信息如下:12345678910111213141516171819202122232425262728293031323334353637sky@skys-MacBookPro ~ widget_dump.shPin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000020 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000040 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000000 # 耳麦 nid = 0x1a --&gt; result 0x00000000 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000000 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x00000000 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000我们可以看到,刚开机没有插入耳机的情况下,只有外放的喇叭和内置的麦克风是工作的,其它所有的节点的数据都是空白的.当我们插入耳机后,再输入命令:1widget_dump.sh显示的输出信息如下:12345678910111213141516171819202122232425262728293031323334353637sky@skys-MacBookPro ~ widget_dump.shPin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000000 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000000 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000020 # 耳麦 nid = 0x1a --&gt; result 0x00000000 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000000 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x000000c0 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000这时我们会发现,之前工作的喇叭和内置麦克风的数据已经发生了变化节点名称外放状态耳机状态0x12内置麦克风(Mic Int)0x000000200x000000000x14喇叭(Speaker Out)0x000000400x000000000x19耳麦(Mic Ext/Line In)0x000000000x000000200x21耳机(HP Out)0x000000000x000000c0通过上面的表格,我们可以发现内部设备和外部设备正常工作的情况下会自动切换.widget_dump.sh是调用hda-verb这个外部命令执行的,hda-verb依赖于CodecCommander,所以请确认你已经加载了CodecCommander CodecCommander 编解码器指挥官CodecCommander用于更新在扬声器或耳机节点上使用给定放大器的HDA（高清晰度音频）编解码器上的EAPD（外部放大器）状态（两者，甚至在某些情况下甚至是额外的）。 在OSX中，EAPD在休眠状态下关闭，因此唤醒机器后音频仍然不起作用。通常情况下，这个外部放大器出现在笔记本电脑和ITX板上，在使用ALC269，ALC665和类似编解码器的机器上最常见。 当机器进入睡眠状态时，功放处于关机状态，在唤醒之后，即使音频正常工作，扬声器/耳机仍然没有声音，因为功放需要发送一个编解码器命令才能启动。最典型的两条命令是:120x19 SET_PIN_WIDGET_CONTROL 0x240x21 SET_UNSOLICITED_ENABLE 0x82其中:SET_PIN_WIDGET_CONTROL是作用于Mic Ext节点,SET_UNSOLICITED_ENABLE是作用于HP Out节点 Pin Widget Control关于Pin Widget Control的描述请参阅英特尔HDA规范 7.3.3.13Enable VRefVerb IDPayload (8 Bits)Response (32 Bits)GetF07h0Bits 31:8 are 0Bits 7:0 are PinCntlSet707hBits 7:0 are PinCntl0PinCntl定义:7654:321:0H-Phn EnableOut EnableIn EnableRsvdVrefEn[2]VRefEn[1:0]/EPTVRefEn 值:VRefEn EncodingVREF Signal Level000bHi-Z001b50%010bGround (0 V)011bReserved100b80%101b100%110b-111bReservedSET_PIN_WIDGET_CONTROL:7654 3210ALC2560x1970724-&gt;0010 0100-&gt;In Enable,VrefEn 80%0x21707C0-&gt;1100 0000-&gt;Headphone Enable,Out EnableSET_PIN_WIDGET_CONTROL命令最终格式为:Address+NodeID+707+Pin-ctls最终的命令为:01970724关于这部分的讨论请参阅Any fix to the Garbled/Distorted Headphone issue?原引:RehabMan对于VrefEn和EPT的部分讨论内容:我也尝试了节点0x19的0x20。 这也工作。 所以不知道在我的情况下是否需要VrefEn或EPT。 但是他们与巫毒有关，所以我使用了这个价值。我没有看过Voodoo是否明确地设置了这些值，或者是复位后的状态结果。我认为我的设置0xC0到0x21也是没有必要的（仍在试验）。 节点0x19不在任何路径图上，所以我对于如何知道节点需要调整有些困惑。 尽管它在Linux转储中有连接到路径图上的其他节点。 进一步造成神秘，它被描述为Linux转储中的外部麦克风插孔。 为什么麦克风上的控件配置会影响耳机，这是一个谜。还要注意，VrefEn和EPT之间有一些奇怪的重叠，这在规范中是不清楚的（它们似乎都使用相同的位）。 例如，将VRefEn设置为001b或010b（50％/地面）将设置标记为“保留”的EPT编码01b / 10b。 它确实说EPT是特定于“关联的数字Pin Widget”，所以也许这个重叠解释了VrefEn不适用于这样的小部件。 它还指出VRefEn的有效值取决于PinCaps，所以推测数字Pin小部件的PinCap不包含任何有效的VRefEn值。如果你沿着这条路走下去，你应该计划阅读大量的东西，让整个过程神秘化。 Unsolicited Response 未经请求的响应关于Unsolicited Response的描述请参阅英特尔HDA规范 7.3.3.14非请求响应控件确定节点是否被允许发送主动提供的响应，以及该标签将用于响应。此控制仅适用于支持主动响应的节点，如Function Group Type参数（第7.3.4.4节）和Audio Widget Capabilities参数（第7.3.4.6节）中所声明的。在获取或设置此控件之前，应该查询节点以确定它是否支持未经请求的响应。Connection Select Control连接选择控制:Verb IDPayload (8 Bits)Response (32 Bits)GetF08h0Bits 31:8 are 0EnableUnsol is bits 7:0Set708hEnableUnsol is bits 7:00EnableUnsol 格式:765:0Enable0Tag设定值是8bits的一个数。记作a7 a6 a5 a4 a3 a2 a1 a0.a7=1，表示enabled。a6=0，没具体应用，不用管。a5-a0，存放tag，需要将tag的值用6为数的二进制值表示tag=1（十进制）=000001（二进制）则a7 a6 a5 a4 a3 a2 a1 a0=10000001a7 a6 a5 a4=1000（二进制）=8（十进制）a3 a2 a1 a0=0001（二进制）=1（十进制）则设定值=81最后加得到的设定值加1，即82SET_UNSOLICITED_ENABLE命令最终格式为:Address+NodeID+708+Unsolicited最终的命令为:02170882目前CodecCommander所起的作用有限,我基本上都忽略了CodecCommander的存在,因为它并不能从根本上解决这些问题.在我完善我的ALC256声卡驱动期间,我还试用过EAPDFix,最后都不得不放弃治疗.直到我遇到了ALCPlugFix,它能解决几乎所有的耳机切换问题. ALCPlugFix能做什么?它可以解决耳机插拔状态的切换它是通过使用命令:hda-verb 0xNode SET_PIN_WIDGET_CONTROL 0xVerbs的方式进行状态切换hda-verb的由来hda-verb是linux下面的alsa-project的一条命令，它的作用是发送HD-audio命令 ALCPlugFix如何使用?将ALCPlugFix同步到本地1git clone https://github.com/daliansky/ALCPlugFix打开ALCPlugFix目录下面的main.m,将包含hda-verb语句的几行修改成如图所示其中0x12是Mic Int节点,0x19是Mic Ext节点,之所以要这么修改,是因为我的ALC256的0x19节点总是无法工作,在插入耳机的时候我希望内置的Mic Int可以工作的同时还可以使用耳机.将XCODE编译生成的ALCPlugFix文件复制到alc_fix目录,然后双击install双击自动安装.command,输入用户密码即可.ALCPlugFix工具下载刚才我前面讲了,ALCPlugFix是依赖于CodecCommander执行的,那我为什么不介绍下CodecCommander的工作原理呢,其实说白了CodecCommander里面通常执行的也是hda-verb 0x19 0x707 0x20之类的语句,只是在睡醒唤醒后CodecCommander已经无法执行hda-verb 0x19 0x707 0x20这样的语句了,而ALCPlugFix却是以守护进程的方式存在于系统中,无论什么时候它都会监听声卡的状态,该切换时它就会发出命令切换,这样就保证了声卡总是可以工作在正确的状态下.基本上所有的耳机睡眠后没有声音的,只需要使用一条命令:hda-verb 0x19 0x707 0x20,就可以让你的耳机出声的.当然前提是你得先加载了CodecCommander这个驱动.估计我写完这段你们看完了还是一头雾水,我教大家一个简单的记法:ALCPlugFix作用于耳机,所以你需要知道自己的两个耳机节点,而0x19是耳麦的麦克风输入节点,只要找对了耳麦的节点,一条命令就可以搞定你的耳机切换. 杂音和底噪的去除在着手解决这个问题之前,让我们先来搞清楚杂音和底噪产生的原因.打开终端,输入命令:1node_dump.sh它会输出很多的信息出来,我们只需要最后面的这组数据:123456789101112131415161718192021222324252627282930313233343536Configuration Default nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x90a60170 # 内置麦克风 nid = 0x13 --&gt; result 0x400000f0 nid = 0x14 --&gt; result 0x90170140 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x400000f0 nid = 0x19 --&gt; result 0x02ab1070 # 耳麦 nid = 0x1a --&gt; result 0x400000f0 nid = 0x1b --&gt; result 0x400000f0 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x400000f0 nid = 0x1e --&gt; result 0x400000f0 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x022b1030 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000这些数据里:0x00000000是无效的节点,0x400000f0是被屏蔽掉的节点.其它的四个有效的节点我做了备注,方便你们看清楚.这些PinConfigurations决定了你的声卡音质.如果你的命令输出信息里面除了有效节点和0x400000f0之外的其它任何格式的数据都会产生杂音和底噪.比如0x40000000或者0x411111f0,这些无效的节点就会一直在起作用,这就好比一个流行乐队里,需要一个架子鼓,一台电钢琴,两个吉他手,再加上一个歌手,如果你生硬地再加进一把小提琴,再弄个竖琴,就会不和谐,就会产生噪音.再让我们搬出widget_dump.sh命令:1widget_dump.sh输出信息如下:123456789101112131415161718192021222324252627282930313233343536Pin Widget Control nid = 0x02 --&gt; result 0x00000000 nid = 0x03 --&gt; result 0x00000000 nid = 0x04 --&gt; result 0x00000000 nid = 0x05 --&gt; result 0x00000000 nid = 0x06 --&gt; result 0x00000000 nid = 0x07 --&gt; result 0x00000000 nid = 0x08 --&gt; result 0x00000000 nid = 0x09 --&gt; result 0x00000000 nid = 0x0a --&gt; result 0x00000000 nid = 0x0b --&gt; result 0x00000000 nid = 0x0c --&gt; result 0x00000000 nid = 0x0d --&gt; result 0x00000000 nid = 0x0e --&gt; result 0x00000000 nid = 0x0f --&gt; result 0x00000000 nid = 0x10 --&gt; result 0x00000000 nid = 0x11 --&gt; result 0x00000000 nid = 0x12 --&gt; result 0x00000000 # 内置麦克风 nid = 0x13 --&gt; result 0x00000000 nid = 0x14 --&gt; result 0x00000000 # 喇叭 nid = 0x15 --&gt; result 0x00000000 nid = 0x16 --&gt; result 0x00000000 nid = 0x17 --&gt; result 0x00000000 nid = 0x18 --&gt; result 0x00000000 nid = 0x19 --&gt; result 0x00000020 # 耳麦 nid = 0x1a --&gt; result 0x00000020 # 无效节点 nid = 0x1b --&gt; result 0x00000000 nid = 0x1c --&gt; result 0x00000000 nid = 0x1d --&gt; result 0x00000020 # 无效节点 nid = 0x1e --&gt; result 0x00000000 nid = 0x1f --&gt; result 0x00000000 nid = 0x20 --&gt; result 0x00000000 nid = 0x21 --&gt; result 0x000000c0 # 耳机 nid = 0x22 --&gt; result 0x00000000 nid = 0x23 --&gt; result 0x00000000 nid = 0x24 --&gt; result 0x00000000我故意在四个有效的节点之外添加了两个无效的节点,为了让大家看清楚一些,这些无效的节点就会工作,它会产生底噪,尤其是戴上耳机,关闭音源,就会听到沙沙沙的声音,也有人说它是电流声,严重时还会产生杂音,包括单声道输出等等.既然我们知道了问题是如何产生的,那么就让我们来消除这些杂音,还原干净的声音.让我们回到整理ConfigData这一章,将有效节点之外的其它节点全部使用f0 00 00 40进行屏蔽. 声卡驱动了,音量调节的图标也显示正常,就是不发声怎么办如果您的声卡使用了AppleALC,也注入了正确的ID后不发声怎么办呢?这个问题就出现在有效节点和路径不正确上面.所谓条条大路通罗马,我们总不能在同一棵树上吊死吧.现在可以请出VoodooHDA[教程]万能声卡驱动程序下载链接了,说它万能是不正确的,如果它万能了估计就没AppleALC啥事儿了吧. VoodooHDA Clover版安装教程你需要有现成的Clover，它只会安装VoodooHDA和其他必需的组件来正常运行。 方法一:通过Clover UEFI/ESP驱动请点击下载:VoodooHDA 2.9.0 Clover-V12.dmg这个安装程序会自动安装到/ESP/EFI/CLOVER/kexts/以及下面的目录里10.14/10.13/10.12/10.11/10.10/10.9/10.8/10.7/10.6安装目录取决于你安装的macOS系统决定.**这个驱动将通过Clover加载而不需要安装到/System/Library/Extensions/,同时它也不会删除系统自带的AppleHDA.kext,您甚至无需备份/Others/AppleALC.kext** 方法二:Clover传统模式你也可以安装VoodooHDA.kext内核扩展程序到/EFI/Clover/kexts/10.14/10.1310.12/10.11/10.10/10.9/10.8/10.7/10.6这个驱动将通过Clover加载. 方法三: 经典方法您也可以选择10.6到10.12的Clasic方法，这将在系统库扩展上安装VoodooHDA.kext + AppleHDADisabler.kext这将在应用程序上安装VoodooHdaSettingsLoader.app，在Library / PreferencePanes上安装VoodooHDA.prefPane在这两种方法中，在usr/local/bin/getdump上安装getdump。注意：对于所有OS X系统，VoodooHDA.prefPane安装在Library / PreferancesPanes中 视频教程请点击下方1⟱[ getdump用法这里可以借助VoodooHDA自带的应用程序:getdump,使用方法:打开终端,输入命令:123sudo cp ~/Downloads/getdump /usr/local/bin # 将getdump命令复制到/usr/local/bin目录下sudo chmod +x /usr/local/bin/getdump # 为getdump添加执行权限getdump &gt; ~/Desktop/voodoo_dump.txt用它可以生成一份voodoo_dump.txt的文件,里面会有两段以DUMPING Playback/Record Paths开头的文字描述,这里面即包括了有效节点,同时也包括了有效的路径从上面的两张截图中,可以将有效的节点和路径整理出下面的表格:有效节点10进制设备名称路径0x1420Speaker out20-&gt;12-&gt;20x2133HP out33-&gt;13-&gt;30x1925Headset Mic in8-&gt;35-&gt;24 8-&gt;35-&gt;29备用0x1218Internal Mic in9-&gt;34-&gt;18 9-&gt;34-&gt;29备用有了这个表格,再结合configdata,找出有效的ID,编译AppleALC,注入ID并使用声卡驱动. 如果还不出声怎么办？试试打开终端，输入这两条命令：12sudo kextunload /System/Library/Extensions/AppleHDA.kextsudo kextload /System/Library/Extensions/AppleHDA.kext这两条命令是重新加载AppleHDA驱动 HDA工具下载及使用制作声卡仿冒需要用到的工具,我已经同步到仓库,您可以打包下载也可以通过git同步到本地下载链接:https://github.com/daliansky/dell7000/tree/master/hda-tools如何安装将hda-tools目录下的所有文件复制到/usr/local/bin下,如果/usr/local/bin目录不存在,需要新建立,命令如下:12sudo mkdir /usr/local/bin # 建立/usr/local/bin子目录sudo cp ~/Downloads/hda-tools/* /usr/local/bin # 将hda-tools目录下所有的应用程序复制到/usr/local/bin目录下如何使用打开终端,输入命令,直接执行.例如:1234verbit.sh codec#0 &gt; codec_dump.txt # 有效节点格式化codecgraph codec#0 # 自动生成pathmap图,文件位于codec#0相同目录下hda-verb 0x19 0x707 0x20 # 耳机睡眠唤醒无声修正widget_dump.sh # 读取SET_PIN_WIDGET_CONTROL数值 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>AppleHDA</tag>
        <tag>声卡仿冒</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CloverALC给AppleHDA打补丁，适用于台式机]]></title>
    <url>%2FClover-Patched-Desktop-AppleHDA-Realtek-ALC-Audio.html</url>
    <content type="text"><![CDATA[教程 使用 CloverALC 给 AppleHDA 打补丁， 适用于台式机原生支持 AppleHDA使用 Clover 为Realtek ALC芯片打补丁，这种方法可以启用macOS AppleHDA 板载音频，无论是否带有HDMI和DP音频。 该脚本添加了编解码器特定的布局和平台文件，并将二进制补丁和引脚配置数据注入到本地安装的 AppleHDA.kext 。版本: audio_cloverALC-1x0简单: .command命令, 请看 C.安装Bash: .sh命令, 请看 D. 终端更新列表9-26-17支持10.13, 支持ALC269/ALC283支持PikeralphaALC弃用的12-14-15audio_pikeralpha-110 (Clover版本的Piker Aplha AppleHDA8Series.sh)11-8-15Skylake/100系统更新，加入ALC1150/Audio ID: 37-19-15ALC283更新6-15-1510.11 - El Capitan Realtek ALC AppleHDA.kext 初始支持A. 需求macOS/Clover_v2696及以后版本10.13/High Sierra, 关闭 SIP, 挂载 EFI10.12/Sierra, 关闭 SIP, 挂载 EFI10.11/El Capitan, 设置 boot flag: rootless=010.10/Yosemite, 设置 boot flag: kext-dev-mode=110.9/Mavericks10.8/Mountain Lionon原生的、未修改的 AppleHDA.kextNeed native?支持Realtek板载的音频编解码器Unknown codec?B. Realtek ALCxxx (验证过的编解码器和音频ID)支持的编解码器 (* 不支持 audio_pikeralpha-110)88588788888989289811501220支持的音频ID音频ID: 1支持 885, 887, 888, 889, 892, 898, 1150, 1220Realtek ALC audio (默认, 1/2/3/5/6 主板音频端口)音频ID: 2支持 887, 888, 889, 892, 898, 1150, 1220Realtek ALC/5.1声道 (3主板音频端口，2进/1出变成3出)音频ID: 3支持 887, 888, 889, 892, 898, 1150带有Realtek ALC音频的HD3000 / HD4000 HDMI音频C. 安装通过 Clover 为 AppleHDA 打补丁下载 audio_cloverALC-1x0.command双击: audio_cloverALC-1x0.commandPassword:Confirm Codec ALCxxx: (885, 887, 888, 889, 892, 898, 1150, 1220 only)Clover/Legacy: answer y to Confirm Clover Legacy Install (y/n)Clover Audio ID Injection (y/n):Use Audio ID: x (y/n):Optional: Terminal/Terminal Saved Output重启电脑验证ALC板载音频系统偏好设置/声音/输出/选择音频设备D. 终端通过 Clover 为 AppleHDA 打补丁下载 audio_cloverALC-1x0.sh打开终端1./audio_cloverALC-1x0....sh其它步骤同 C.E. 更多的信息DetailsOnboard Audio SolutionsRequirements - Supported/UnsupportedNotesGuidesToolsProblem ReportingTerminal Saved OutputClover/EFIClover/LegacyCreditTHe KiNG, bcc9, RevoGirl, PikeRAlpha, SJ_UnderWater, RehabMan, TimeWalker75a, lisai9093, abxitetoleda https://github.com/toleda/audio_cloverALC 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <tags>
        <tag>Clover</tag>
        <tag>AppleHDA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13.1(17B48)正式版 with Clover 4278原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13.1-(17B48)-official-version-and-Clover-4278-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13.1(17B48)正式版 with Clover 4278原版镜像本镜像采用官方原版app制作，集成Clover 4278，支持UEFI启动安装。Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理Clover默认配置文件config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡；已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图： 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接迅雷离线下载：请点击下载 感谢@难忘情怀提供下载资源http下载链接:请点击下载 感谢@难忘情怀提供下载资源百毒云下载链接：请点击下载MD5 (macOS High Sierra 10.13.1(17B48) Installer with Clover 4278.dmg) = 2e6b403eed5a18ffbbaaf53b3261c71c 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>10.13.1</tag>
        <tag>17B48</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一条命令教你如何确认自己的机型及如何开启HWP]]></title>
    <url>%2FA-command-to-teach-you-how-to-confirm-their-own-models-and-how-to-open-the-HWP.html</url>
    <content type="text"><![CDATA[HWP是什么？HWP是Hardware Work Package的简称，翻译过来叫做：硬件标准部件在macOS下,HWP是指Intel SpeedShift，开启全功率的电源管理，更多的解释请参阅原文 用到的工具： freqVectorsEdit.sh 用法：打开终端，复制下面命令：cd /tmp &amp;&amp; curl -s https://raw.githubusercontent.com/Piker-Alpha/freqVectorsEdit.sh/master/freqVectorsEdit.sh &gt; /tmp/freqVectorsEdit.sh &amp;&amp; chmod +x freqVectorsEdit.sh &amp;&amp; /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/Mac-*.bin注意上面的命令为一条，须全部复制系统会使用 curl 自动下载一个程序，保存到 /tmp ,之后自动执行，期间需要你输入自己的用户密码，程序执行完后会自动清除临时文件；屏幕会输出40个机型，其中亮白加粗为你当时设置的机型，带 绿色 显示的那三行前面括号里的机型为可选机型，带 HWP 字样的为可以开启 HWPEnable输入方括号里面的数字并回车，可以修改相对应的机型，同时开启 HWP本文不讨论开启 HWP 的步骤及用法，更多的信息请参阅其它文章 收工 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>HWP</tag>
        <tag>机型</tag>
        <tag>变频</tag>
        <tag>CPU</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MAC常用快捷键整理]]></title>
    <url>%2FMAC-commonly-used-shortcut-keys-finishing.html</url>
    <content type="text"><![CDATA[写在前面苹果 Mac 系统常用快捷键有很多，但是很多童鞋对于这些 Mac 快捷键都不是很熟悉，今天小编为大家整理了一份 Mac 系统常用快捷键大全，大家快收藏起来吧!平时在使用 Mac 系统的时候可以提高不少工作效率哦!本文转自 Xclient.info，转载请注明原出处 小普及Mac中主要有四个修饰键，分别是 Command，Control，Option 和 Shift。这四个键分别有自己的图案，他们经常出现在Mac应用程序中的菜单栏里，方便你随时学习新的快捷键。如下 正文 通用快捷键Command 是 Mac 里最重要的修饰键，在大多数情况下相当于 Windows 下的 Ctrl，黑果通常是 Alt 键。Command + Z 撤销。Command + X 剪切。Command + C 拷贝(Copy)。Command + V 粘贴。Command + A 全选(All)。Command + S 保存(Save)。Command + F 查找(Find)。 系统快捷键Option 开机后立即按下，将显示启动管理器。Command + R 开机后立即按下，可打开OS X 的恢复功能。Command + Option + P + R 开机后立即按下，重置 NVRAM。有些时候电脑会出现些小问题，重置 NVRAM 是你除了重新启动，尝试修复的第一选择。Command + Option + Control + Power 退出所有应用程序，允许你进行文稿储存，然后关机。按住 Power 按钮 5 秒 强制 Mac 关机。 截图Command + Shift + 3 截取全部屏幕到文件。Command + Shift + Control + 3 截取全部屏幕到剪贴板。Command + Shift + 4 截取所选屏幕区域到一个文件，或按空格键仅捕捉一个窗口。Command + Shift + Control + 4 截取所选屏幕区域到剪贴板，或按空格键仅捕捉一个窗口。 文件管理器Command + Shift + N (New) 新建文件夹。Command + Shift + G (Go) 调出窗口，可输入绝对路径直达文件夹。return 这个其实不算快捷键，点击文件，按下可重命名文件。Command + O 打开所选项。在 Mac 里打开文件不像 Windows 里直接按 Enter。Command + Option + V 作用相当于Windows里的文件剪切。在其它位置上对文件复制(Command-C)，在目的位置按下这个快捷键，文件将被剪切到此位置。Command + ↑ 打开包含当前文件夹的文件夹，相当于 Windows 里的“向上”。Command + Delete 将文件移至废纸篓。Command + Shift + Delete 清倒废纸篓。Space 快速查看选中的文件，也就是预览功能。 切换Command + Tab 在应用程序间切换。Command + Shift + Tab 在应用程序间切换(反向)。Command + ~ 在各应用中的窗口间切换。 浏览器Command + L 光标直接跳至地址栏。Control + Tab 转向下一个标签页。Control + Shift + Tab 转向上一个标签页。Command + ‘+‘或’=’ 放大页面。Command + ‘-’ 缩小页面。 应用程序中Command + H 隐藏(Hide)当前正在运行的应用程序窗口。Command + Option + H 隐藏(Hide)其他应用程序窗口。Command + Q 退出(Quit)最前面的应用程序。Command + Shift + Z 重做，也就是撤销的逆向操作。Command + Tab 在打开的应用程序列表中转到下一个最近使用的应用程序，相当于 Windows 中(Alt+Tab)。Command + Option + esc 打开“强制退出”窗口，如果有应用程序无响应，可在窗口列表中选择强制退出。 文本处理Command + B 切换所选文字粗体(Bold)显示。fn + Delete 相当于 PC 全尺寸键盘上的 Delete，也就是向后删除。fn + ↑ 向上滚动一页(Page Up)。fn + ↓ 向下滚动一页(Page Down)。fn + ← 滚动至文稿开头(Home)。fn + → 滚动至文稿末尾(End)。Command + → 将光标移至当前行的行尾。Command + ← 将光标移至当前行的行首。Command + ↓ 将光标移至文稿末尾。Command + ↑ 将光标移至文稿开头。Option + → 将光标移至下一个单词的末尾。Option + ← 将光标移至上一个单词的开头。Control + A 移至行或段落的开头。 更多快捷键如果你还想学习更多快捷键，请点击这里查看苹果官方的快捷键帮助文档。 关于打赏您的支持就是我的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>shortcut-keys</tag>
        <tag>快捷键</tag>
        <tag>MAC</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[clover使用教程]]></title>
    <url>%2Fclover-user-manual.html</url>
    <content type="text"><![CDATA[Clover的前世今生前言：先将最最基本的操作发出来，然后再写完整的教程 如何打开啰嗦模式进行排错开机进入clover引导界面，在要引导的分区卷标上按 空格 即可进入勾选以下选项：选择 Boot macOS with selected options 启动出现错误画面拍照发群里寻求帮助。 Clover是什么什么是Clover（三叶草）呢？显然它不是指的草地里用来喂牛的草啦。Clover是一个软件，是一个新型的启动器，它能够让普通的PC上用上Mac OS X系统。苹果公司（Apple）限制Mac OS X系统只能在Apple设备上使用，并且苹果不保证Mac OS X在其它设备上能够正常工作。所以，用户需要承担一定的风险。当然，为了避免其它的法律纠纷，你不应该用作商业用途。装上了Mac OS X的非苹果电脑，就叫做黑苹果(Hackintosh)。 名字的来源启动器的名字 Clover 由一位创建者kabyl命名。他发现了四叶草和Mac键盘上Commmand键的相似之处，由此起了Clover这个名字。维基百科：四叶草是三叶草的稀有变种。根据西方传统，发现者四叶草意味的是好运，尤其是偶然发现的，更是祥瑞之兆。另外，第一片叶子代表信仰，第二片叶子代表希望，第三片叶子代表爱情，第四片叶子代表运气。 Clover能干什么Clover是一个操作系统启动加载器(boot loader)，能够同时运行于支持EFI方式启动的新式电脑和不支持它的老式电脑上。一些操作系统可以支持以EFI方式启动，比如OS X, Windows 7/8/10 64-bit, Linux；也有不支持的，比如Windows XP，它只能通过传统的BIOS方式来启动，也就是通过启动扇区来启动。EFI不仅存在于操作系统的启动过程中，它还会创建操作系统可访问的表和服务(tables and services)，操作系统的运行依赖于EFI正确的提供功能。从内建的UEFI来启动OS X是不可能的，用原始的DUET来启动OS X也不可能。CloverEFI和CloverGUI做了大量的工作来修正内部表，让运行OS X成为可能。译注：DUET(Developer’s UEFI Emulation)，开发者的UEFI模拟 Clover的两种启动方式启动方式A: 基于BIOS的电脑（老式主板）BIOS-&gt;MBR-&gt;PBR-&gt;boot-&gt;CLOVERX64.efi-&gt;OSLoader启动方式B: 基于UEFI的电脑（新式主板）UEFI-&gt;CLOVERX64.efi-&gt;OSLoader Clover兼EFI的目录结构 Clover驱动程序详解BIOS启动过程中（启动方式A）要用到drivers32或drivers64目录，UEFI启动过程中（启动方式B）则使用 drivers64UEFI 目录。它们的内容会根据配置和BIOS版本而有所不同。必须要提的一点是这些驱动程序只在bootloader运行时有效，不会影响最终启动的操作系统。至于到底要使用哪些驱动程序由用户来决定。 Drivers64UEFI目录几必备的驱动程序：驱动程序详解ApfsDriverLoader-64.efi苹果新推出的apfs文件系统，macOS 10.13/10.14必备FSInject.efi控制文件系统注入kext到系统的可能性。详细解释请参照WithKextsHFSPlus.efiHFS+文件系统驱动程序。这个驱动对于通过启动方式B来启动Mac OS X是必须的。启动方式A中用到的启动程序(CloverEFI)已经包含了这个驱动AptioMemoryFix-64.efi修复AMI Aptio EFI内存映射。如果没有就不能启动OS XOsxFatBinaryDrv-64.efi允许加载FAT模块比如boot.efiCsmVideoDxe.efi比UEFI里提供更多分辨率的显卡驱动(可选) Clover Bootloader详解本节会详细介绍Clover各项功能的用法 Clover主界面使用Clover开机引导后，默认的系统界面如下：本例中:蓝色图标为 Windows 10 的引导绿色图标为 Ubuntu Linux 的引导橙色图标为 macOS High Sierra 的引导红色图标为 macOS Sierra的引导当你想引导到不同的操作系统，只需要移动键盘上的左右键到各自的图标后回车即可。 帮助菜单 F1按 F1 键会呼出 Clover 的帮助信息ESC 退出子菜单，恢复到主菜单F1 帮助F2 保存 preboot.log 到 EFI/CLOVER/misc/ 目录下，以便于您排错F3 显示 被隐藏 的入口比如你在 config.plist 中隐藏了 Recovery HD当你想进入恢复模式的时候，可以不需要修改 config.plist 而直接按 F3 显示出那些被你隐藏的引导项。如下图：F4 提取 DSDT 保存到 EFI/CLOVER/ACPI/origin/此选项会经常用到。比如你的机器出现问题，需要别人帮助你解决问题，人家会跟你要 DSDT ，这个时候你只需要在 Clover 引导界面按下快捷键 F4 即可提取F5 提取修正过的 DSDT 保存到 EFI/CLOVER/ACPI/origin/F6 提取显卡ROM VideoBios 保存到 EFI/CLOVER/misc/F10 截屏，截取当前界面，保存到 EFI/CLOVER/misc/F11 重置NVRAM,r4299版本新增空格 选定菜单项的详细信息数字 1-9 菜单项的快捷键A 关于 CloverO Clover 选项此选项是 Clover 的核心，所有的选项都在这个菜单里，当你无法引导进入 macOS 系统使用 Clover Configurator 进行选项调整时，可以通过该选项进行修改进入系统。后面会详细介绍R 软复位U 退出 如何打开啰嗦模式进行排错【重复内容，目的是加深印象】开机进入clover引导界面，在要引导的分区卷标上按 空格 即可进入勾选以下选项：选择 Boot macOS with selected options 启动出现错误画面拍照发群里寻求帮助。 Clover Options：Clover选项文章上面已经提到了Clover的选项是它的核心，那么现在就让我们走进Clover选项设置照例先上一张图：Boot Args引导参数传递，比如前面教大家的使用 -v 打开啰嗦模式，就是通过它传递的；再比如你使用了不兼容版本的 Lilu 和 AppleALC 而导致无法进入系统时，可以在这上面手动添加上： -liluoff 或者 -alcoff 跳过相关的驱动而进入系统Configs配置文件选择。当你有不止一个 config.plist 配置文件时，可以通过该选项选择不同的配置文件进入系统操作过程光标移动到 Configs回车后进入子菜单通过光标上下移动选择其它的配置文件，回车后按 ESC 键退到主菜单GUI tuningClover主题切换，当你有不止一套主题的时候，可以通过该选项切换主题操作过程光标移动到 GUI tuning回车后进入子菜单光标移动到 Themes ，回车后进入子菜单通过光标上下移动选择其它的主题，回车后按 ESC 键退到主菜单，Clover主界面已经刷新为选择的新主题ACPI patching电源补丁：进不去电脑的，需要drop tables的，禁用/调用 DSDT.aml ，禁用 hotpatch ，无关关机的，无法重启的；总之跟电源相关的都在这里边。操作过程光标移动到 ACPI patching回车后进入子菜单Debug DSDT打开DSDT调试模式DSDT name默认文件名为：DSDT.amlTables dropping光标移动到 Tables dropping 回车进入通过移动光标按空格勾选各选项，按 ESC 退出该子菜单该表格等同于使用 Clover Configurator 打开 config.plist 后，在 ACPI 选项的左下角 Drop TablesDrop OEM _DSM丢弃_DSM光标移动到 Drop OEM _DSM 回车进入通过移动光标按空格勾选各选项按 ESC 退出该子菜单DSDT fix maskDSDT修复遮盖详细说明如下：参数描述AddDTGP修改 DSDT 添加方法所必须依赖的函数。必不可缺FixDarwinFixshutdown关机修复，主要是添加 _PTS 函数，判断寄存器 arg0 值是否为 5 ，华硕主板建议勾选.AddMCHC这个功能是在 dsdt 中添加一装置具体是 DveiceID=0X0044,匹配 Intel Clarkdale 平台。有些芯片需要这个装置来解决 PCI 的电源管理问题，一般不启用FixHPET修复 HPET ，添加 IRQ(0,8,11) 加载原生电源管理，10.9 不需要FakeLPC仿冒 LPC ，一般 Clover 会自动注入合适的芯片参数到 dsdt 中，来达到加载 AppleLPC.kext 的目的。对以 Intel and NForce 芯片，建议勾选。特别是芯片组比较老的如：ICH7,ICH9FixIPIC从 decice IPIC 移除中断语句 (IRQ(2)),有助于电源按钮的工作，对于笔记本而言，更希望增加这个中断功能FixSBUS增加 SMBusControlle 到设备树种，可修复因缺失 SBUS 控制而在系统 log 中出现的警告，建议勾选Fixdisplay增加 GFX0,和 HDMI 音频设置 HADU. 如果设置了 FAKEID 也会增加到这边，建议勾选FixIDE修复在 10.6 事五国出现的 AppleIntelPIIXATA 错误。 一般不启用FixSATA内建磁盘，用 ICH6 的 ID 匹配，解决橙色磁盘问题，一般启用FixFIREWIRE在火线控制装置中增加 fwhub 属性。一般不启用FixUSB注入 USB 属性，帮助内建 USBFixLAN注入网卡属性，帮助网卡内建。建议启用FixAirport为支持 Airport 的无线网卡注入属性，以开启 Airport 功能，无此设备的不启用FixHDA修正 AZAL to HDEF or HDAU, 增加 layout -id 和 pinconfig,MaximumBootBeepVolume 属性FixDarwin7这项补丁只有Darwin OS系统［苹果系统］识别FixRTC从RTC装置中删除IRQ（0），作用是否与patch里的防RTC重置类似？FixTMR从TMR装置中删除IRQ(8)，适用于较早的dos设备，现代新的计算机不需要补丁，这个问题只是以前没发现［作者］AddIMEI这个设置用于intelHDxxx集成显卡，解决完美注入。这项也需要开启fakeid -&gt; IMEIFixIntelGfx开启对IntelGFX显卡的新补丁设置，不开启则补丁不会生效［配合imei］FixWAK这个补丁主要是消除警告，如在method_WAK下缺少返回语句则加入Return(Package(0))，我不知道会有什么DeleteUnuse从DSDT中删除没有使用的设备如软盘驱动器，打印机端口和其他没用的设备FixADP1将“ AC0 ”设备 重命名为“ ADP1”设备.AddPNLF添加一个非常实用的PNLF 设置代码：当然只有你可以调节亮度控制时才有用。这个补丁也会对系统良好的睡眠/唤醒FixS3D修正了 _S3Dmethods函数，也解决了一些睡眠/唤醒的问题FixACSTACST项含义对于苹果和华硕意义不同，对于华硕是AC适配器状态，而苹果是一个替代_cst，c-states table［CPU 闲置休眠状态的功能］。如果要没有冲突就要将其重名为其他名称的东西AddHDMI修复HDMI音频输出问题（无需修改AppleHDA）FixRegions因为BIOS当中的一些内容改变了。这个浮动的区域导致无法使用自定义DSDT（custom DSDT），因为这个区域可移动且不符合当前的状态。这个补丁的目的是找到BIOS中所有这样的区域并在自定义DSDT中加以修正。所以现在你可以生成有错误区域的自定义DSDT然后使用这个补丁FixHeadersMACH reboot修复光标移动到 DSDT fix mask 回车进入通过移动光标按空格勾选各选项按 ESC 退出该子菜单Custom DSDT patches自定义的DSDT补丁光标移动到 Custom DSDT patches 回车进入通过移动光标按空格勾选各选项按 ESC 退出该子菜单 Block injected kexts 管理你的驱动程序通过Clover加载的驱动程序位于 EFI/CLOVER/kexts/Other ，也有可能位于 EFI/CLOVER/kexts/10.13 或者 EFI/CLOVER/kexts/10.12 目录中。它至少包括以下驱动程序：驱动程序详细信息备注FakeSMC.kext安装hackintosh的核心程序，没有它就没法在你的电脑上面运行macOS必备Lilu.kext内核扩展程序，离开它，下面的几个程序都无法正常运行必备WhateverGreen.kext显卡综合修复，整合了核显、AMD、NVIDIA的综合修复，包括 （单卡启动黑屏，唤醒黑屏 等等）(依赖于Lilu)必备AppleALC.kext动态对系统注入必要的文件/打补丁以驱动声卡(依赖于Lilu)可选IntelGraphicsFixup.kext修补 Intel 核显综合问题 (开机花屏，Haswell/Skylake 因 PAVP 导致的死机等等)(依赖于Lilu)可选IntelGraphicsDVMTFixup.kext修正 Broadwell/Skylake 平台核显因 DVMT 不足而导致的死机(依赖于Lilu)可选NvidiaGraphicsFixup.kext修正 N 卡 (可能也适用于 I 卡) 使用某些 SMBios 如 MacPro6,1 等引发黑屏的问题(依赖于Lilu)可选AirportBrcmFixup修补 Broadcom Wi-Fi 综合问题可选FakePCIID.kext仿冒PCI设备核心驱动，部分驱动依赖于它可选ACPIBatteryManager.kext笔记本电池管理驱动可选RealtekRTL8xxx.kextRealtek 8xxx网卡驱动程序可选VoodooPS2Controller.kextVoodoo键盘/鼠标驱动程序可选当你面对这么一堆驱动的时候，如何让它们有条不紊地正常工作呢？万一出现问题的时候又如何让这些驱动在Clover引导的时候禁用它们呢？这个时候 Block injected kexts 就派上用场了。新版的 Clover Bootloader 已经将 Block injected kexts 放到了 macOS 系统分区的图标下面了。操作方法：开机进入clover引导界面，要引导的分区卷标上按 空格 即可进入光标移动到 Block injected kexts 回车进入选择当前系统加载的驱动程序目录勾选禁用的驱动程序按 ESC 退出该子菜单 后记Clover Bootloader的使用暂时先写到这里，还有更多的用法等着我们去发掘。您有什么想法或者需要补充的，请点击下面的QQ群与我联系更新。 特别感谢群友 (￣(工)￣)_小哥哥 帮忙整理部分资料 关于打赏整整写了两天的博文，如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>clover</tag>
        <tag>手册</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[惠普HP ENVY Laptop 13-ad1xx笔记本电脑安装MacOS手记及EFI分享]]></title>
    <url>%2FHP-HP-ENVY-Laptop-13-ad1xx-Notebook-PC-Mac-OS-Note-and-EFI-Share.html</url>
    <content type="text"><![CDATA[惠普HP ENVY Laptop 13-ad1xx笔记本电脑安装MacOS手记及EFI分享群里有网友新购买了惠普HP ENVY Laptop 13-ad110tu笔记本电脑，想安装MacOS系统。本着折腾的原则，制作了hotpatch补丁。现将安装过程记录下来，以供后来者参考。 电脑配置规格详细信息电脑型号HP ENVY Laptop 13-ad1xx 笔记本电脑操作系统Windows 10 64位 ( DirectX 12 )处理器英特尔 Core i5-8250U @ 1.60GHz 四核主板惠普 83A8 ( 英特尔 Xeon E3 - 1200 v6/7th Gen Intel Core)显卡英特尔 UHD Graphics 620 ( 128 MB / 惠普 )内存8 GB主硬盘英特尔 NVMe SSDPEKKF25 ( 256 GB / 固态硬盘 )显示器京东方 BOE070E ( 13.3 英寸 )声卡瑞昱 @ 英特尔 High Definition Audio 控制器网卡英特尔 Dual Band Wireless-AC 7265 制作EFI提取 DSDT/SSDT，制作hotpatch；添加独显屏蔽补丁，以适用于其它相似机型；添加虚拟网卡驱动，以解决icloud及AppStore登录问题；配置其它驱动程序；打包EFI。 安装过程制作USB安装盘，替换EFI，进入Clover报错，将Drivers64UEFI目录下的OsxAptioFixDrv-64.efi替换为OsxAptioFix2Drv-64.efi，顺利进入Clover，可以正确识别NVMe SSD以及外置移动硬盘，分区抹盘完成安装，过程顺利。 完善驱动程序声卡：型号为ALC298，注入ID：28，使用AppleALC仿冒，顺利加载；修正HDMI Audio输出信息；网卡：INTEL的无线网卡截止到目前还是全球无解，使用购买赠送的TYPE-C转EtherNet网卡免驱动直接使用；显卡：Intel UHD Graphics 620，Platform-id为：0x59170000，目前还没法原生驱动，上次在安装小米Pro的时候已经折腾很久也没有驱动上，昨晚又花了近三个小时还是无果，最后采取的是仿冒方式，Platform-id为：0x19160000，通过SSDT-Config.aml注入，修改显存为2048MB；通过读取Clover的源程序，发现UHD 620仿冒的是HD 620的Platform-id:0x59160000，有机会再测试吧。蓝牙使用Intel，工作正常；电池信息正常；触摸板正常工作；显示器亮度调节正常；USB端口信息未完善，需要使用SSDT-UIAC.aml进行修改；PCI设备信息未修正； 系统截图*** 备注:该截图为显卡未驱动状态 *** EFI更新源https://github.com/daliansky/hp-envy13 其它机型EFI下载：https://github.com/daliansky/Hackintosh 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>EFI</tag>
        <tag>惠普</tag>
        <tag>ENVY</tag>
        <tag>ad1xx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[将CLOVER引导添加进UEFI BOOT Option Menu的正确姿势]]></title>
    <url>%2FAdd-the-CLOVER-boot-to-the-correct-posture-of-the-UEFI-Boot-Option-Menu.html</url>
    <content type="text"><![CDATA[将CLOVER引导添加进UEFI BOOT Option Menu的正确姿势很多网友在安装完 MacOS 后的第一件事情就是要将USB的EFI复制进磁盘里，同时需要将CLOVER的引导项添加UEFI BOOT里，这里我教大家一个最简单的方法 将 MacOS 系统的EFI移动进磁盘的EFI分区里 单磁盘单 MacOS 系统两种方式：请使用工具： Clover Configurator 或者 ESP Mounter Pro，分别挂载U盘的EFI分区和磁盘里的EFI分区，然后将U盘下的EFI分区里面的EFI目录复制到磁盘里的EFI分区下即可使用系统命令 diskutil ，具体操作请移步 单磁盘双系统最简单的分区结构是：一个 EFI 分区，一个 MacOS 分区，一个 Windows 分区假设你想在同一块磁盘里同时安装 MacOS 和 Windows 10 双系统的话，那么我给你的建议是无论是先安装 MacOS 系统还是先安装 Windows 10 系统，都要在安装完 Windows 10 系统后再将U盘的EFI移动到磁盘的EFI分区里。因为当你安装完 Windows 10 的系统后，它会重新将EFI分区格式化的。安装完的 Windows 10 的EFI分区里面会有个EFI的目录，目录里面会包括 BOOT 和 MICROSOFT 这两个目录,它看起来是这样的：将U盘里的EFI目录下面的 CLOVER 目录复制到磁盘里的EFI分区EFI目录下*** 切记一点：千万不要动另外的Boot和Microsoft目录 *** 双磁盘双系统每块磁盘都分别包括各自不同的EFI分区，两块磁盘通过开机按Boot快捷键选择引导进入不同的系统，该种情况不在本教程讨论范围内。 将 CLOVER 引导项添加进 UEFI Boot Option Menu两种方式： 通过BIOS添加，教程略 通过 CLOVER 自带的工具添加开机进入 CLOVER 引导界面，将光标移动到 Clover Boot Options ，回车进入![clover boot options](http://7.daliansky.net/clover boot options.png)选择 Add Clover boot options for all entries 回车拔掉U盘，重新开机，按 Boot 快捷键，你会发现多了很多以 Clover start 开头的引导项，选择 Clover start boot.efi at MAC 即可进入 MacOS 系统 备注：该种方法在Clover v4261版本后已经失效[感谢群里 @(￣(工)￣)_小哥哥 的反馈]，我先找个地方哭一会儿 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>UEFI</tag>
        <tag>Clover</tag>
        <tag>引导</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS系统下使用gpt命令修复损坏的EFI分区以及dd命令的基本用法]]></title>
    <url>%2FUse-the-gpt-command-to-repair-a-damaged-EFI-partition-under-Mac-OS-As-well-as-the-basic-usage-of-the-dd-command.html</url>
    <content type="text"><![CDATA[MacOS系统下使用gpt命令修复损坏的EFI分区今天在远景论坛里看到有坛友将EFI的分区损坏，于是就跟帖回复，现将回复的内容整理下放到博客上，让更多遇到问题的人看到。 命令及用法 显示gpt分区命令如下：123456789101112131415161718192021222324sudo gpt -r show disk0 start size index contents 0 1 PMBR 1 1 Pri GPT header 2 32 Pri GPT table 34 2014 2048 614400 1 GPT part - C12A7328-F81F-11D2-BA4B-00A0C93EC93B 616448 409600 2 GPT part - E3C9E316-0B5C-4DB8-817D-F92DF00215AE 1026048 157696000 3 GPT part - EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 158722048 32000000 4 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 190722048 262144 190984192 196116728 5 GPT part - 7C3457EF-0000-11AA-AA11-00306543ECAC 387100920 400937448 6 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 788038368 262144 788300512 1280000 7 GPT part - 5361644D-6163-11AA-AA11-00306543ECAC 789580512 129175576 8 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 918756088 1269536 9 GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC 920025624 19594968 10 GPT part - EBD0A0A2-B9E5-4433-87C0-68B6B72699C7 939620592 59325048 11 GPT part - 48465300-0000-11AA-AA11-00306543ECAC 998945640 1269536 12 GPT part - 426F6F74-0000-11AA-AA11-00306543ECAC 1000215176 7 1000215183 32 Sec GPT table 1000215215 1 Sec GPT header其中：C12A7328-F81F-11D2-BA4B-00A0C93EC93B 是EFI系统分区(ESP)的标志index 是指磁盘分区，这里的数值是 1 ，也就是说是设备 disk0 的第一个分区start 是指开始的扇区，这里的数值是: 2048size 是指扇区的偏移量，这里的数值是: 614400 删除“坏”的EFI分区，请先阅读下面的警告信息，再运行以下命令：确保你知道你在做什么，然后再从这里开始 - 如果你搞砸，你可能会丢失数据。您无法使用 gpt 编辑分区表，而驱动器上的分区已装入，因此您需要从另一个驱动器（例如，使用OSX安装程序的USB记忆棒）引导，或者以目标磁盘模式运行mac并从另一个mac进行分区操作。您可能需要使用 diskutil unmountDisk disk0 卸载任何自动安装的卷，然后再继续执行下面的操作。1sudo gpt remove -i 1 disk0确保disk0真的是要更改的磁盘 - 数字可以在重新启动之间更改。而且，只有在EFI系统分区(ESP)已经存在的情况下才能运行，如果没有，则删除分区1可能是灾难性的！ 在这种情况下，您需要移动索引，因为我认为ESP必须具有索引 1 重新添加分区与正确的布局和类型：1sudo gpt add -b 2048 -i 1 -s 614400 -t C12A7328-F81F-11D2-BA4B-00A0C93EC93B disk3执行完这三条命令，您的EFI系统分区(ESP)也就恢复正常了。 dd命令的基本用法其实在做修复之前，也可以使用 dd 命令将EFI分区做个备份，尤其是准备在同一块磁盘里面安装Windows和MacOS的同学，更应该先做个EFI分区的备份，以便EFI被 玩坏 后可以恢复如初。 EFI分区备份到文件，命令如下：1sudo dd if=/dev/rdisk0s1 of=~/Desktop/ESP.img # 将EFI分区备份到用户目录-桌面，文件名为：ESP.img 从备份文件恢复到ESP分区，命令如下：1sudo dd if=~/Desktop/ESP.img of=/dev/rdisk0s1 # 将备份文件ESP.img恢复到EFI分区 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>gpt</tag>
        <tag>MacOS</tag>
        <tag>EFI</tag>
        <tag>Fix</tag>
        <tag>修复</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS多系统下蓝牙设备的自动连接]]></title>
    <url>%2FMacOS-multi-system-Bluetooth-device-automatically-connected.html</url>
    <content type="text"><![CDATA[MacOS多系统下蓝牙设备的自动连接因为测试的需要，我的DELL燃7000笔记本上面同时安装了三套MacOS系统。我使用的是logitech的M557蓝牙鼠标，当我在一套系统下面配对使用后，切换到另一套MacOS系统，需要重新配对使用；再切换回到前一个系统还需要重新配对。我的需求是希望把配对好的蓝牙设备可以在这三套系统里同时使用而不需要重复配对 操作方法：经爬帖发现蓝牙设备的配对连接信息文件位于 /private/var/root/Library/Preferences/bluetoothaudiod.plist将该文件复制到另外的MacOS系统，使用命令如下：1sudo -s # 切换到root用户复制文件[10.13到10.13]：cp /private/var/root/Library/Preferences/bluetoothaudiod.plist /Volumes/test/private/var/root/Library/Preferencescp /private/var/root/Library/Preferences/com.apple.bluetoothd.plist /Volumes/test/private/var/root/Library/Preferences复制文件[10.13到10.12]cp /private/var/root/Library/Preferences/bluetoothaudiod.plist /Volumes/test/private/var/root/Library/Preferences/blued.plistcp /private/var/root/Library/Preferences/com.apple.bluetoothd.plist /Volumes/test/private/var/root/Library/Preferences这样操作之后，就可以在不同的MacOS系统下使用配对过的蓝牙设备而无须重复配对。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>蓝牙</tag>
        <tag>BlueTooth</tag>
        <tag>鼠标</tag>
        <tag>Mouse</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版更新(17A405) with Clover 4238原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13-official-version-update-17A405-with-Clover-4238-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像本镜像采用官方原版app制作，集成Clover 4238，支持UEFI启动安装。Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理Clover默认config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡；已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![Clover Main Menu](http://7.daliansky.net/Clover Main Menu.png)![About Clover](http://7.daliansky.net/About Clover.png) 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接: https://pan.baidu.com/s/1o8gIsY2MD5 (macOS High Sierra 10.13(17A405) Installer with Clover 4238.dmg) = 7a6894bad093285ffe6801c55f1a032c 其它机型EFI下载：https://github.com/daliansky/Hackintosh]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>17A405</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[High Sierra全新安装或者升级时禁止进行APFS转换]]></title>
    <url>%2FGuide-High-Sierra-prohibits-APFS-conversion-when-installing-or-upgrading.html</url>
    <content type="text"><![CDATA[[指南]High Sierra全新安装或者升级时禁止进行APFS转换假设安装的分区为 test ，挂载路径为 /Volumes/test如您所知，macOS High Sierra包括一个新的文件系统APFS。 如果您的系统驱动器是固态，安装程序将在新的安装方案和更新方案中将HFS + J转换为APFS。幸运的是，这种自动转换有一些方法。 它由 /macOS Install Data/minstallconfig.xml 中的ConvertToAPFS 选项控制。 升级升级方案比新安装程序稍微简单一些，因为我们可以运行一个命令行工具，可以使用命令行选项将 ConvertToAPFS 设置为 false 。下载10.13安装程序后，请退出。打开终端，输入命令：/Applications/&quot;Install macOS High Sierra.app&quot;/Contents/Resources/startosinstall --converttoapfs NO --agreetolicense --volume /Volumes/test系统将复制一些文件，然后重新启动，您将可以启动安装程序（无需APFS转换），方法是在 Clover 中引导 Boot macOS Install from test 选项。 全新安装假设您已经创建了一个用于全新安装的HFS+格式的U盘，如果安装目标是SSD，安装程序仍将转换为APFS。为避免这种情况，在运行安装程序(第一阶段)之后，并且在首次重新启动之后(第二阶段之前)，重新通过 Clover 选择进入U盘 Boot OS X Install from Install macOS High Sierra，打开终端，进入要安装的系统分区(假设安装分区为 test )：123cd /Volume/testcd "macOS Install Data"vi minstallconfig.xml将12&lt;key&gt;ConvertToAPFS&lt;/key&gt;&lt;true/&gt;修改为：12&lt;key&gt;ConvertToAPFS&lt;/key&gt;&lt;false/&gt;输入:wq保存退出vi编辑器的用法请自行脑补或者google重启，在 Clover 中引导 Boot macOS Install from test 选项，进入第二阶段完成安装，您得到的是一个未转换成 APFS 的 HFS+ 分区格式的系统。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
        <category>指南</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>APFS</tag>
        <tag>转换</tag>
        <tag>Guide</tag>
        <tag>conversion</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS 10.13安装中常见的问题及解决方法]]></title>
    <url>%2FmacOS-10.13-installation-of-common-problems-and-solutions.html</url>
    <content type="text"><![CDATA[安装提示安装macOS 应用程序副本已损坏，不能用来安装macOS的解决方法该错误会经常出现于旧版中，根源是苹果的安装镜像中的证书过期导致的。解决方法如下：实用工具-终端，输入命令：date 0201010116，回车后关闭终端，可继续安装进程；安装过程中全程断开网络 去掉Lilu的输出信息,还原10.13 内核崩溃(kernel pance)的真相援引:如果你有一个kernel panic，请确保你有一个DEBUG版本的扩展，并且已经添加了-v keepyms = 1 debug = 0x100引导参数。 在10.13上，为了避免kext名字在崩溃日志(panic log)中滚动，你也应该[修补你的内核]10.13的系统引导中,万一发生了kernel panic,也就是内核崩溃后,Lilu输出的信息过多,造成无法看清内核崩溃时的问题所在,这里教大家一种方法,去掉Lilu的输出信息,还原造成内核崩溃后面的真相 解决方法1:使用文本编辑器打开config.plist文件,在1&lt;key&gt;KernelToPatch&lt;/key&gt;下面添加:12345678910111213141516171819202122232425262728293031323334&lt;array&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on 10.13 Debug kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; sABMi1Xw &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; SIPEQF3D &lt;/data&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;Disable panic kext logging on 10.13 Release kernel&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; igKEwHRE &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; igKEwOtE &lt;/data&gt; &lt;/dict&gt;&lt;/array&gt; 解决方法2:使用Clover Configurator打开config.plist - Kernel and Kext Patches - kernelToPatch，新添加：123456789Comment: Disable panic kext logging on 10.13 Debug kernelFind: b0004c8b 55f0Replace: 4883c440 5dc3MatchOS: 10.13Comment: Disable panic kext logging on 10.13 Release kernelFind: 8a0284c0 7444Replace: 8a0284c0 eb44MatchOS: 10.13 8750h核显黑屏的临时解决方法：1234Comment 8750h黑屏补丁Find 00000800 02000000 98000000Name com.apple.driver.AppleIntelKBLGraphicsFramebufferReplace 00000800 02000000 87010000将内屏设置成外屏后，亮度值不可调，可以通过Clover Configurator里面的SystemParameters-BacklightLevel设置亮度值：0x00c8，这个亮度值可以调整成你喜欢的亮度。原帖出处:https://www.tonymacx86.com/threads/help-black-screen-when-uhd630-run-with-internal-screen.250577/page-5#post-1762999 10.13.0/1/2/3 改变USB端口限制补丁12345Comment 10.13.0/1/2/3 USB Port 10-&gt;26Find 837D8C10Name com.apple.driver.usb.AppleUSBXHCIReplace 837D8C1BMatchOS 10.13.0,10.13.1,10.13.2,10.13.3 10.13.4/5 关闭USB端口限制补丁12345Comment disable USB Port Limit Patch (PMheart)Find 837D940F 0F839704 0000Name com.apple.driver.usb.AppleUSBXHCIReplace 837D940F 90909090 9090MatchOS 10.13.x 10.13.6 改变USB端口限制补丁12345Comment USB Port 15-&gt;26Find 837d880f 0f83a704Name com.apple.driver.usb.AppleUSBXHCIReplace 837d881a 0f83a704MatchOS 10.13.6补丁出处：insanelymac.com macOS升级后应该先插入啥？有些群友通过App Store更新了系统后，就会在群里提出更新后某些功能不正常了，我的方法是直接使用Kext Utility重建缓存再重启，包治百病！比如：HDMI Audio输出没了，内屏背光亮度不可调等等。 安装过程中出现错误信息good.win.HWPEnabler（1.1）该问题是由于新版的CLOVER中集成了HWPEnabler这个新平台的变频程序，如果你的机器比较老旧，那么就需要禁用掉这个驱动以使安装程序得以进行。那么如何操作呢？现在就让我们搬出CLOVER自带的Block Injected kexts吧 Block injected kexts 禁用无效的、未知的驱动程序当你面对这么一堆驱动的时候，如何让它们有条不紊地正常工作呢？万一出现问题的时候又如何让这些驱动在Clover引导的时候禁用它们呢？这个时候 Block injected kexts 就派上用场了。新版的 Clover Bootloader 已经将 Block injected kexts 放到了 macOS 系统分区的图标下面了。操作方法：开机进入clover引导界面，要引导的分区卷标上按 空格 即可进入光标移动到 Block injected kexts 回车进入选择当前系统加载的驱动程序目录勾选禁用的驱动程序按 ESC 退出该子菜单 误食了偏方进不了系统怎么办？经常会有群友说是安装了ALCPlugFix后重启无法进入系统的问题，这是由于新的10.13.2及以后的重建缓存的命令发生了改变，部分机器会出现类似的问题。现在我把恢复的方法公布出来，让更多的人看到，同时也在此提醒大家使用KEXT UTILITY这个应用程序来重建缓存。请及时更新各声卡驱动所配套的ALCPlugFix，我发布的程序中已经使用新的重建缓存的命令。 恢复方法：在Clover 主界面选择Recovery进入恢复模式，如果没有Recovery的图标，请按下F3打开终端，依次输入这三条命令：123rm -rf /Volumes/MAC/System/Library/Caches/com.apple.kext.caches/Startup/kernelcacherm -rf /Volumes/MAC/System/Library/PrelinkedKernels/prelinkedkerneltouch /Volumes/MAC/System/Library/Extensions/ &amp;&amp; kextcache -u /Volumes/MAC​ 其中的MAC是你安装macOS的卷标，请替换成你自己的重启 挂载EFI分区Windows操作系统下面,以系统管理员身份打开cmd,输入命令:123456789c:\&gt;diskpartlist disk # 磁盘列表select disk n # 选择EFI分区所在的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择EFI分区，n为EFI分区号set id="ebd0a0a2-b9e5-4433-87c0-68b6b72699c7" # 设置为EFI分区assign letter=X # x为EFI分区盘符exit # 退出diskpartnotepad # 打开记事本程序，点击文件-&gt;打开，即可访问EFI分区您可以重复输入命令同时挂载USB的EFI分区和磁盘的EFI分区 安装10.13时卡在Service only ran for 0 seconds. Pushing respawn out by 10 second此种现象常见于笔记本机型，由于10.13中的DSDT屏蔽独显方式失效，现使用 hotpatch 方式进行独显屏蔽。 使用方法：将 SSDT-Disable-DGPU.aml 复制到 /EFI/CLOVER/ACPI/patched 目录下即可 下载链接：https://pan.baidu.com/s/1skRcIyL 解决安装时提示 OSInstall.mpkg似乎已缺失或已损坏 的问题 解决方法： 删除 /EFI/CLOVER/drivers64UEFI/EmuVariableUefi-64.efi 和 /EFI/ 分区根目录下的 nvram.plist 修改SMBIOS,使用Clover Configurator将机型设置为2012年及以后机型 解决10.13 NVIDIA安装Web Driver黑屏问题 解决方法：在 /EFI/CLOVER/kexts/Other 目录下添加驱动： NvidiaGraphicsFixup 该驱动依赖于 Lilu更多基于Lilu的插件列表请移步：Lilu插件列表 解决10.13下某些机械硬盘无法读取的问题使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加：12345Name: AppleAHCIPortComment: 修复ICH10芯片 I/O Error 错误Find: 4585F60F 95C289C8 83E0FE66 85C9780F 84D2750BReplace: 89C883E0 FE6685C9 0F98C141 08CC9090 9090750BMatchOS: 10.13.x另一种格式：1234567891011121314&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;修复ICH10芯片 I/O Error 错误&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt;RYX2D5XCiciD4P5mhcl4D4TSdQs=&lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AppleAHCIPort&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt;iciD4P5mhckPmMFBCMyQkJCQdQs=&lt;/data&gt; &lt;/dict&gt; 解决10.13(High Sierra)/10.12(Sierra) Clover开机出现8个苹果使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加：12345Name: IOGraphicsFamilyComment: 10.12+-第二阶段花屏Find: 01000075 25Replace: 010000eb 25MatchOS: 10.12.x12345Name: IOGraphicsFamilyComment: 10.13+-第二阶段花屏Find: 01000075 22Replace: 010000eb 22MatchOS: 10.13.x另一种格式：123456789101112131415161718192021222324252627282930313233343536&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.12+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSU= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yU= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.13+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSI= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yI= &lt;/data&gt;&lt;/dict&gt; 不使用任何程序教你提取显示器的EDID，解决笔记本显示器内屏黑屏/花屏的问题经常有网友需要解决笔记本显示器内屏黑屏问题，尤其新发布的10.13的系统会出现睡眠唤醒后屏幕花屏问题。目前最简单的方案就是通过clover注入显示器的EDID信息，之前网上的教程都是使用Windows下的应用程序进行操作。其实显示器的EDID信息都会在显卡正确驱动后存在于ioreg中的。 最简单的命令是：1ioreg -lw0 | grep -i "IODisplayEDID" | sed -e 's/.*&lt;//' -e 's/&gt;//' 显示信息如下：00ffffffffffff000daee01500000000161a0104952213780228659759548e271e505400000001010101010101010101010101010101b43b804a713834405036680058c11000001ac32f804a713834405036680058c11000001a000000fe0035324b4636803135364843410a000000000000413196011000000a010a202000e8 接着输入下面的两条命令：12345ioreg -l | grep "DisplayVendorID" "DisplayVendorID" = 3502 ioreg -l | grep "DisplayProductID" "DisplayProductID" = 5600其中&lt;&gt;里面的内容就是显示器的EDID信息，将提取出来的EDID信息粘贴到clover的 config.plist 中，顺便将 VendorID 和 ProductID 填入相应的位置，然后保存重启你的电脑。 选择-v时出现Attempting system restart...MACH Reboot的解决方法在安装High Sierra启动过程中，选择-v跑时会出现&quot;Attempting system restart…MACH Reboot”，而不用-v图跑直接显示苹果标志时则不会出现。 解决方法在config.plist配置文件DropTables下添加以下代码：12345678910111213141516&lt;key&gt;ACPI&lt;/key&gt;&lt;key&gt;DropTables&lt;/key&gt;&lt;array&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;MATS&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;DMAR&lt;/string&gt; &lt;/dict&gt; &lt;dict&gt; &lt;key&gt;Signature&lt;/key&gt; &lt;string&gt;BGRT&lt;/string&gt; &lt;/dict&gt;&lt;/array&gt; 关于开机出现Welcome to Clover xxxx user settings卡住不动的解决方法根源是Clover目录下自带的config.plist它并不适用于你的系统 解决方法删除config.plist,找个适合你的机型的配置文件改名为:config.plist如果还是卡住的话,就把ACPI/patched目录下除了SSDT-Disable-DGPU.aml的所有文件全部删除.或者使用与您相同机型的EFI直接替换 抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;的原因及解决方法群里遇到最多的问题就是抹盘时提示&quot;MediaKit报告设备上的空间不足以执行请求的操作&quot;,一直想就此写个解决方法 原因出现该提示最根本的原因就是你之前的磁盘分区中ESP分区的尺寸小于200MB 解决方法Windows下使用diskgenius删除掉MSR分区,将多出来的分区合并到ESP,正好凑成200MB,以满足安装macOS的基本需求.macOS下可以直接使用磁盘工具进行抹盘,它会自动生成一个200MB的EFI分区,当然前提条件是你需要先备份好磁盘里的数据,否则会造成全盘数据的丢失,请谨慎操作. macOS下使用brew安装android-platform-tools工具连接安卓设备有群友反馈说HandShark无法连接安卓手机进行管理,于是将macOS下安装Android驱动的过程写下来,目的是为了让大家都能使用macOS管理安卓设备 什么是 ADB?Android调试桥（ adb ）是一个开发工具，帮助安卓设备和个人计算机之间的通信。 这种通信大多是在USB电缆下进行，但是也支持Wi-Fi连接。 adb 还可被用来与电脑上运行的安卓模拟器交流通信。 adb 对于安卓开发来说就像一把“瑞士军刀”。macOS可以通过brew安装android-platform-tools驱动,用于连接安卓设备,方法如下:安装Homebrew工具:打开终端,输入命令:1/usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"它会自动安装brew及依赖包,同时也会安装XCODE Command Line Tools,出现密码请输入你的用户密码安装android-platform-tools1brew cask install android-platform-tools这个过程有些漫长,请耐心等待.安装完成后,连接安卓设备,输入命令:1adb devices正常情况下,它会显示出如下的信息:13HX7N17114012345 device也有可能需要在手机上确认允许来自macOS的连接使用HandShark管理你的手机吧. 关于本机CPU处理器显示未知的解决方法：打开终端，输入：12cd /System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/zh_CN.lproj/cp AppleSystemInfo.strings ~/Desktop使用编辑器BBEdit打开AppleSystemInfo.strings，将12&lt;key&gt;UnknownCPUKind&lt;/key&gt;&lt;string&gt;未知&lt;/string&gt;修改为：12&lt;key&gt;UnknownCPUKind&lt;/key&gt;&lt;string&gt;Intel Core i7-8700K&lt;/string&gt;保存后退出。打开终端，输入：1sudo cp ~/Desktop/AppleSystemInfo.strings /System/Library/PrivateFrameworks/AppleSystemInfo.framework/Versions/A/Resources/zh_CN.lproj/输入用户密码，收工。 Nvidia WebDriver驱动小版本更新后使用之前版本的命令 方法：打开终端，输入命令：1sudo plutil -replace IOKitPersonalities.NVDAStartup.NVDARequiredOS -string $(sw_vers -buildVersion) /S*/L*/E*/NVDAStartupWeb.kext/C*/Info.plist收工 重建缓存的命令打开终端，输入命令：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U / 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>EDID</tag>
        <tag>安装</tag>
        <tag>常见问题</tag>
        <tag>屏蔽独显</tag>
        <tag>花屏</tag>
        <tag>黑屏</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13-official-version-and-Clover-4221-original-image.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13正式版 with Clover 4221原版镜像本镜像采用官方原版app制作，集成Clover 4221，支持UEFI启动安装。Clover特别增加笔记本常用屏蔽独立显卡补丁，以解决安装10.13时会卡在Service only ran for 0 seconds. Pushing respawn out by 10 second的问题，特别感谢@宪武的搜集整理Clover默认config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡，支持Intel网卡；已更新Lilu(1.2.0)、AppleALC(1.2.0)、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![Screen Shot 2017-09-26 at 3.55.30 AM](http://7.daliansky.net/Screen Shot 2017-09-26 at 3.55.30 AM.png)![屏幕快照 2017-09-26 上午6.01.52](http://7.daliansky.net/屏幕快照 2017-09-26 上午6.01.52.png)![屏幕快照 2017-09-26 上午6.03.09](http://7.daliansky.net/屏幕快照 2017-09-26 上午6.03.09.png) 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接: http://pan.baidu.com/s/1dFCOnMLMD5 (macOS High Sierra 10.13 Installer with Clover 4221.dmg) = 524fc80704b693ad6191a9191436cb5c 其它机型EFI下载：https://github.com/daliansky/Hackintosh]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小米笔记本Pro安装10.13随手记及EFI分享]]></title>
    <url>%2FXiaoMiPro-notebook-Installation-10.13-readily-remember-and-share-EFI.html</url>
    <content type="text"><![CDATA[小米笔记本Pro安装10.13随手记帮朋友订购的小米Pro笔记本，配置是i5-8250/8GB/256GB，15.6寸显示器![屏幕快照 2017-09-22 下午6.22.58](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.22.58.png) 安装中遇到的几个难点： 无法进入安装界面，需要屏蔽独显卡在Service only ran for 0 seconds. Pushing respawn out by 10 second，这是由于没有屏蔽独显而加载显卡驱动造成的，于是又开始爬帖子学习如何禁用独显，经过两个小时的研究，总算是把独显给屏蔽了。感觉自己是不是年龄大了，变得越来越笨了呢。 Clover无法识别苹果分区卷标显卡的问题解决了，终于进入安装界面了，10.13可以直接识别出NVME的磁盘而不需要任何的补丁，这点超赞。打开磁盘工具，直接把小米预装的Windows 10儿童版给干掉了，然后分了三个区，一个8GB的安装分区，省去制作安装U盘的麻烦，一个MAC，另一个WINDOWS，这么做的好处是直接会生成一个200MB的EFI分区。【这里插句题外话：我自从学习黑苹果以来，很少使用Windows工具，无论是调整分区还是恢复镜像，能在苹果环境下做的绝不进Windows】要说NVME的速度真不是盖的，10.13的第一阶段的安装也就10几秒就自动进入重启了，要知道这个过程中可是复制了5GB的数据呢。重启后发现个奇怪的问题：无论是安装分区还是MAC分区的卷标就是无法显示，于是停下来开始检查Drivers64UEFI目录下是否包含APFS及HFS驱动，发现这些驱动都躺在那儿，而且正常的情况下还没进第二阶段，磁盘的分区还没有自动转换成APFS。于是又不得不停下来开始继续爬帖，发现小米13.3的EFI，提取驱动及hotpatch做修正后CLOVER可以显示安装分区和MAC分区的卷标了，顺利进入第二阶段完成安装。 安装驱动程序进入新安装的系统，发现面临的工作还是不少的：网卡没有驱动，显卡没有驱动，声卡没有驱动，那系统怎么用呀？！于是乎，找出USB的无线网卡，安装驱动，联网成功；显卡是UHD620，platform-id是:59170000，折腾了好久总是没驱动好，于是乎就先仿冒吧，使用0x19160000可以顺利驱动显卡；声卡通过linux提取codec，发现是ALC298，298的layoutid只有3、13、28、72这几个，于是直接编译个AppleALC，通过Clover注入总是无法发声，通过ioreg检查发现layoutid一直为3,于是又折回去检查hotpatch，发现有声卡的注入id，小刀一飞直接把它删除了。重启了三遍，发现id为28时可以正确发声。 one more thing:*** 触控板开机正常，功能单一；睡眠唤醒后支持多手势 ***收工喽！！！![屏幕快照 2017-09-22 下午6.20.24](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.20.24.png)![屏幕快照 2017-09-22 下午6.20.50](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.20.50.png)![屏幕快照 2017-09-22 下午6.20.46](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.20.46.png)![屏幕快照 2017-09-22 下午6.16.57](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.16.57.png)![屏幕快照 2017-09-22 下午6.21.07](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.21.07.png)![屏幕快照 2017-09-22 下午6.21.16](http://7.daliansky.net/屏幕快照 2017-09-22 下午6.21.16.png) 更新日期：10-14-2017EFI更新，触摸板工作正常10-17-2017EFI更新，修正显卡驱动增加HDMI Audio声音输出驱动更新：Lilu v1.2.0AppleALC v1.2.1IntelGraphicsDVMTFixup v1.2.0AirportBrcmFixup v1.1.0驱动修复：IntelGraphicsFixup v1.2.010-18-2017经测试显卡驱动不如第一版的好，现将显卡驱动恢复为仿冒0x19160000ACPI修复驱动程序修正去掉USBInjectAll采用SSDT-UIAL.aml内建USB设备10-19-2017显卡驱动正常触摸板开机正常，睡眠唤醒后多手势使用正常睡眠正常电池信息正常10-31-2017更新声卡驱动，修复耳机问题新驱动增加layoutid：13支持四节点，支持耳麦自由切换，Mic/LineIn工作正常11-2-2017Lilu v1.2.0更新，支持10.13.2BetaAppleALC更新，使用最新修正版Lilu联合编译，解决10.13.1更新后无法驱动的问题11-5-2017整合 AppleALC_ALC298_id13_id28.kext 驱动到EFIEFI目录下添加ALCPlugFix目录，请安装完成后进入ALCPlugFix目录，双击 install双击自动安装.command 安装耳机插入状态修正守护程序修正Drivers64UEFI，解决无法安装问题更新apfs.efi到10.13.1版本11-7-2017Lilu v1.2.1目前还不稳定，存在无法进入系统的风险，所以降级到v1.2.0版本AppleALC降级到V1.2.0EFI暂不支持macOS 10.13.2Beta版本的安装，Lilu不抽风后会持续更新1-25-2018支持10.13.x安装使用更新VoodooI2C到2.0.1版本，支持多手势，触摸板开机可正常使用，不漂移，无需唤醒修复电量百分比不刷新的问题修复声卡睡眠唤醒无声音的问题修复屏幕亮度无法保存的问题更新Lilu v1.2.2更新AppleALC v1.2.2 支持小米Pro，注入ID:99更新IntelGraphicsFixup v1.2.3​ EFI更新源https://github.com/daliansky/XiaoMi-Pro 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！ QQ群:247451054 小米PRO黑苹果高级群]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>小米Pro</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13GM 17A362a with Clover 4207原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10.13GM-17A362a-and-clover-4207-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13GM 17A362a with Clover 4207原版镜像本镜像采用官方原版app制作，集成Clover 4207，支持UEFI启动安装。Clover默认config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![Clover Configurator](http://7.daliansky.net/Clover Configurator.png)![Other Drivers](http://7.daliansky.net/Other Drivers.png) 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little 下载链接: https://pan.baidu.com/s/1pLNY8HXMD5 (macOS High Sierra 10.13GM 17A362a with Clover 4207.dmg) = 6d1ddfad2882f665bd0a11c5b291cb06]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>GM</tag>
        <tag>17A362a</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CPUFriend的安装与使用]]></title>
    <url>%2FCPUFriend-Installation-and-Usage.html</url>
    <content type="text"><![CDATA[CPUFriend安装和使用 系统要求CPUFriend 需要macOS ***v10.8***或更高版本 安装强烈建议让引导程序注入CPUFriend，否则您将需要LiluFriend，以确保CPUFriend正常工作。 可用的内核标志添加-cpufdbg以启用调试日志记录（仅在DEBUG二进制文件中可用）添加-cpufoff来关闭CPUFriend添加-cpufbeta以在不支持的操作系统版本上启用CPUFriend 配置使用CPUFriend/ResourceConverter.sh生成CPUFriendProvider.kext或ssdt_data.dsl的工作副本。如果您还有ssdtPRGen.sh生成的SSDT，则可能需要合并它们。我不建议暂时添加这样的支持。所以我建议你使用CPUFriendProvider.kext存储您的定制数据。 ResourceConverter.sh的使用执行命令如下：1./ResourceConverter.sh --kext "/Users/sky/Desktop/Mac-CAD6701F7CEA0921.plist它会在当前目录生成CPUFriendProvider.kext,将CPUFriendProvider.kext和CPUFriend.kext复制到/EFI/Clover/kexts/Other，重建缓存，然后重启。重建缓存的命令为：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U /说明：其中的/Users/sky/Desktop/Mac-CAD6701F7CEA0921.plist是我自行修改的，可以通过直接调用系统提供的/System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources/Mac-CAD6701F7CEA0921.plist--kext &quot;file&quot; 用&quot;file&quot;提供的信息创建CPUFriendProvider.kext--acpi &quot;file&quot; 使用&quot;file&quot;提供的信息创建ssdt_data.dsl注意：创建的 kext/ssdt 位于当前工作目录中变量 &quot;file&quot; 应该是 /System/Library/Extensions/IOPlatformPluginFamily.kext/Contents/PlugIns/X86PlatformPlugin.kext/Contents/Resources 中的一个完整的plist，具有某些修改，而不是像原始的 FrequencyVectors 条目 原文链接CPUFriend Installation &amp; Usage 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>CPUFriend</tag>
        <tag>Lilu</tag>
        <tag>Plugins</tag>
        <tag>CPU变频</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Broadcom BCM94352z/DW1560驱动新姿势[新方法]]]></title>
    <url>%2FBroadcom-BCM94352z-DW1560-drive-new-posture.html</url>
    <content type="text"><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)驱动新姿势[新方法]引言昨晚口袋妖怪进群闲聊的时候提到过 她 之前维护的BrcmWLFixup已被 AirportBrcmFixup 取代。同时 她 发给我的AirportBrcmFixup/kern_brcmfx.cpp源码中已经增加了包括 _si_pmu_fvco_pllreg / Chip identificator checking patch / Wi-Fi 5 Ghz/Country code patch (required for 10.11) / Third party device patch / White list restriction patch / Failed PCIe configuration (device-id checking) 等问题的修复补丁之前我写的一篇教程已经不适用了，所以就测试之后重写一篇教程，目的是希望大家都少走弯路，更顺畅地用上黑苹果 问题的提出：黑苹果的系统安装好后的第一件事情是得让它连接上互联网，以完善其它的驱动程序。也可借此安装类似TeamViewer或者向日葵之类的远程控制程序，让其它人通过远程的方式帮你完善系统。本文要介绍的就是教你如何驱动BCM94352z这款最常采用的无线网卡。在macOS上，当使用BMC94532z NGFF WiFi卡时，AirportBrcm4360.kext不再成功加载。这个问题是由于驱动程序无法初始化fvco（频率压控振荡器）等原因引起的。 解决方案：同时支持10.11-10.14系统 驱动：下载：RehabMan-FakePCIID RehabMan-BrcmPatchRAM AirportBrcmFixup将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/EFI/CLOVER/kexts/Other目录下将文件AirportBrcmFixup.kext复制到/EFI/CLOVER/kexts/Other目录下,由于AirportBrcmFixup.kext是依赖于Lilu运行的插件，所以还需要检查该目录下必须存在Lilu.kext包括这些文件的目录看起来是这样的： 10.13.6/10.14蓝牙失效的解决方法将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext和AirportBrcmFixup.kext复制到/Library/Extensions目录下，以解决睡眠唤醒后可能引起的蓝牙失效的问题。当然，在重启前，还要重建一下系统的缓存，命令为：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U /如果嫌输入命令麻烦，也可以使用应用Kext Utility重建缓存。重启你的系统，检查WIFI/蓝牙是否工作正常。 写在最后这是驱动BCM94352z(DW1560)的基础教程，还有些高级设置需要各位多爬帖。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DW1560</tag>
        <tag>BCM94352z</tag>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>驱动</tag>
        <tag>WIFI</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AppleALC支持的Codecs列表及AppleALC的使用]]></title>
    <url>%2FAppleALC-Supported-codecs.html</url>
    <content type="text"><![CDATA[如何使用AppleALC如果您的编解码器支持，您需要完成的唯一任务是加载内核扩展，并查看它是否工作。您可以使用您的引导加载程序(比如：Clover)，但请记住在AppleHDA之前加载AppleALC（有关更多详细信息，请参阅sudo kextstat输出）。请注意，Lilu 也必须出现在AppleALC上。按照一个易于使用的指南来添加您的编解码器支持，如果它不在这里。请分享您的成功结果。备注：AppleALC不处理layout-id值，它希望你提供正确的DSDT(SSDT)。 如何控制AppleALCAppleALC接受不同的引导参数来控制其行为：-alcoff - 禁用自身;-alcdbg - 打印调试信息（如果扩展在调试模式下编译）;-alcbeta - 在不支持的系统（通常未发布或旧版）上启用AppleALC;-x或-s - 也将禁用AppleALC。所有Lilu启动参数都会影响AppleALC。 如何提取调试日志在使用-alcdbg -liludbg引导后，在终端Terminal中运行以下命令并保存输出。10.12及以后版本：log show --predicate 'process == &quot;kernel&quot; AND (eventMessage CONTAINS &quot;AppleALC&quot; OR eventMessage CONTAINS &quot;Lilu&quot;)' --style syslog --source10.11及以前版本cat /var/log/system.log | egrep '(AppleALC|Lilu)' 附：AppleALC支持的编解码器列表 更新日期：8-1-2019 Currently supported codecs v1.3.9VendorCodecRevisions and layoutsMinKernelMaxKernelAnalogDevicesAD19840x100400, layout 1113 (10.9)—AnalogDevicesAD1984A0x100400, layout 11, 13, 4413 (10.9)—AnalogDevicesAD1988Alayout 1213 (10.9)—AnalogDevicesAD1988Blayout 5, 7, 1213 (10.9)—AnalogDevicesAD2000Blayout 5, 713 (10.9)—CreativeCA01320x100918 layout 0, 1, 2, 3, 4, 5, 6, 9, 10, 11, 1213 (10.9)—CirrusLogicCS42100x100101 layout 1313 (10.9)—CirrusLogicCS42130x100100 layout 2813 (10.9)—ConexantCX8050layout 316 (10.12)—ConexantCX8070/CX11880layout 1513 (10.9)—ConexantCX8150layout 2113 (10.9)—ConexantCX8200layout 3, 15, 2116 (10.12)—ConexantCX8400layout 1213 (10.9)—ConexantCX205610x100000, layout 1113 (10.9)—ConexantCX20583layout 313 (10.9)—ConexantCX20585layout 3, 1313 (10.9)—ConexantCX20588layout 313 (10.9)—ConexantCX205900x100000, 0x100002, 0x100003, layout 3, 12, 13, 14, 2813 (10.9)—ConexantCX20641layout 11, 1313 (10.9)—ConexantCX20642layout 11, 1313 (10.9)—ConexantCX20722layout 316 (10.12)—ConexantCX20724layout 3, 1313 (10.9)—ConexantCX20751/CX20752layout 3, 21, 2813 (10.9)—ConexantCX20753/CX20754layout 3, 14, 15, 2116 (10.12)—ConexantCX20755layout 313 (10.9)—ConexantCX20756layout 3, 1313 (10.9)—ConexantCX20757layout 3, 2813 (10.9)—IDTIDT92HD66C3/65layout 313 (10.9)—IDTIDT92HD71B7Xlayout 313 (10.9)—IDTIDT92HD73C1X5layout 19, 2113 (10.9)—IDTIDT92HD75B2X5layout 313 (10.9)—IDTIDT92HD75B3X5layout 3, 1113 (10.9)—IDTIDT92HD99BXXlayout 313 (10.9)—IDTIDT92HD87B1layout 313 (10.9)—IDTIDT92HD81B1C5layout 3, 1113 (10.9)—IDTIDT92HD81B1X5layout 3, 11, 12, 20, 21, 2813 (10.9)—IDTIDT92HD87B1/3layout 12, 1313 (10.9)—IDTIDT92HD87B2/4layout 1213 (10.9)—IDTIDT92HD90BXXlayout 3, 1213 (10.9)—IDTIDT92HD91BXX0x100102, 0x100303 layout 3, 12, 13, 33, 8413 (10.9)—IDTIDT92HD93BXX0x100203, layout 1213 (10.9)—IDTIDT92HD95layout 1213 (10.9)—RealtekALC221layout 11, 1512 (10.8)—RealtekALC225/ALC3253layout 28, 30, 3313 (10.9)—RealtekALC230layout 13, 2013 (10.9)—RealtekALC233/ALC3236layout 3, 4, 5, 13, 21, 27, 28, 29, 32, 3313 (10.9)—RealtekALC235layout 3, 11, 12, 14, 15, 16, 21, 2813 (10.9)—RealtekALC2360x100001, 0x100002 layout 3, 11, 13, 15, 16, 54, 9913 (10.9)—RealtekALC255/ALC3234layout 3, 11, 13, 15, 17, 18, 21, 27, 28, 30, 31, 9913 (10.9)—RealtekALC256/ALC3246layout 5, 11, 13, 14, 21, 22, 28, 56, 5713 (10.9)—RealtekALC257layout 11, 1813 (10.9)—RealtekALC260layout 11, 1213 (10.9)—RealtekALC2620x100202 layout 7, 11, 12, 13, 2813 (10.9)—RealtekALC268layout 313 (10.9)—RealtekALC269/ALC271X0x100004, 0x100100, 0x100202, 0x100203 layout 1-11, 13-21, 27-33, 35, 40, 45, 55, 58, 66, 76, 88, 93, 99, 127, 18812 (10.8)—RealtekALC2700x100100, layout 3, 4, 21, 27, 2813 (10.9)—RealtekALC2720x100001, layout 3, 11, 1813 (10.9)—RealtekALC2740x100004, layout 2113 (10.9)—RealtekALC2750x100005, 0x100008, layout 3, 13, 2813 (10.9)—RealtekALC280layout 3, 4, 11, 13, 15, 16, 2113 (10.9)—RealtekALC2820x100003, layout 3, 4, 13, 22, 27, 28, 29, 41, 43, 51, 76, 86, 12712 (10.8)—RealtekALC283layout 1, 3, 11, 15, 44, 6613 (10.9)—RealtekALC284layout 313 (10.9)—RealtekALC285layout 11, 2113 (10.9)—RealtekALC2860x100002, 0x100003 layout 3, 1113 (10.9)—RealtekALC288layout 3, 13, 2313 (10.9)—RealtekALC289layout 2313 (10.9)—RealtekALC290/ALC3241layout 3, 4, 2813 (10.9)—RealtekALC292layout 12, 18, 2813 (10.9)—RealtekALC293layout 11, 28, 2913 (10.9)—RealtekALC294layout 11, 12, 13, 2113 (10.9)—RealtekALC295layout 1, 3, 13, 14, 15, 21, 28, 7713 (10.9)—RealtekALC2980x100101, 0x100103 layout 3, 11, 13, 21, 22, 28, 29, 30, 47, 66, 72, 9913 (10.9)—RealtekALC2990x100002 layout 21, 2213 (10.9)—RealtekALC6620x100101, 0x100300 layout 5, 7, 11, 12, 13, 15, 16, 1713 (10.9)—RealtekALC6630x100001, 0x100002, layout 3, 4, 15, 28, 9913 (10.9)—RealtekALC665layout 12, 1313 (10.9)—RealtekALC6680x100003, layout 3, 20, 27, 28, 2913 (10.9)—RealtekALC6700x100002, layout 1213 (10.9)—RealtekALC671layout 12, 1513 (10.9)—RealtekALC700layout 1113 (10.9)—RealtekALC8820x100101, layout 5, 713 (10.9)—RealtekALC8830x100002, layout 713 (10.9)—RealtekALC8850x100101, 0x100103 layout 1, 12, 1513 (10.9)—RealtekALC8870x100202, 0x100302, layout 1, 2, 3, 5, 7, 11, 13, 17, 18, 20, 33, 40, 50, 52, 53, 87, 9913 (10.9)—RealtekALC888/ALC12000x100101, 0x100001, 0x100202, 0x100302 layout 1, 2, 3, 4, 5, 7, 11, 27, 28, 2913 (10.9)—RealtekALC8890x100004, layout 1, 2, 3, 11, 1213 (10.9)—RealtekALC891/ALC8670x100002, layout 11, 1313 (10.9)—RealtekALC8920x100302, layout 1, 2, 3, 4, 5, 7, 12, 15, 16, 17, 18, 28, 31, 92, 97, 9913 (10.9)—RealtekALC898/ALC8990x100003, layout 1, 2, 3, 5, 7, 11, 13, 28, 65, 66, 98, 99, 10113 (10.9)—RealtekALC11500x100001, layout 1, 2, 3, 5, 7, 1112 (10.8)—RealtekALC12200x100003, layout 1, 2, 3, 5, 7, 11, 13, 15, 16, 27, 28, 29, 3415 (10.11)—RealtekALCS1200Alayout 1, 2, 312 (10.8)—RealtekALCS1220Alayout 1, 2, 3, 5, 7, 11, 20, 2115 (10.11)—SigmaTelSTAC92000x102201, layout 1112 (10.8)—VIAVT17050x100000, layout 2113 (10.9)—VIAVT18020x100000, layout 3, 33, 6513 (10.9)—VIAVT2020/VT20210x100100, layout 5, 7, 913 (10.9)—AMDRadeon 290/290X15 (10.11)—IntelHD460013 (10.9)—NvidiaGK20817 (10.13.4)—NvidiaGM20017 (10.13.4)—NvidiaGM20417 (10.13.4)—NvidiaGM20617 (10.13.4)—NvidiaGP10217 (10.13.4)—NvidiaGP10417 (10.13.4)—NvidiaGP10617 (10.13.4)—NvidiaGP10717 (10.13.4)—NvidiaGP10817 (10.13.4)— 附表:已知的编解码器型号及厂商列表声卡型号厂商ADXXXXAnalog DevicesAGEREXXXXLSIALCXXXXRealtekATIXXXXATICAXXXXCreativeCMIXXXXCMediaCMIXXXX2CMediaCSXXXXCirrus LogicCXXXXXConexantCHXXXXChrontelLGXXXXLGWMXXXXWolfson MicroelectronicsQEMUXXXXQEMUIDTXXXXIDTINTELXXXXIntelMOTOXXXXMotorolaNVIDIAXXXXNVIDIASIIXXXXSilicon ImageSTACXXXXSigmatelVTXXXXVIA 扩展阅读：Lilu支持的内核参数及插件列表 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Lilu</tag>
        <tag>AppleALC</tag>
        <tag>Codec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)的正确驱动姿势[原始方法]]]></title>
    <url>%2FBroadcom-WiFi-BlueTooth-BCM94352z-DW1560-the%20correct-drive-posture.html</url>
    <content type="text"><![CDATA[Broadcom WiFi/BlueTooth BCM94352z(DW1560)的正确驱动姿势[原始方法]黑苹果的系统安装好后的第一件事情是得让它连接上互联网，以完善其它的驱动程序。也可借此安装类似TeamViewer或者向日葵之类的远程控制程序，让其它人通过远程的方式帮你完善系统。本文要介绍的就是教你如何驱动BCM94352z这款最常采用的无线网卡。 问题的提出：在macOS Sierra上，当使用BMC94532z NGFF WiFi卡时，AirportBrcm4360.kext不再成功加载。这个问题是由于驱动程序无法初始化fvco（频率压控振荡器）引起的。 解决方案：两种方法任选其一【我假设你的系统是10.12.x，同时也给出即将发布的10.13.x的方法】使用应用程序Clover Configurator在Clover中的KextsToPatch应用以下补丁，以使BCM94352z启用WiFi：1234567891011121314151617181920212223Name: AirPortBrcm4360Comment: 在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4Find: pci14e4,43a0Replace: pci14e4,43b1MatchOS: 10.12.xInfoPlistPatch: trueName: AirPortBrcmNICComment: 在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4Find: pci14e4,43a0Replace: pci14e4,43b1MatchOS: 10.13.xInfoPlistPatch: trueName: AirPortBrcm4360Comment: 初始化fvco以加载BCM4360驱动[10.12.x] - DarkvoidFind: 81F952AA00007529 Replace: 81F952AA00006690Name: AirPortBrcmNICComment: 初始化fvco以加载BCM4360驱动[10.13.x]Find: 81F952AA00007529 Replace: 81F952AA00006690可以使用文本编辑器直接打开config.plist，将下面的内容粘贴到&lt;key&gt;KextsToPatch&lt;/key&gt;里1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;string&gt;pci14e4,43a0&lt;/string&gt; &lt;key&gt;InfoPlistPatch&lt;/key&gt; &lt;true/&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcm4360&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;string&gt;pci14e4,43b1&lt;/string&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;初始化fvco以加载BCM4360驱动[10.12.x] - Darkvoid&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; gflSqgAAdSk= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;com.apple.driver.AirPort.Brcm4360&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; gflSqgAAZpA= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;在Brcm4360驱动中添加BCM94352z的设备ID：0x43b114e4&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;string&gt;pci14e4,43a0&lt;/string&gt; &lt;key&gt;InfoPlistPatch&lt;/key&gt; &lt;true/&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcmNIC&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;string&gt;pci14e4,43b1&lt;/string&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;初始化fvco以加载BCM4360驱动[10.13.x]&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; gflSqgAAdSk= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;AirPortBrcmNIC&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; gflSqgAAZpA= &lt;/data&gt;&lt;/dict&gt;它看起来是这个样子的：config.plist文件的修改到此结束现在BCM94352z的WIFI应该已经可以工作了，你甚至都不需要添加仿冒WIFI的设备ID。当然，在重启前，还要重建一下系统的缓存，命令为：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U /重启你的系统，检查WIFI是否工作正常。 驱动你的蓝牙 Clover设置：使用应用程序Clover Configurator在Clover中的KextsToPatch应用以下补丁，以使BCM94352z启用蓝牙：1234Name: IOBluetoothFamilyComment: 10.11+-BT4LE-Handoff-Hotspot-lisai9093Find: 4885ff74 47488b07 Replace: 41be0f00 0000eb44可以使用文本编辑器直接打开config.plist，将下面的内容粘贴到&lt;key&gt;KextsToPatch&lt;/key&gt;里12345678910111213141516&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.11+-BT4LE-Handoff-Hotspot-lisai9093&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; SIX/dEdIiwc= &lt;/data&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOBluetoothFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; Qb4PAAAA60Q= &lt;/data&gt;&lt;/dict&gt; 驱动：下载：RehabMan-FakePCIID RehabMan-BrcmPatchRAM AirportBrcmFixup将文件BrcmFirmwareData.kext和BrcmPatchRAM2.kext复制到/EFI/CLOVER/kexts/Other目录下将文件FakePCIID_Broadcom_WiFi.kext和FakePCIID.kext复制到/EFI/CLOVER/kexts/Other目录下将文件AirportBrcmFixup.kext复制到/EFI/CLOVER/kexts/Other目录下,由于AirportBrcmFixup.kext是依赖于Lilu运行的插件，所以还需要检查该目录下必须存在Lilu.kext包括这些文件的目录看起来是这样的：当然，在重启前，还要重建一下系统的缓存，命令为：123sudo rm -rf /System/Library/Caches/com.apple.kext.caches/Startup/kernelcachesudo rm -rf /System/Library/PrelinkedKernels/prelinkedkernelsudo touch /System/Library/Extensions/ &amp;&amp; sudo kextcache -u /重启你的系统，检查蓝牙是否工作正常。 写在最后这是驱动BCM94352z(DW1560)的基础设置，还有些高级设置需要各位多爬帖。]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>DW1560</tag>
        <tag>BCM94352z</tag>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>驱动</tag>
        <tag>WIFI</tag>
        <tag>蓝牙</tag>
        <tag>BlueTooth</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[[持续更新] 黑苹果常见问题（某些未解决的问题）]]></title>
    <url>%2FUpdated-Frequently-Asked-Questions-in-Sierra-or-high-sierra.html</url>
    <content type="text"><![CDATA[[持续更新] 黑苹果常见问题 HD520/HD530/HD620/HD630显卡驱动的正确姿势在CLOVER里注入platform-id，下表是整理出的部分资料供参考；更详细的资料请移步显卡型号platform-id机型接口LVDSDPHDMIIntel HD Graphics 5200x19160000312Intel HD Graphics 5200x19160002312Intel HD Graphics 5300x19120000iMac17,133Intel HD Graphics 5300x191b0000MacBookPro13,3312Intel HD Graphics 5300x191b00061Intel HD Graphics 6200x59160000MacBookPro14,23111Intel HD Graphics 6300x59120000iMac18,2iMac18,333Intel HD Graphics 6300x591b0000MacBookPro14,33111还需要在CLOVER/kexts/Other放入Lilu.kext和IntelGraphicsFixup.kext，其它的基于Lilu的插件列表请稳步：Lilu插件列表更多的platform-id请移步：黑苹果必备：Intel核显platform ID整理 系统偏好设置里的触控板设置是空白的请更新VoodooPS2Controller.kext到1.8.25或以上版本，VoodooPS2Controller.kext下载链接 HD4400 / HD4600在Safari浏览器播放视频崩溃在CLOVER/kexts/Other放入Lilu.kext和IntelGraphicsFixup.kext还有可能会需要IntelGraphicsDVMTFixup延伸阅读：其它的基于Lilu的插件列表请稳步：Lilu插件列表 Haswell（和Broadwell）在引导后不久（睡眠醒来后）滞后/暂停/无响应登录后不久（有些在登录之前），鼠标和/或图形可能看起来没有反应。 这通常在大约20秒后清除。 从睡眠醒来后观察到相同的效果。这似乎只影响了Haswell的图形硬件。可能与SMBIOS的变化有关，当使用MacBookPro11,2与之前版本的OS X / macOS时，观察到类似的效果。 但现在的问题也出现在MacBookAir6,2和MacBookPro11,1上。该解决方案似乎是从帧缓冲区kext中的ig-platform数据中删除未使用的连接器：原文：在我的u430与10.12.4上遭遇了这个问题（醒来后和登录后的短暂滞后）。u430具有LVDS和单个HDMI。我使用ig-platform-id 0xa260006。 0xa260006具有LVDS，0105 DP，0204 DP。HDMI连接到0204，所以我修补该端口的HDMI（启用HDMI音频）。我也使用vbo 9mb光标字节补丁1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 9MB cursor bytes, vboFind: 0600260a 01030303 00000002 00003001 00006000Replace: 0600260a 01030303 00000002 00003001 000090001234Name: com.apple.driver.AppleIntelFramebufferAzulComment: HDMI-audio, port 0204, 0x0a260005 0x0a260006Find: 02040900 00040000 87000000Replace: 02040900 00080000 87000000现在，0105端口在帧缓冲区中的0204端口之前，但是我们不需要0105端口，因为它没有连接任何东西（并导致滞后），所以…策略是用0204替代0105，将端口数从3减少到2。我们已经知道，在AppleIntelFramebufferCapri中，0x01660004只有一个LVDS连接器，所以我们可以查看该ig-platform-id数据的标题，以发现我们需要将Azul中的ig平台数据从3个端口减少到2个。AppleIntelFramebufferCapri 0x01660004:104006601 01030101AppleIntelFramebufferAzul 0x0a260006:10600260A 01030303所以，最终有两个计数与连接器的数量有关，现在让我们来修改它们：1234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 9MB光标字节(vbo)，仅2端口(RehabMan)Find: 0600260a 01030303 00000002 00003001 00006000Replace: 0600260a 01030202 00000002 00003001 000090001234Name: com.apple.driver.AppleIntelFramebufferAzulComment: 0x0a260006 关闭 0204 端口, 改变 0105 DP 端口为 0204 HDMI (RehabMan)Find: 01050900 00040000 87000000 02040900 00040000 87000000Replace: 02040900 00080000 87000000 FF000000 01000000 40000000结果：登录后睡眠不再滞后。 解决10.13(High Sierra)/10.12(Sierra) Clover开机出现8个苹果使用Clover Configurator打开config.plist - Kernel and Kext Patches - KextsToPatch，新添加：12345Name: IOGraphicsFamilyComment: 10.12+-第二阶段花屏Find: 01000075 25Replace: 010000eb 25MatchOS: 10.12.x12345Name: IOGraphicsFamilyComment: 10.13+-第二阶段花屏Find: 01000075 22Replace: 010000eb 22MatchOS: 10.13.x另一种格式：123456789101112131415161718192021222324252627282930313233343536&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.12+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSU= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.12.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yU= &lt;/data&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;Comment&lt;/key&gt; &lt;string&gt;10.13+-第二阶段花屏补丁&lt;/string&gt; &lt;key&gt;Disabled&lt;/key&gt; &lt;false/&gt; &lt;key&gt;Find&lt;/key&gt; &lt;data&gt; AQAAdSI= &lt;/data&gt; &lt;key&gt;MatchOS&lt;/key&gt; &lt;string&gt;10.13.x&lt;/string&gt; &lt;key&gt;Name&lt;/key&gt; &lt;string&gt;IOGraphicsFamily&lt;/string&gt; &lt;key&gt;Replace&lt;/key&gt; &lt;data&gt; AQAA6yI= &lt;/data&gt;&lt;/dict&gt; 未完待续 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>10.12</tag>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>Lilu</tag>
        <tag>Plugins</tag>
        <tag>常见问题</tag>
        <tag>Clover</tag>
        <tag>platform-id</tag>
        <tag>Patch</tag>
        <tag>wake</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hda-verb参数详表]]></title>
    <url>%2Fhda-verb-parameter-detail-table.html</url>
    <content type="text"><![CDATA[hda-verb参数详表hda-verb的由来hda-verb是linux下面的alsa-project的一条命令，它的作用是发送HD-audio命令。 命令格式：linux:% hda-verb /dev/snd/hwC0D0 0x12 0x701 2Mac:$ hda-verb 0x12 0x701 2输入命令：1hda-verb输出信息：1234hda-verb for CodecCommander (based on alsa-tools hda-verb) usage: hda-verb [option] hwdep-device nid verb param -l List known verbs and parameters -L List known verbs and parameters (one per line)参数数值GET_STREAM_FORMAT0x0a00GET_AMP_GAIN_MUTE0x0b00GET_PROC_COEF0x0c00GET_COEF_INDEX0x0d00PARAMETERS0x0f00GET_CONNECT_SEL0x0f01GET_CONNECT_LIST0x0f02GET_PROC_STATE0x0f03GET_SDI_SELECT0x0f04GET_POWER_STATE0x0f05GET_CONV0x0f06GET_PIN_WIDGET_CONTROL0x0f07GET_UNSOLICITED_RESPONSE0x0f08GET_PIN_SENSE0x0f09GET_BEEP_CONTROL0x0f0aGET_EAPD_BTLENABLE0x0f0cGET_DIGI_CONVERT_10x0f0dGET_DIGI_CONVERT_20x0f0eGET_VOLUME_KNOB_CONTROL0x0f0fGET_GPIO_DATA0x0f15GET_GPIO_MASK0x0f16GET_GPIO_DIRECTION0x0f17GET_GPIO_WAKE_MASK0x0f18GET_GPIO_UNSOLICITED_RSP_MASK0x0f19GET_GPIO_STICKY_MASK0x0f1aGET_CONFIG_DEFAULT0x0f1cGET_SUBSYSTEM_ID0x0f20SET_STREAM_FORMAT0x200SET_AMP_GAIN_MUTE0x300SET_PROC_COEF0x400SET_COEF_INDEX0x500SET_CONNECT_SEL0x701SET_PROC_STATE0x703SET_SDI_SELECT0x704SET_POWER_STATE0x705SET_CHANNEL_STREAMID0x706SET_PIN_WIDGET_CONTROL0x707SET_UNSOLICITED_ENABLE0x708SET_PIN_SENSE0x709SET_BEEP_CONTROL0x70aSET_EAPD_BTLENABLE0x70cSET_DIGI_CONVERT_10x70dSET_DIGI_CONVERT_20x70eSET_VOLUME_KNOB_CONTROL0x70fSET_GPIO_DATA0x715SET_GPIO_MASK0x716SET_GPIO_DIRECTION0x717SET_GPIO_WAKE_MASK0x718SET_GPIO_UNSOLICITED_RSP_MASK0x719SET_GPIO_STICKY_MASK0x71aSET_CONFIG_DEFAULT_BYTES_00x71cSET_CONFIG_DEFAULT_BYTES_10x71dSET_CONFIG_DEFAULT_BYTES_20x71eSET_CONFIG_DEFAULT_BYTES_30x71fSET_CODEC_RESET0x7ff已知参数：参数数值VENDOR_ID0x00SUBSYSTEM_ID0x01REV_ID0x02NODE_COUNT0x04FUNCTION_TYPE0x05AUDIO_FG_CAP0x08AUDIO_WIDGET_CAP0x09PCM0x0aSTREAM0x0bPIN_CAP0x0cAMP_IN_CAP0x0dCONNLIST_LEN0x0ePOWER_STATE0x0fPROC_CAP0x10GPIO_CAP0x11AMP_OUT_CAP0x12VOL_KNB_CAP0x13 例子：设置节点0x19参数为SET_PIN_WIDGET_CONTROL，值为0x241234$ hda-verb 0x19 SET_PIN_WIDGET_CONTROL 0x24nid = 0x19, verb = 0x707, param = 0x24command 0x01970724 --&gt; result = 0x00000000也可以写成：1234$ hda-verb 0x19 0x707 0x24nid = 0x19, verb = 0x707, param = 0x24command 0x01970724 --&gt; result = 0x00000000CodecCommander经常使用的命令：12$ hda-verb 0x19 SET_PIN_WIDGET_CONTROL 0x25$ hda-verb 0x21 SET_UNSOLICITED_ENABLE 0x83 备注：字符串不区分大小写此外，它不一定是完整的字符串，但只能是唯一的例如 par和PARAMETER的参数是相同的set_a就足以代替SET_AMP_GAIN_MUTE 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>linux</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>CC</tag>
        <tag>CodecCommander</tag>
        <tag>codec</tag>
        <tag>hda-verb</tag>
        <tag>ALCPlugFix</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB9 17A360a with Clover 4189原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10-13DB9-17A360a-with-Clover-4189.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB9 17A360a with Clover 4189原版镜像本镜像采用官方原版app制作，集成Clover 4189，支持UEFI启动安装。Clover默认config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![Clover Configurator](http://7.daliansky.net/Clover Configurator.png)![Other Drivers](http://7.daliansky.net/Other Drivers.png) 下载链接: https://pan.baidu.com/s/1pLMBX4BMD5 (macOS High Sierra 10.13DB9 17A360a with Clover 4189.dmg) = 186b3b10d8f4c4f2a6642454784dfc12]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>DB9</tag>
        <tag>17A360a</tag>
        <tag>dmg</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS各版本Sierra(10.12.6)/High Sierra(10.13)/Mojave(10.14)/Catalina(10.15)安装文件下载]]></title>
    <url>%2FMac-Sierra-and-High-Sierra-Installer-App-Download.html</url>
    <content type="text"><![CDATA[MacOS各版本OS X EI Capitan(10.11.6)/Sierra(10.12.6)/High Sierra(10.13)/Mojave(10.14)/Catalina(10.15)安装文件下载需要在Mac系统下通过App Store进行下载 Catalina(10.15)正式版下载链接：https://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12 Mojave(10.14)正式版下载链接：https://itunes.apple.com/us/app/macos-mojave/id1398502828?mt=12 High Sierra(10.13)正式版下载链接：[https://itunes.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12 Sierra(10.12.6)正式版下载链接：https://itunes.apple.com/cn/app/macos-sierra/id1127487414?mt=12 OS X El Capitan(10.11.6)正式版下载链接https://itunes.apple.com/cn/app/os-x-el-capitan/id1147835434?mt=12 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <tags>
        <tag>10.13</tag>
        <tag>Sierra</tag>
        <tag>High Sierra</tag>
        <tag>下载</tag>
        <tag>10.12.6</tag>
        <tag>Mojave</tag>
        <tag>10.14</tag>
        <tag>Catalina</tag>
        <tag>10.15</tag>
        <tag>Download</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[黑苹果必备：Intel核显platform ID整理及smbios速查表]]></title>
    <url>%2FIntel-core-display-platformID-finishing.html</url>
    <content type="text"><![CDATA[本文的由来经常有网友进群问某某机型需要注入哪个platform-id才能正确地驱动显卡，每到这个时候，我都需要翻出Clover自带的⁨src⁩ ▸ ⁨edk2⁩ ▸ ⁨Clover⁩ ▸ ⁨rEFIt_UEFI⁩ ▸ ⁨Platform⁩ ▸ gma.c查找显卡参数。于是我就想把它整理出来方便大家查询，markdown的表格排版对我来说是一种考验，但更像是一种折磨。还好还好，它没花费我太长的时间。 smbios速查表SMBIOS IDCPU FamilyGPUs (S = Switchable)Year and sizeMacBook1,1YonahGMA 95013&quot; 2006MacBook2,1MeromGMA 95013&quot; 2006/07&quot;MacBook3,1MeromGMA X310013&quot; 2007MacBook4,1PenrynGMA X310013&quot; 2008MacBook4,2PenrynGMA X310013&quot; 2008MacBook5,1PenrynGeForce 9400M13&quot; 2008MacBook5,2PenrynGeForce 9400M13&quot; 2009MacBook6,1PenrynGeForce 9400M13&quot; 2009MacBook7,1PenrynGeForce 320M13&quot; 2010MacBook8,1Broadwell mHD 530012&quot; 2015MacBook9,1Skylake mHD 51512&quot; 2016MacBook10,1Kaby Lake mHD 61512&quot; 2017————MacBookAir1,1MeromGMA X310013&quot; 2008MacBookAir2,1PenrynGeForce 9400M13&quot; 2008/09&quot;MacBookAir3,1PenrynGeForce 320M11&quot; 2010MacBookAir3,2PenrynGeForce 320M13&quot; 2010MacBookAir4,1Sandy BridgeHD 300011&quot; 2011MacBookAir4,2Sandy BridgeHD 300013&quot; 2011MacBookAir5,1Ivy BridgeHD 400011&quot; 2012MacBookAir5,2Ivy BridgeHD 400013&quot; 2012MacBookAir6,1HaswellHD 500011&quot; 2013MacBookAir6,2HaswellHD 500013&quot; 2013MacBookAir7,1BroadwellHD 600011&quot; 2015MacBookAir7,2BroadwellHD 600013&quot; 2015MacBookAir8,1Kaby LakeIntel UHD Graphics 61713&quot; 2018MacBookAir8,2Kaby LakeIntel UHD Graphics 61713&quot; 2019————MacBookPro1,1YonahRadeon X160015&quot; 2006MacBookPro1,2YonahRadeon X160017&quot; 2006MacBookPro2,1MeromRadeon X160015&quot; 2006MacBookPro2,2MeromRadeon X160017&quot; 2006MacBookPro3,1MeromGeForce 8600M GT15&quot;/17&quot; 2007MacBookPro4,1PenrynGeForce 8600MG GT17&quot; 2008MacBookPro5,1PenrynGeForce 9400M/9600M GTS, 15&quot; 2008/09&quot;MacBookPro5,2PenrynGeForce 9400M/9600M GTS, 17&quot; 2009MacBookPro5,3PenrynGeForce 9400M/9600M GTS, 15&quot; 2009MacBookPro5,4PenrynGeForce 9400M/9600M GTS, 15&quot; 2009MacBookPro5,5PenrynGeForce 9400M/9600M GTS, 13&quot; 2009MacBookPro7,1PenrynGeForce 320M13&quot; 2010MacBookPro6,1ArrandaleHD Graphics/GeForce GT 330MS, 17&quot; 2010MacBookPro6,2ArrandaleHD Graphics/GeForce GT 330MS, 15&quot; 2010MacBookPro8,1Sandy BridgeHD 300013&quot; 2011MacBookPro8,2Sandy BridgeHD 3000/Radeon HD 6490MS, 15&quot; 2011MacBookPro8,3Sandy BridgeHD 3000/Radeon HD 6750MS, 17&quot; 2011MacBookPro9,1Ivy BridgeHD 4000/GeForce GT 650MS, 15&quot; 2012MacBookPro9,2Ivy BridgeHD 400013&quot; 2012MacBookPro10,1Ivy BridgeHD 4000/GeForce GT 650MS, 15&quot; 2012/13&quot;MacBookPro10,2Ivy BridgeHD 400013&quot; 2012/13&quot;MacBookPro11,1HaswellIris 510013&quot; 2013/14&quot;MacBookPro11,2HaswellIris Pro 520015&quot; 2013/14&quot;MacBookPro11,3HaswellIris Pro 5200/GeForce GT 750MS, 15&quot; 2013/14&quot;MacBookPro11,4HaswellIris Pro 520015&quot; 2015MacBookPro11,5HaswellIris Pro 5200/Radeon R9 M370X15&quot; 2015MacBookPro12,1BroadwellIris 610013&quot; 2015MacBookPro13,1SkylakeIris 54013&quot; 2016MacBookPro13,2SkylakeIris 55013&quot; 2016MacBookPro13,3SkylakeHD 530/Radeon Pro 45015&quot; 2016MacBookPro14,1Kaby LakeIris Plus 64013&quot; 2017MacBookPro14,2Kaby LakeIris Plus 65013&quot; 2017MacBookPro14,3Kaby LakeHDs 630/Radeon Pro 55515&quot; 2017MacBookPro15,1Caffee LakeIntel UHD Graphics 63015&quot; 2018MacBookPro15,2Caffee LakeIntel Iris Plus Graphics 65513&quot; 2018MacBookPro15,3Caffee LakeUHD630/Radeon Pro555X/560XRadeon Pro Vega 16/2015&quot; 2019MacBookPro15,4Caffee LakeIntel Iris Plus Graphics 64513&quot; 2019MacBookPro16,1Caffee LakeIntel UHD Graphics 630AMD Radeon Pro 5300M/5500M16&quot; 2019————iMac4,1YonahRadeon X160017&quot;/20&quot; 2006iMac4,2YonahGMA 95017&quot; 2006iMac5,1MeromRadeon X160017&quot;/20&quot; 2006iMac5,2MeromGMA 95017&quot; 2006iMac6,1MeromGeForce 7300GT24&quot; 2006iMac7,1MeromRadeon HD 2400 XT20&quot;/24&quot; 2007iMac8,1PenrynRadeon HD 2400 XT20&quot;/24&quot; 2008iMac9,1PenrynGeForce 9400M20&quot;/24&quot; 2009iMac10,1WolfdaleGeForce 9400M21.5&quot;/27&quot; 2009iMac10,1WolfdaleRadeon HD 467021.5&quot;/27&quot; 2009iMac11,1LynnfieldRadeon HD 485027&quot; 2009iMac11,2ClarkdaleRadeon HD 467021.5&quot; 2010iMac11,3ClarkdaleRadeon HD 567027&quot; 2010iMac12,1Sandy BridgeRadeon HD 6750M21.5&quot; 2011iMac12,2Sandy BridgeRadeon HD 6770M27&quot; 2011iMac13,1Ivy BridgeGeForce GT 640M21.5&quot; 2012iMac13,2Ivy BridgeGeForce GTX 660M27&quot; 2012iMac13,1Ivy BridgeHD 400021.5&quot; 2013iMac14,1HaswellIris Pro 520021.5&quot; 2013iMac14,1HaswellGeForce GT 750M21.5&quot; 2013iMac14,2HaswellGeForce GT 755M27&quot; 2013iMac14,4HaswellHD 500021.5&quot; 2014iMac15,1HaswellRadeon R9 M290X27&quot; 2014/15&quot;iMac16,1BroadwellHD 6000 or Iris Pro 620021.5&quot; 2015iMac16,2BroadwellIris Pro 620021.5&quot; 2015iMac17,1SkylakeRadeon R9 M38027&quot; 2015iMac18,1Kaby LakeIris Plus 64021.5&quot; 2017iMac18,2Kaby LakeRadeon Pro 55521.5&quot; 2017iMac18,3Kaby LakeRadeon Pro 57027&quot; 2017iMac19,1Coffee LakeRadeon Pro 5802017iMac19,2Coffee LakeRadeon Pro 580X/Radeon Pro Vega 482019————iMacPro1,1Radeon Pro Vega 56/64/64X2017————Macmini1,1YonahGMA 9502006Macmini2,1MeromGMA 9502007Macmini3,1PenrynGeForce 9400M2009Macmini4,1PenrynGeForce 320M2010Macmini5,1Sandy BridgeHD 30002011Macmini5,2Sandy BridgeRadeon HD 6630M2011Macmini5,3Sandy BridgeHD 30002011Macmini6,1Ivy BridgeHD 40002012Macmini6,2Ivy BridgeHD 40002012Macmini7,1HaswellHD 5000 or Iris 51002014Macmini8,1Coffee LakeUHD Graphics 6302018————MacPro1,1WoodcrestGeForce 7300 GT2006MacPro2,1ClovertownGeForce 7300 GT2006MacPro3,1HarpertownRadeon HD 2600 XT2008MacPro4,1NehalemGeForce GT 1202009MacPro5,1NehalemRadeon HD 57702010MacPro5,1WestmereRadeon HD 57702012MacPro6,1Ivy BridgeEPFirePro D3002013MacPro7,1Cascade LakeRadeon Pro 580X/Radeon Pro Vega II2019————Xserve1,1WoodcrestRadeon X13002006Xserve2,1HarpertownRadeon X13002008Xserve3,1NehalemGeForce GT 1202009 INTEL核显平台 sandy bridge平台[BL:0x0710]显卡型号platform-id机型接口LVDSDPHDMIIntel HD Graphics 30000x00010000MacBookPro8,1MacBookPro8,2MacBookPro8,3413Intel HD Graphics 30000x0002000011Intel HD Graphics 30000x00030010Macmini5,1Macmini5,3321Intel HD Graphics 30000x00030020Macmini5,1Macmini5,3321Intel HD Graphics 30000x00030030Macmini5,20Intel HD Graphics 30000x00040000MacBookAir4,1MacBookAir4,2312Intel HD Graphics 30000x00050000iMac12,1/iMac12,20123456789101112131415UINT8 sandy_bridge_hd_vals[13][4] = &#123; &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //0 "AAPL00,DataJustify" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //1 "AAPL00,Dither" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,LinkFormat" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //3 "AAPL00,LinkType" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PixelFormat" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //5 "AAPL00,T1" &#123; 0x14, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,T2" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //7 "AAPL00,T3" &#123; 0x2c, 0x01, 0x00, 0x00 &#125;, //8 "AAPL00,T4" &#123; 0x00, 0x00, 0x00, 0x00 &#125;, //9 "AAPL00,T5" &#123; 0x14, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,T6" &#123; 0xf4, 0x01, 0x00, 0x00 &#125;, //11 "AAPL00,T7" &#123; 0x04, 0x00, 0x00, 0x00 &#125;, //12 "graphic-options"&#125;; ivy bridge平台[BL:0x0710]型号platform-id机型接口LVDSDPHDMIIntel HD Graphics 40000x01660000413Intel HD Graphics 40000x01660001MacBookPro10,24121Intel HD Graphics 40000x01660002MacBookPro10,111Intel HD Graphics 40000x01660003MacBookPro9,2413Intel HD Graphics 40000x01660004MacBookPro9,111Intel HD Graphics 40000x0166000533Intel HD Graphics 40000x01660006iMac13,10Intel HD Graphics 40000x01660007iMac13,20Intel HD Graphics 40000x01660008MacBookAir5,1312Intel HD Graphics 40000x01660009MacBookAir5,2312Intel HD Graphics 40000x0166000aMacmini6,1321Intel HD Graphics 40000x0166000bMacmini6,2321123UINT8 ivy_bridge_hd_vals[1][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options"&#125;; haswell平台显卡型号platform-id机型接口LVDSDPeDPHDMI0x0406000031110x0c0600003111Intel HD Graphics 46000x041600003111Intel HD Graphics 44000x0a16000031110x0c1600003111Intel HD Graphics 50000x042600003111Intel HD Graphics 50000x0a26000031110x0c2600003111Intel Iris Pro Graphics 52000x0d26000031110x0d220003iMac14,1iMac14,4312Intel HD Graphics 46000x04120004Intel HD Graphics 50000x0a260005312Intel HD Graphics 50000x0a260006MacBookAir6,1MacBookAir6,2Macmini7,1312Intel Iris Pro Graphics 52000x0d260007MacBookPro11,2MacBookPro11,34121Intel Iris Graphics 51000x0a2e0008MacBookPro11,1312Intel HD Graphics 46000x0412000biMac15,10123UINT8 haswell_hd_vals[1][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options"&#125;; broadwell平台显卡型号platform-id机型接口LVDSDPeDPHDMI0x1606000031110x160e0001312Intel HD Graphics 55000x161600003111Intel HD Graphics 53000x161e00003111Intel Iris Pro Graphics 62000x162200003111Intel HD Graphics 60000x162600003111Intel Iris Graphics 61000x162b00003111Intel HD Graphics 53000x161e0001MacBook8,13120x16060002312Intel HD Graphics 55000x16160002312Intel Iris Pro Graphics 62000x16220002312Intel HD Graphics 60000x16260002312Intel Iris Graphics 61000x162b0002MacBookPro12,1312Intel HD Graphics 56000x16120003312Intel HD Graphics 60000x16260004312Intel Iris Graphics 61000x162b0004312Intel HD Graphics 60000x16260005312Intel HD Graphics 60000x16260006iMac16,1MacBookAir7,1MacBookAir7,2312Intel Iris Pro Graphics62000x16220007iMac16,2312Intel HD Graphics 60000x16200008211Intel Iris Graphics 61000x162b00083121234UINT8 broadwell_hd_vals[2][4] = &#123; &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //0 "graphics-options" &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,ig-tcon-scaler"&#125;; skylake平台[BL:0x056c]显卡型号platform-id机型接口LVDSDPHDMIIntel HD Graphics 5300x1912000033Intel HD Graphics 5200x19160000312Intel Iris Graphics 5400x19260000312Intel Iris Graphics 5500x19270000312Intel HD Graphics 5300x191b0000MacBookPro13,3312Intel HD Graphics 5150x191e0000312Intel Iris Pro Graphics 5800x193b00003111Intel HD Graphics 530/4K*0x193b0005MacBookPro13,1413Intel HD Graphics 5100x190200010Intel HD Graphics 5300x1912000100x191700010Intel Iris Pro Graphics 5800x193200010Intel HD Graphics 5200x19160002312Intel Iris Graphics 5400x19260002MacBookPro13,1312Intel HD Graphics 5150x191e0003MacBook9,1312Intel Iris Graphics 5400x19260004312Intel Iris Graphics 5500x19270004MacBookPro13,2312Intel HD Graphics 5300x191b00061Intel Iris Graphics 5400x192600073121234567891011121314UINT8 skylake_hd_vals[12][4] = &#123; &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //0 "AAPL,Gfx324" &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,GfxYTile" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,PanelCycleDelay" &#123; 0x11, 0x00, 0x00, 0x08 &#125;, //3 "AAPL00,PanelPowerDown" - MacBook &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PanelPowerOff" - MacBook &#123; 0xe2, 0x00, 0x00, 0x08 &#125;, //5 "AAPL00,PanelPowerOn" - MacBook &#123; 0x48, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,PanelPowerUp" - MacBook &#123; 0x3c, 0x00, 0x00, 0x08 &#125;, //7 "AAPL00,PanelPowerDown" - MacBookPro &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //8 "AAPL00,PanelPowerOff" - MacBookPro &#123; 0x19, 0x01, 0x00, 0x08 &#125;, //9 "AAPL00,PanelPowerOn" - MacBookPro &#123; 0x30, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,PanelPowerUp" - MacBookPro &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //11 "graphic-options"&#125;; kabylake平台[BL:0x056c]显卡型号platform-id机型接口LVDSDPHDMIIntel HD Graphics 6300x59120000iMac18,2iMac18,333Intel HD Graphics 6300x59120003FCPX加速用0Intel HD Graphics 6200x59160000MacBookPro14,2312Intel HD Graphics 6200x591600093120x59180002Intel HD Graphics 6300x591b0000MacBookPro14,3312Intel HD Graphics 6300x591b0006110x591c0005312Intel HD Graphics 6150x591e0000312Intel HD Graphics 6150x591e0001MacBook10,1312Intel HD Graphics 6350x59230000312Intel Iris Plus Graphics 6400x59260000312Intel Iris Plus Graphics 6400x59260002MacBookPro14,1iMac18,1312Intel Iris Plus Graphics 6400x59260007312Intel Iris Plus Graphics 6500x59270000312Intel Iris Plus Graphics 6500x59270004MacBookPro14,2312Intel Iris Plus Graphics 6500x59270009312Intel UHD Graphics 6170x87c00000312Intel UHD Graphics 6170x87c00005MacBookAir8,13121234567891011121314UINT8 kabylake_hd_vals[12][4] = &#123; &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //0 "AAPL,Gfx324" - MacBookPro &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,GfxYTile" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,PanelCycleDelay" &#123; 0x11, 0x00, 0x00, 0x08 &#125;, //3 "AAPL00,PanelPowerDown" - MacBook &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PanelPowerOff" - MacBook &#123; 0xe2, 0x00, 0x00, 0x08 &#125;, //5 "AAPL00,PanelPowerOn" - MacBook &#123; 0x48, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,PanelPowerUp" - MacBook &#123; 0x3c, 0x00, 0x00, 0x08 &#125;, //7 "AAPL00,PanelPowerDown" - MacBookPro &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //8 "AAPL00,PanelPowerOff" - MacBookPro &#123; 0x19, 0x01, 0x00, 0x08 &#125;, //9 "AAPL00,PanelPowerOn" - MacBookPro &#123; 0x30, 0x00, 0x00, 0x00 &#125;, //10 "AAPL00,PanelPowerUp" - MacBookPro &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //11 "graphic-options"&#125;; caffeelake平台[BL:0xffff VRAM:1536MB FBMEM:0MB]显卡型号platform-id机型接口LVDSDPSTOLEN0x3E00000031257mbIntel UHD Graphics 6303E910003FCPX加速用Intel UHD Graphics 6303E92000031257mbIntel UHD Graphics 6303E920003FCPX加速用Intel UHD Graphics 6303E9200091157mbIntel UHD Graphics 6303E9B0000MacBookPro15,131257mbIntel UHD Graphics 6303E980003FCPX加速用Intel UHD Graphics 6303E9B00061138mbIntel UHD Graphics 6303E9B0007Macmini8,13357mbIntel UHD Graphics 6303E9B0008157mbIntel UHD Graphics 6303E9B000931257mbIntel Iris Plus Graphics 6553EA5000031257mbIntel Iris Plus Graphics 6553EA50004MacBookPro15,231257mbIntel Iris Plus Graphics 6553EA5000531257mbIntel Iris Plus Graphics 6553EA5000631257mbIntel Iris Plus Graphics 6553EA5000931257mb12345678910UINT8 coffeelake_hd_vals[8][4] = &#123; &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //0 "AAPL,Gfx324" - MacBookPro &#123; 0x01, 0x00, 0x00, 0x00 &#125;, //1 "AAPL,GfxYTile" &#123; 0xfa, 0x00, 0x00, 0x00 &#125;, //2 "AAPL00,PanelCycleDelay" &#123; 0x3c, 0x00, 0x00, 0x08 &#125;, //3 "AAPL00,PanelPowerDown" - MacBookPro &#123; 0x11, 0x00, 0x00, 0x00 &#125;, //4 "AAPL00,PanelPowerOff" - MacBookPro &#123; 0x19, 0x01, 0x00, 0x08 &#125;, //5 "AAPL00,PanelPowerOn" - MacBookPro &#123; 0x30, 0x00, 0x00, 0x00 &#125;, //6 "AAPL00,PanelPowerUp" - MacBookPro &#123; 0x0c, 0x00, 0x00, 0x00 &#125;, //7 "graphic-options"&#125;; 新增平台显卡型号platform-id机型接口LVDSDPHDMIIntel UHD Graphics 6200x3ea00000仿冒3e9b0007Intel UHD Graphics 6170x87c00000MacBookAir8,1Intel UHD Graphics 6300x3e9b0007MacBookPro15,1Macmini8,13 已知GPU的列表static struct gma_gpu_t KnownGPUS[] = &#123; &#123; 0xFFFF, "Intel Unsupported" &#125;, // common name for unsuported devices#if WILL_WORK //============== PowerVR =================== //--------Canmore/Sodaville/Groveland------- &#123; 0x2E5B, "Intel 500" &#125;, // //----------------Poulsbo------------------- &#123; 0x8108, "Intel 500" &#125;, // Menlow &#123; 0x8109, "Intel 500" &#125;, // Menlow //----------------Lincroft------------------ &#123; 0x4102, "Intel 600" &#125;, // Moorestown //----------------Cedarview----------------- &#123; 0x0BE0, "Intel GMA 3600" &#125;, // Cedar Trail &#123; 0x0BE1, "Intel GMA 3600" &#125;, // Cedar Trail &#123; 0x0BE2, "Intel GMA 3650" &#125;, // Cedar Trail &#123; 0x0BE3, "Intel GMA 3650" &#125;, // Cedar Trail //----------------Cloverview---------------- &#123; 0x08C7, "Intel GMA" &#125;, // Clover Trail &#123; 0x08C8, "Intel GMA" &#125;, // Clover Trail &#123; 0x08C9, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CA, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CB, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CC, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CD, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CE, "Intel GMA" &#125;, // Clover Trail &#123; 0x08CF, "Intel GMA" &#125;, // Clover Trail //============== 1st generation ============ //----------------Auburn-------------------- &#123; 0x7800, "Intel 740" &#125;, // Desktop - Intel 740 GMCH Express Chipset Family //----------------Portola------------------- &#123; 0x1240, "Intel 752" &#125;, // Desktop - Intel 752 GMCH Express Chipset Family //----------------Whitney------------------- &#123; 0x7121, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810 GMCH Express Chipset Family &#123; 0x7123, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810-DC100 GMCH Express Chipset Family &#123; 0x7125, "Intel 3D graphics 810" &#125;, // Desktop - Intel 810E GMCH Express Chipset Family //----------------Solano-------------------- &#123; 0x1132, "Intel 3D graphics 815" &#125;, // Desktop - Intel 815 GMCH Express Chipset Family //============== 2nd generation ============ //----------------Almador------------------- &#123; 0x3577, "Intel Extreme Graphics 830" &#125;, // Mobile - Intel 830M GMCH Express Chipset Family &#123; 0x357B, "Intel Extreme Graphics 835" &#125;, // Desktop - Intel 835G GMCH Express Chipset Family //----------------Brookdale----------------- &#123; 0x2562, "Intel Extreme Graphics 845" &#125;, // Desktop - Intel 845G GMCH Express Chipset Family //----------------Montara------------------- &#123; 0x358E, "Intel Extreme Graphics 2 854" &#125;, // Mobile - Intel 852GM/855GM GMCH Express Chipset Family &#123; 0x3582, "Intel Extreme Graphics 2 855" &#125;, // Mobile - Intel 852GM/855GM GMCH Express Chipset Family //----------------Springdale---------------- &#123; 0x2572, "Intel Extreme Graphics 2 865" &#125;, // Desktop - Intel 865G Express Chipset Family //============== 3rd generation ============ //----------------Grantsdale---------------- &#123; 0x2582, "Intel GMA 900" &#125;, // Desktop - Intel 915G Express Chipset Family &#123; 0x258A, "Intel GMA 900" &#125;, // Desktop - Intel 915GM Express Chipset Family &#123; 0x2782, "Intel GMA 900" &#125;, // Desktop - Intel 915GV Express Chipset Family //----------------Alviso-------------------- &#123; 0x2592, "Intel GMA 900" &#125;, // Mobile - Intel 82915GM/GMS, 910GML Express Chipset Family &#123; 0x2792, "Intel GMA 900" &#125;, // Mobile - Intel 82915GM/GMS, 910GML Express Chipset Family#endif //----------------Lakeport------------------ &#123; 0x2772, "Intel GMA 950" &#125;, // Desktop - Intel 82945G Express Chipset Family &#123; 0x2776, "Intel GMA 950" &#125;, // Desktop - Intel 82945G Express Chipset Family //----------------Calistoga----------------- &#123; 0x27A2, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family - MacBook1,1/MacBook2,1 &#123; 0x27A6, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family &#123; 0x27AE, "Intel GMA 950" &#125;, // Mobile - Intel 945GM Express Chipset Family#if WILL_WORK //----------------Bearlake------------------ &#123; 0x29B2, "Intel GMA 3100" &#125;, // Desktop - Intel Q35 Express Chipset Family &#123; 0x29B3, "Intel GMA 3100" &#125;, // Desktop - Intel Q35 Express Chipset Family &#123; 0x29C2, "Intel GMA 3100" &#125;, // Desktop - Intel G33/G31 Express Chipset Family &#123; 0x29C3, "Intel GMA 3100" &#125;, // Desktop - Intel G33/G31 Express Chipset Family &#123; 0x29D2, "Intel GMA 3100" &#125;, // Desktop - Intel Q33 Express Chipset Family &#123; 0x29D3, "Intel GMA 3100" &#125;, // Desktop - Intel Q33 Express Chipset Family //----------------Pineview------------------ &#123; 0xA001, "Intel GMA 3150" &#125;, // Nettop - Intel NetTop Atom D410 &#123; 0xA002, "Intel GMA 3150" &#125;, // Nettop - Intel NetTop Atom D510 &#123; 0xA011, "Intel GMA 3150" &#125;, // Netbook - Intel NetBook Atom N4x0 &#123; 0xA012, "Intel GMA 3150" &#125;, // Netbook - Intel NetBook Atom N4x0 //============== 4th generation ============ //----------------Lakeport------------------ &#123; 0x2972, "Intel GMA 3000" &#125;, // Desktop - Intel 946GZ Express Chipset Family &#123; 0x2973, "Intel GMA 3000" &#125;, // Desktop - Intel 946GZ Express Chipset Family //----------------Broadwater---------------- &#123; 0x2992, "Intel GMA 3000" &#125;, // Desktop - Intel Q965/Q963 Express Chipset Family &#123; 0x2993, "Intel GMA 3000" &#125;, // Desktop - Intel Q965/Q963 Express Chipset Family &#123; 0x29A2, "Intel GMA X3000" &#125;, // Desktop - Intel G965 Express Chipset Family &#123; 0x29A3, "Intel GMA X3000" &#125;, // Desktop - Intel G965 Express Chipset Family#endif //----------------Crestline----------------- &#123; 0x2A02, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family - MacBook3,1/MacBook4,1/MacbookAir1,1 &#123; 0x2A03, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family &#123; 0x2A12, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family &#123; 0x2A13, "Intel GMA X3100" &#125;, // Mobile - Intel 965 Express Chipset Family#if WILL_WORK //----------------Bearlake------------------ &#123; 0x2982, "Intel GMA X3500" &#125;, // Desktop - Intel G35 Express Chipset Family &#123; 0x2983, "Intel GMA X3500" &#125;, // Desktop - Intel G35 Express Chipset Family //----------------Eaglelake----------------- &#123; 0x2E02, "Intel GMA 4500" &#125;, // Desktop - Intel 4 Series Express Chipset Family &#123; 0x2E03, "Intel GMA 4500" &#125;, // Desktop - Intel 4 Series Express Chipset Family &#123; 0x2E12, "Intel GMA 4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E13, "Intel GMA 4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E42, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E43, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E92, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E93, "Intel GMA 4500" &#125;, // Desktop - Intel B43 Express Chipset Family &#123; 0x2E32, "Intel GMA X4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E33, "Intel GMA X4500" &#125;, // Desktop - Intel G45/G43 Express Chipset Family &#123; 0x2E22, "Intel GMA X4500" &#125;, // Mobile - Intel G45/G43 Express Chipset Family &#123; 0x2E23, "Intel GMA X4500HD" &#125;, // Mobile - Intel G45/G43 Express Chipset Family //----------------Cantiga------------------- &#123; 0x2A42, "Intel GMA X4500MHD" &#125;, // Mobile - Intel 4 Series Express Chipset Family &#123; 0x2A43, "Intel GMA X4500MHD" &#125;, // Mobile - Intel 4 Series Express Chipset Family#endif //============== 5th generation ============ //----------------Ironlake------------------ &#123; 0x0042, "Intel HD Graphics" &#125;, // Desktop - Clarkdale &#123; 0x0046, "Intel HD Graphics" &#125;, // Mobile - Arrandale - MacBookPro6,x //============== 6th generation ============ //----------------Sandy Bridge-------------- //GT1 &#123; 0x0102, "Intel HD Graphics 2000" &#125;, // Desktop - iMac12,x &#123; 0x0106, "Intel HD Graphics 2000" &#125;, // Mobile &#123; 0x010A, "Intel HD Graphics P3000" &#125;, // Server //GT2 &#123; 0x0112, "Intel HD Graphics 3000" &#125;, // Desktop &#123; 0x0116, "Intel HD Graphics 3000" &#125;, // Mobile - MacBookAir4,x/MacBookPro8,2/MacBookPro8,3 &#123; 0x0122, "Intel HD Graphics 3000" &#125;, // Desktop &#123; 0x0126, "Intel HD Graphics 3000" &#125;, // Mobile - MacBookPro8,1/Macmini5,x //============== 7th generation ============ //----------------Ivy Bridge---------------- //GT1 &#123; 0x0152, "Intel HD Graphics 2500" &#125;, // Desktop - iMac13,x &#123; 0x0156, "Intel HD Graphics 2500" &#125;, // Mobile &#123; 0x015A, "Intel HD Graphics 2500" &#125;, // Server &#123; 0x015E, "Intel Ivy Bridge GT1" &#125;, // Reserved //GT2 &#123; 0x0162, "Intel HD Graphics 4000" &#125;, // Desktop &#123; 0x0166, "Intel HD Graphics 4000" &#125;, // Mobile - MacBookPro9,x/MacBookPro10,x/MacBookAir5,x/Macmini6,x &#123; 0x016A, "Intel HD Graphics P4000" &#125;, // Server //----------------Haswell------------------- //GT1 &#123; 0x0402, "Intel Haswell GT1" &#125;, // Desktop &#123; 0x0406, "Intel Haswell GT1" &#125;, // Mobile &#123; 0x040A, "Intel Haswell GT1" &#125;, // Server &#123; 0x040B, "Intel Haswell GT1" &#125;, // &#123; 0x040E, "Intel Haswell GT1" &#125;, // //GT2 &#123; 0x0412, "Intel HD Graphics 4600" &#125;, // Desktop - iMac15,1 &#123; 0x0416, "Intel HD Graphics 4600" &#125;, // Mobile &#123; 0x041A, "Intel HD Graphics P4600" &#125;, // Server &#123; 0x041B, "Intel Haswell GT2" &#125;, // &#123; 0x041E, "Intel HD Graphics 4400" &#125;, // //GT3 &#123; 0x0422, "Intel HD Graphics 5000" &#125;, // Desktop &#123; 0x0426, "Intel HD Graphics 5000" &#125;, // Mobile &#123; 0x042A, "Intel HD Graphics 5000" &#125;, // Server &#123; 0x042B, "Intel Haswell GT3" &#125;, // &#123; 0x042E, "Intel Haswell GT3" &#125;, // //GT1 &#123; 0x0A02, "Intel Haswell GT1" &#125;, // Desktop ULT &#123; 0x0A06, "Intel HD Graphics" &#125;, // Mobile ULT &#123; 0x0A0A, "Intel Haswell GT1" &#125;, // Server ULT &#123; 0x0A0B, "Intel Haswell GT1" &#125;, // ULT &#123; 0x0A0E, "Intel Haswell GT1" &#125;, // ULT //GT2 &#123; 0x0A12, "Intel Haswell GT2" &#125;, // Desktop ULT &#123; 0x0A16, "Intel HD Graphics 4400" &#125;, // Mobile ULT &#123; 0x0A1A, "Intel Haswell GT2" &#125;, // Server ULT &#123; 0x0A1B, "Intel Haswell GT2" &#125;, // ULT &#123; 0x0A1E, "Intel HD Graphics 4200" &#125;, // ULT //GT3 &#123; 0x0A22, "Intel Iris Graphics 5100" &#125;, // Desktop ULT &#123; 0x0A26, "Intel HD Graphics 5000" &#125;, // Mobile ULT - MacBookAir6,x/Macmini7,1 &#123; 0x0A2A, "Intel Iris Graphics 5100" &#125;, // Server ULT &#123; 0x0A2B, "Intel Iris Graphics 5100" &#125;, // ULT &#123; 0x0A2E, "Intel Iris Graphics 5100" &#125;, // ULT - MacBookPro11,1 //GT1 &#123; 0x0C02, "Intel Haswell GT1" &#125;, // Desktop SDV &#123; 0x0C06, "Intel Haswell GT1" &#125;, // Mobile SDV &#123; 0x0C0A, "Intel Haswell GT1" &#125;, // Server SDV &#123; 0x0C0B, "Intel Haswell GT1" &#125;, // SDV &#123; 0x0C0E, "Intel Haswell GT1" &#125;, // SDV //GT2 &#123; 0x0C12, "Intel Haswell GT2" &#125;, // Desktop SDV &#123; 0x0C16, "Intel Haswell GT2" &#125;, // Mobile SDV &#123; 0x0C1A, "Intel Haswell GT2" &#125;, // Server SDV &#123; 0x0C1B, "Intel Haswell GT2" &#125;, // SDV &#123; 0x0C1E, "Intel Haswell GT2" &#125;, // SDV //GT3 &#123; 0x0C22, "Intel Haswell GT3" &#125;, // Desktop SDV &#123; 0x0C26, "Intel Haswell GT3" &#125;, // Mobile SDV &#123; 0x0C2A, "Intel Haswell GT3" &#125;, // Server SDV &#123; 0x0C2B, "Intel Haswell GT3" &#125;, // SDV &#123; 0x0C2E, "Intel Haswell GT3" &#125;, // SDV //GT1 &#123; 0x0D02, "Intel Haswell GT1" &#125;, // Desktop CRW &#123; 0x0D06, "Intel Haswell GT1" &#125;, // Mobile CRW &#123; 0x0D0A, "Intel Haswell GT1" &#125;, // Server CRW &#123; 0x0D0B, "Intel Haswell GT1" &#125;, // CRW &#123; 0x0D0E, "Intel Haswell GT1" &#125;, // CRW //GT2 &#123; 0x0D12, "Intel HD Graphics 4600" &#125;, // Desktop CRW &#123; 0x0D16, "Intel HD Graphics 4600" &#125;, // Mobile CRW &#123; 0x0D1A, "Intel Haswell GT2" &#125;, // Server CRW &#123; 0x0D1B, "Intel Haswell GT2" &#125;, // CRW &#123; 0x0D1E, "Intel Haswell GT2" &#125;, // CRW //GT3 &#123; 0x0D22, "Intel Iris Pro Graphics 5200" &#125;, // Desktop CRW - iMac14,1/iMac14,4 &#123; 0x0D26, "Intel Iris Pro Graphics 5200" &#125;, // Mobile CRW - MacBookPro11,2/MacBookPro11,3 &#123; 0x0D2A, "Intel Iris Pro Graphics 5200" &#125;, // Server CRW &#123; 0x0D2B, "Intel Iris Pro Graphics 5200" &#125;, // CRW &#123; 0x0D2E, "Intel Iris Pro Graphics 5200" &#125;, // CRW //----------------ValleyView---------------- &#123; 0x0F30, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F31, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F32, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0F33, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0155, "Intel HD Graphics" &#125;, // Bay Trail &#123; 0x0157, "Intel HD Graphics" &#125;, // Bay Trail //============== 8th generation ============ //----------------Broadwell----------------- //GT1 &#123; 0x1602, "Intel Broadwell GT1" &#125;, // Desktop &#123; 0x1606, "Intel Broadwell GT1" &#125;, // Mobile &#123; 0x160A, "Intel Broadwell GT1" &#125;, // &#123; 0x160B, "Intel Broadwell GT1" &#125;, // &#123; 0x160D, "Intel Broadwell GT1" &#125;, // &#123; 0x160E, "Intel Broadwell GT1" &#125;, // //GT2 &#123; 0x1612, "Intel HD Graphics 5600" &#125;, // Mobile &#123; 0x1616, "Intel HD Graphics 5500" &#125;, // Mobile &#123; 0x161A, "Intel Broadwell GT2" &#125;, // &#123; 0x161B, "Intel Broadwell GT2" &#125;, // &#123; 0x161D, "Intel Broadwell GT2" &#125;, // &#123; 0x161E, "Intel HD Graphics 5300" &#125;, // Ultramobile - MacBook8,1 //GT3 &#123; 0x1626, "Intel HD Graphics 6000" &#125;, // Mobile - iMac16,1/MacBookAir7,x &#123; 0x162B, "Intel Iris Graphics 6100" &#125;, // Mobile - MacBookPro12,1 &#123; 0x162D, "Intel Iris Pro Graphics P6300" &#125;, // Workstation, Mobile Workstation //GT3e &#123; 0x1622, "Intel Iris Pro Graphics 6200" &#125;, // Desktop, Mobile - iMac16,2 &#123; 0x162A, "Intel Iris Pro Graphics P6300" &#125;, // Workstation //RSVD &#123; 0x162E, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x1632, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x1636, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163A, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163B, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163D, "Intel Broadwell RSVD" &#125;, // Reserved &#123; 0x163E, "Intel Broadwell RSVD" &#125;, // Reserved //------------Cherryview/Braswell----------- &#123; 0x22B0, "Intel HD Graphics 400" &#125;, // Cherry Trail - Atom x5 series - Z83X0/Z8550 &#123; 0x22B1, "Intel HD Graphics 405" &#125;, // Cherry Trail - Atom x7 series - Z8750 &#123; 0x22B2, "Intel HD Graphics 400" &#125;, // Braswell - Cerelon QC/DC series - X3X60 &#123; 0x22B3, "Intel HD Graphics 405" &#125;, // Braswell - Pentium QC series - X3710 //============== 9th generation ============ //----------------Skylake------------------- //GT1 &#123; 0x1902, "Intel HD Graphics 510" &#125;, // Desktop &#123; 0x1906, "Intel HD Graphics 510" &#125;, // Mobile &#123; 0x190A, "Intel Skylake GT1" &#125;, // &#123; 0x190B, "Intel HD Graphics 510" &#125;, // &#123; 0x190E, "Intel Skylake GT1" &#125;, // //GT2 &#123; 0x1912, "Intel HD Graphics 530" &#125;, // Desktop - iMac17,1 &#123; 0x1916, "Intel HD Graphics 520" &#125;, // Mobile &#123; 0x191A, "Intel Skylake GT2" &#125;, // &#123; 0x191B, "Intel HD Graphics 530" &#125;, // Mobile - MacBookPro13,3 &#123; 0x191D, "Intel HD Graphics P530" &#125;, // Workstation, Mobile Workstation &#123; 0x191E, "Intel HD Graphics 515" &#125;, // Mobile - MacBook9,1 &#123; 0x1921, "Intel HD Graphics 520" &#125;, // //GT2f &#123; 0x1913, "Intel Skylake GT2f" &#125;, // &#123; 0x1915, "Intel Skylake GT2f" &#125;, // &#123; 0x1917, "Intel Skylake GT2f" &#125;, // //GT3 &#123; 0x1923, "Intel HD Graphics 535" &#125;, // //GT3e &#123; 0x1926, "Intel Iris Graphics 540" &#125;, // Mobile - MacBookPro13,1 &#123; 0x1927, "Intel Iris Graphics 550" &#125;, // Mobile - MacBookPro13,2 &#123; 0x192B, "Intel Iris Graphics 555" &#125;, // &#123; 0x192D, "Intel Iris Graphics P555" &#125;, // Workstation //GT4 &#123; 0x192A, "Intel Skylake GT4" &#125;, // //GT4e &#123; 0x1932, "Intel Iris Pro Graphics 580" &#125;, // Desktop &#123; 0x193A, "Intel Iris Pro Graphics P580" &#125;, // Server &#123; 0x193B, "Intel Iris Pro Graphics 580" &#125;, // Mobile &#123; 0x193D, "Intel Iris Pro Graphics P580" &#125;, // Workstation, Mobile Workstation //----------------Goldmont------------------ &#123; 0x0A84, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x1A84, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x1A85, "Intel HD Graphics" &#125;, // Broxton(cancelled) &#123; 0x5A84, "Intel HD Graphics 505" &#125;, // Apollo Lake &#123; 0x5A85, "Intel HD Graphics 500" &#125;, // Apollo Lake //----------------Kaby Lake----------------- //GT1 &#123; 0x5902, "Intel HD Graphics 610" &#125;, // Desktop &#123; 0x5906, "Intel HD Graphics 610" &#125;, // Mobile &#123; 0x5908, "Intel Kaby Lake GT1" &#125;, // &#123; 0x590A, "Intel Kaby Lake GT1" &#125;, // &#123; 0x590B, "Intel Kaby Lake GT1" &#125;, // &#123; 0x590E, "Intel Kaby Lake GT1" &#125;, // //GT1.5 &#123; 0x5913, "Intel Kaby Lake GT1.5" &#125;, // &#123; 0x5915, "Intel Kaby Lake GT1.5" &#125;, // //GT2 &#123; 0x5912, "Intel HD Graphics 630" &#125;, // Desktop - iMac18,2/iMac18,3 &#123; 0x5916, "Intel HD Graphics 620" &#125;, // Mobile &#123; 0x591A, "Intel HD Graphics P630" &#125;, // Server &#123; 0x591B, "Intel HD Graphics 630" &#125;, // Mobile - MacBookPro14,3 &#123; 0x591D, "Intel HD Graphics P630" &#125;, // Workstation, Mobile Workstation &#123; 0x591E, "Intel HD Graphics 615" &#125;, // Mobile - MacBook10,1 //GT2F &#123; 0x5921, "Intel Kaby Lake GT2F" &#125;, // //GT3 &#123; 0x5923, "Intel HD Graphics 635" &#125;, // &#123; 0x5926, "Intel Iris Plus Graphics 640" &#125;, // Mobile - MacBookPro14,1/iMac18,1 &#123; 0x5927, "Intel Iris Plus Graphics 650" &#125;, // Mobile - MacBookPro14,2 //GT4 &#123; 0x593B, "Intel Kaby Lake GT4" &#125;, // //-------------Kaby Lake Refresh------------ //GT1.5 &#123; 0x5917, "Intel UHD Graphics 620" &#125;, // Mobile //----------------Amber Lake---------------- //GT2 &#123; 0x591C, "Intel UHD Graphics 615" &#125;, // Kaby Lake &#123; 0x87C0, "Intel UHD Graphics 617" &#125;, // Kaby Lake - Mobile - MacBookAir8,1 &#123; 0x87CA, "Intel Amber Lake GT2" &#125;, // Coffee Lake //----------------Coffee Lake--------------- //GT1 &#123; 0x3E90, "Intel UHD Graphics 610" &#125;, // Desktop &#123; 0x3E93, "Intel UHD Graphics 610" &#125;, // Desktop &#123; 0x3E99, "Intel Coffee Lake GT1" &#125;, // //GT2 &#123; 0x3E91, "Intel UHD Graphics 630" &#125;, // Desktop &#123; 0x3E92, "Intel UHD Graphics 630" &#125;, // Desktop &#123; 0x3E94, "Intel Coffee Lake GT2" &#125;, // &#123; 0x3E96, "Intel Coffee Lake GT2" &#125;, // &#123; 0x3E98, "Intel UHD Graphics 630" &#125;, // Desktop &#123; 0x3E9A, "Intel Coffee Lake GT2" &#125;, // &#123; 0x3E9B, "Intel UHD Graphics 630" &#125;, // Mobile - MacBookPro15,1/Macmini8,1 &#123; 0x3EA9, "Intel Coffee Lake GT2" &#125;, // //GT3 &#123; 0x3EA5, "Intel Iris Plus Graphics 655" &#125;, // Mobile - MacBookPro15,2 &#123; 0x3EA6, "Intel Coffee Lake GT3" &#125;, // &#123; 0x3EA7, "Intel Coffee Lake GT3" &#125;, // &#123; 0x3EA8, "Intel Coffee Lake GT3" &#125;, // //----------------Whiskey Lake-------------- //GT1 &#123; 0x3EA1, "Intel Whiskey Lake GT1" &#125;, // &#123; 0x3EA4, "Intel Whiskey Lake GT1" &#125;, // //GT2 &#123; 0x3EA0, "Intel UHD Graphics 620" &#125;, // Mobile &#123; 0x3EA3, "Intel Whiskey Lake GT2" &#125;, // //GT3 &#123; 0x3EA2, "Intel Whiskey Lake GT3" &#125;, // //----------------Gemini Lake--------------- &#123; 0x3184, "Intel UHD Graphics 605" &#125;, // &#123; 0x3185, "Intel UHD Graphics 600" &#125;, // //============== 10th generation =========== //----------------Cannonlake---------------- //GTx &#123; 0x5A40, "Intel Cannonlake GTx" &#125;, // //GT0.5 &#123; 0x5A49, "Intel Cannonlake GT0.5" &#125;, // &#123; 0x5A4A, "Intel Cannonlake GT0.5" &#125;, // //GT1 &#123; 0x0A01, "Intel Cannonlake GT1" &#125;, // Desktop &#123; 0x5A41, "Intel Cannonlake GT1" &#125;, // &#123; 0x5A42, "Intel Cannonlake GT1" &#125;, // &#123; 0x5A44, "Intel Cannonlake GT1" &#125;, // //GT1.5 &#123; 0x5A59, "Intel Cannonlake GT1.5" &#125;, // &#123; 0x5A5A, "Intel Cannonlake GT1.5" &#125;, // &#123; 0x5A5C, "Intel Cannonlake GT1.5" &#125;, // //GT2 &#123; 0x5A50, "Intel Cannonlake GT2" &#125;, // &#123; 0x5A51, "Intel Cannonlake GT2" &#125;, // &#123; 0x5A52, "Intel Cannonlake GT2" &#125;, // Mobile &#123; 0x5A54, "Intel Cannonlake GT2" &#125;, // Mobile //============== 11th generation =========== //----------------Ice Lake------------------ //GT0.5 &#123; 0x8A71, "Intel Ice Lake GT0.5" &#125;, // //GT1 &#123; 0x8A5B, "Intel Ice Lake GT1" &#125;, // &#123; 0x8A5D, "Intel Ice Lake GT1" &#125;, // //GT1.5 &#123; 0x8A5A, "Intel Ice Lake GT1.5" &#125;, // &#123; 0x8A5C, "Intel Ice Lake GT1.5" &#125;, // //GT2 &#123; 0x8A50, "Intel Ice Lake GT2" &#125;, // &#123; 0x8A51, "Intel Ice Lake GT2" &#125;, // &#123; 0x8A52, "Intel Ice Lake GT2" &#125;, // //----------------Lakefield----------------- &#123; 0x9840, "Intel Lakefield" &#125;, // &#123; 0x9850, "Intel Lakefield" &#125;, // //----------------Jasper Lake--------------- &#123; 0x4500, "Intel Jasper Lake" &#125;, //&#125;;某些SKL/KBL台式机如果驱动4K显示器可以试试 platform-id:0x193b0005 这个ig-platform-id不存在于gma.c列表里原文链接：https://www.tonymacx86.com/threads/intel-hd-graphics-framebuffer-edits-desktop.125239/扩展阅读：Intel FB-Patcher使用教程及插入姿势 关于打赏您的支持就是我更新的动力！本篇文章会持续不间断更新，每个Clover的更新日志都需要阅读，如果有新的platform-id，我都会第一时间添加进来。so，如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>platform</tag>
        <tag>Intel</tag>
        <tag>核显</tag>
        <tag>smbios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows下使用diskpart建立EFI分区及挂载EFI分区]]></title>
    <url>%2FUnder-Windows-using-DISKPART-to-create-EFI-points.html</url>
    <content type="text"><![CDATA[Windows下使用diskpart建立EFI分区及挂载EFI分区很多人在安装黑苹果的时候都需要在Windows下使用DiskGenius进行分区，其实在Windows 7及之后的版本本身就包含了更实用的磁盘分区命令，这个命令就是：diskpart 创建EFI分区以下操作假设磁盘未分区没有其它数据1234diskpartlist disk # 磁盘列表select disk n # 选择需要制作EFI分区的磁盘，n为磁盘号create partition efi size=300 # efi分区大小为300Mb 挂载EFI分区1234567diskpartlist disk # 磁盘列表select disk n # 选择需要制作EFI分区的磁盘，n为磁盘号list partition # 磁盘分区列表select partition n # 选择efi分区，n为efi分区号set id="C12A7328-F81F-11D2-BA4B-00A0C93EC93B" # 设置为EFI分区assign # x为efi分区盘符打开资源管理器，会出现一个盘符为X的磁盘，格式化为fat32格式以后再操作EFI分区请重复输入上述命令如果拒绝访问的话，可以使用xcopy命令进行复制。 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>EFI</tag>
        <tag>diskpart</tag>
        <tag>Windows</tag>
        <tag>分区</tag>
        <tag>ESP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB8 17A358a with Clover 4189原版镜像]]></title>
    <url>%2FMacOS-High-Sierra-10.13DB8-17A358a-and-Clover-4189.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB8 17A358a with Clover 4189原版镜像本镜像采用官方原版app制作，集成Clover 4189，支持UEFI启动安装。Clover默认config.plist为620/630/640/650；其它配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![Clover Configurator](http://7.daliansky.net/Clover Configurator.png)![Other Drivers](http://7.daliansky.net/Other Drivers.png) 下载链接: https://pan.baidu.com/s/1qXTeYWcMD5 (macOS High Sierra 10.13DB8 17A358a with Clover 4189.dmg) = 559bbd4ad59f5f12cf058e271ef6d871]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>DB8</tag>
        <tag>17A358a</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lilu插件列表[持续更新]]]></title>
    <url>%2FExisting-Lilu-Plugins.html</url>
    <content type="text"><![CDATA[Lilu插件列表[持续更新]本文部分翻译自 Lilu的README，一些部分基于楼主的理解写出。 什么是 Lilu ？Lilu 是 vit9696 开发的一个内核扩展 (kext)，可对&quot;任意&quot; 内核扩展(kext)/进程(process)/运行库(framework/library)等 进行打补丁。(但其实某些比较底层的 kext 仍无法修改，如基本硬件驱动、底层重要依赖等) Lilu 目前实现的功能？为 kext 打补丁为 进程 打补丁 (目前仅支持 64 位)为 运行库 打补丁 (目前仅支持 64 位)提供一套统一的 API 接口 如何理解 “提供一套统一的 API 接口”？这意味着 Lilu 自身是不起任何作用的，你需要额外使用依赖它的 kext ，目前已知需要依赖 Lilu 的 kext 可在 下方 找到。 下载/安装 关于下载：你可以直接下载作者编译好的版本，或者从 GitHub 下载源码自行编译。 关于安装：建议将 Lilu 以及依赖它的 kext 放置于引导器用于注入 kext 的位置并使用引导器注入它，目前主流的引导器都有注入 kext 的功能。如果将其放置于 /System/Library/Extensions 或者 /Library/Extensions 下的话，你还需要 LiluFriend 并正确配置使其正常工作。 Lilu 支持的内核参数(kernel flags)-liludbg 可以开启排错日志模式，不过只有 DEBUG 版本才可用。(对于日常使用的 RELEASE 版本此参数无效)-liluoff 会禁用 Lilu 和依赖它的 kext 。(实际上只禁用了 Lilu ，不过与之相关的 kext 也就自然会失效了)-liluslow 会启用旧版的 UserPatcher 。(可能与修改进程、运行库有关，具体的因为楼主对 Lilu 代码不是很熟悉，所以也就没法解释清楚了，抱歉)-lilulowmem 会禁止 Lilu 和依赖它的 kext 在 Recovery 模式下载入。(实际上只禁用了 Lilu ，不过与之相关的 kext 也就自然会失效了)-lilubeta 会在不受支持的 Darwin 版本启用 Lilu 。-lilubetaall 启用Lilu和所有加载的插件不受支持的os版本（非常仔细地使用）-liluforce 强制启用Lilu而不管os，该参数适用于安装或恢复。 致开发者/有兴趣的朋友：关于 Log 输出，目前 Lilu 提供的 API 中有两个输出 Log 的接口，分别为 SYSLOG(“msg\n”); 与 DBGLOG(“msg\n”); 这两个 macro ，具体输出原理这里不做过多解释，仍是调用 Apple 在 IOLib.h 中为我们提供的 IOLog 接口。但要特别注意的是，如上所说，DBGLOG(“msg\n”); 这个 macro 需要在 DEBUG 模式开启下才会被编译。相信各位看这段代码即可了解。😉 (来自 Headers/kern_util.hpp)1234567891011#define SYSLOG(str, ...) IOLog( xStringify(PRODUCT_NAME) ": " str "\n", ## __VA_ARGS__)#ifdef DEBUG#define DBGLOG(str, ...) \ do &#123; \ if (ADDPR(debugEnabled)) \ IOLog( xStringify(PRODUCT_NAME) ": (DEBUG) " str "\n", ## __VA_ARGS__); \ &#125; while(0)#else#define DBGLOG(str, ...) do &#123; &#125; while(0)#endif另外，原宏中已经自带了换行符 \n ，所以在编写 Log 时也就无必要再换行了。 Bug 反馈建议在作者的 GitHub Issues 中提交，需使用英文。 Lilu插件列表此插件列表来自 Lilu 的 KnownPlugins.md 。目前已知需依赖 Lilu 的 kext &amp; 作用简单说明注：某些 kext 可能还没有列在这里，如果你有发现的话，可以跟帖反馈。NameShort descriptionAirportBrcmFixup修补 Broadcom Wi-Fi 综合问题AppleALC动态对系统注入必要的文件/打补丁以驱动声卡AzulPatcher4600一些针对某些笔记型 HD4600 的额外修复CoreDisplayFixup动态修改某些系统运行库/kext 以解决非 Iris 系列 Intel 核显/部分 N 卡高分辨率输出问题CPUFriend动态向 X86 注入 CPU 电源管理数据EnableLidWake为某些 Intel 核显开启合盖睡眠HibernationFixup在某些机器上修复 3/25 模式下的休眠状态IntelGraphicsFixup修补 Intel 核显综合问题 (开机花屏，Haswell/Skylake 因 PAVP 导致的死机等等)IntelGraphicsDVMTFixup修正 Broadwell/Skylake 平台核显因 DVMT 不足而导致的死机NightShiftUnlocker解决老机型无法使用自 10.12.4 开始引入的 NightShift 功能NvidiaGraphicsFixup修正 N 卡 (可能也适用于 I 卡) 使用某些 SMBios 如 MacPro6,1 等引发黑屏的问题Shiki动态修改 iTunes 相关系统进程，以在 Ivy Bridge 或更新的平台上正确使用 iTunes 相关服务，同时其内置的 ResourceConverter 亦可配置一些自定义的针对其他 framework/lib/process 的补丁 (CoreDisplayFixup 的早期测试版本即基于 Shiki 编写)WhateverGreen修补 AMD 独显综合问题 （单卡启动黑屏，唤醒黑屏 等等）将功能合并到其他插件中的插件：NameShort descriptionBrcmWLFixup现已被 AirportBrcmFixup 取代。 原文链接：口袋妖怪heart 扩展阅读：AppleALC支持的Codecs列表及AppleALC的使用 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>Lilu</tag>
        <tag>Plugins</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[macOS High Sierra 10.13DB7 17A352a with Clover 4182原版镜像]]></title>
    <url>%2FMacOS-High-Sierra-10-13DB7-17A352a-and-Clover-4182.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB7 17A352a with Clover 4182原版镜像本镜像采用官方原版app制作，集成Clover 4182，支持UEFI启动安装。Clover默认config.plist为620/630/640/650；【DELL 燃7000系列可直接安装使用】，配置文件为:config_Dell_7000.plist;其它配置文件包括七代6x0 config.plist配置文件，其中spoof的是显卡欺骗，不带spoof字样的是支持原生显卡，配置文件包括：HD520/530/540，HD550/P530,HD5000/5100/5200/5300/5500/6000,HD4000/4200/4400/4600,HD3000；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 黑果小兵的小站 截图：![clover config](http://7.daliansky.net/clover config.png) 下载链接: 百度云盘MD5 (macOS High Sierra 10.13DB7 17A352a with Clover 4182.dmg) = 48fc6f8cb402d4a3d8b6035ab4456efc]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>DB7</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[如何在macOS Sierra中运行CORE Keygen破解程序]]></title>
    <url>%2FHow-macOS-Sierra-mid-operation-CORE-Keygen-breaks-down.html</url>
    <content type="text"><![CDATA[如何在macOS Sierra中运行CORE Keygen破解程序将系统升级到macOS Sierra后很多破解程序或注册机都不能用了，尤其是CORE Keygen！ 解决方案如下：下载：https://pan.baidu.com/s/1skCh1A9 密码: cqgi将xnp.out.zip放在CORE Keygen程序相同目录，运行：12chmod +x upx.out./upx.out -d ./YourApp.app/Contents/MacOS/CORE\ Keygen重新运行CORE Keygen！收工，尽情享用吧！](http://shang.qq.com/wpa/qunwpa?idkey=db511a29e856f37cbb871108ffa77a6e79dde47e491b8f2c8d8fe4d3c310de91)]]></content>
      <categories>
        <category>破解</category>
      </categories>
      <tags>
        <tag>破解</tag>
        <tag>Keygen</tag>
        <tag>Crack</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用CodecCommander解决ALC1220唤醒无声]]></title>
    <url>%2FUse-CodecCommander-to-solve-ALC1220-sleep-wake-up-silentr.html</url>
    <content type="text"><![CDATA[使用CodecCommander解决ALC1220唤醒无声 AppleALC info.plistf0111141 10401190 20100101 30600101 00001740 4090a090 60908102 50308101 70402102 29e6e740 90614b01 解决过程整理pinconfig:屏蔽掉节点0x1a line in rear，使用f0111141，拆分为01a71cf0 01a71d11 01a71e11 01a71f41进行屏蔽整理出两条cc命令：01970724 01b70883编译CodecCommander，增加10ec_1220，添加ALC1220，将两条cc命令添加进去10ec_1220StringRealtek ALC1220Custom CommandsCommandData01970724CommontString0x19 SET_PIN_WIDGET_CONTROL 0x24On InitBooleanYESOn SleepBooleanNOON WakeBooleanYESCommandData01b70883CommontString0x1b SET_UNSOLICITED_ENABLE 0x83On InitBooleanYESOn SleepBooleanNOON WakeBooleanYESPerform ResetBooleanYES更多hda-verb的用法请前往hda-verb参数详表 收工 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>驱动</category>
      </categories>
      <tags>
        <tag>AppleALC</tag>
        <tag>CC</tag>
        <tag>CodecCommander</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mac常用到的命令[持续更新]]]></title>
    <url>%2FMac-frequently-used-to-the-command---continuous-update.html</url>
    <content type="text"><![CDATA[Mac常用命令 序言熟练使用Mac终端操作的常用命令，可以让你更快、更加高效地进行系统操作，shell就是你的瑞士军刀 隐藏“允许任何来源的应用”选项问题新的系统安装好后，通常你打开一个dmg文件准备安装的时候，系统会提示你不允许打开未知来源的应用，这是因为从macOS Sierra开始增强了GateKeeper的安全性，所以“允许任何来源的应用”选项被隐藏，目的在于避免除Mac AppStore和正规签名外的未知或未签名App在系统内被任意执行，从而威胁用户隐私和系统安全。但这也造成了很多不便。操作方法：打开终端，输入命令：1sudo spctl --master-disable验证口令后即可。 重建缓存的命令打开终端，输入命令：12345678910#!/bin/shsudo chmod -Rf 755 /S*/L*/E*sudo chown -Rf 0:0 /S*/L*/E*sudo chmod -Rf 755 /L*/E*sudo chown -Rf 0:0 /L*/E*sudo rm -Rf /S*/L*/PrelinkedKernels/*sudo rm -Rf /S*/L*/Caches/com.apple.kext.caches/*sudo touch -f /S*/L*/E*sudo touch -f /L*/E*sudo kextcache -Boot -U / 磁盘分区的基本操作：教你将U盘上的EFI复制到磁盘的EFI分区新的系统安装成功后，EFI还位于U盘里，总不能一直挂着U盘使用系统吧。这个时候如果你想将U盘里的EFI复制到磁盘的EFI分区里，却苦于找不到看不见EFI分区，这个时候是该让diskutil登场了。diskutil命令的基本用法： 查看磁盘分区表1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme256 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s23:Microsoft Basic DataWIN10127.7 GBdisk0s3/dev/disk1(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme16 GBdisk11:EFIEFI200 MBdisk1s12:Apple_HFSInstall macOS Sierra15.8 GBdisk1s2 挂载磁盘EFI分区1diskutil mount disk0s1 挂载U盘EFI分区1diskutil mount disk1s1 打开Finder，注意后面有个.1open .左侧会显示挂载了两个EFI分区，将U盘EFI目录全部复制到磁盘的EFI分区即可。 收工 磁盘分区的进阶操作：教你将apfs分区转换回hfs+随着macOS High Sierra发布日期的临近，苹果公司新推出的apfs文件格式已经频繁地出现在我们的面前，假如你还不了解apfs文件的前世今生，请阅读苹果文件系统。友情提示： APFS 在 macOS High Sierra（10.13）之后将成为默认的文件格式那么问题来了，万一我的分区格式已经是apfs，我想转换成HFS+有什么办法吗？当然可以了，只是这个命令隐藏得比较深，这个命令还是：diskutil diskutil命令的进阶操作查看磁盘分区表：1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme512 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s2……………10:Apple_APFSContainer disk129.2 GBdisk0s10/dev/disk1 (synthesized):#:TYPENAMESIZEIDENTIFIER0:APFS Container Scheme-Physical Store disk0s5+29.2 GBdisk11:APFS Volumetest9.8 GBdisk1s12:APFS VolumePreboot20.6 MBdisk1s23:APFS VolumeRecovery519.6 MBdisk1s34:APFS VolumeVM1.1 GBdisk1s4查看apfs分区表1diskutil apfs list显示结果：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889APFS Containers (2 found)|+-- Container disk1 90B9C430-E60A-4174-8F1B-B8ED6E486D8B| ====================================================| APFS Container Reference: disk1| Capacity Ceiling (Size): 29194424320 B (29.2 GB)| Capacity In Use By Volumes: 11533049856 B (11.5 GB) (39.5% used)| Capacity Available: 17661374464 B (17.7 GB) (60.5% free)| || +-&lt; Physical Store disk0s10 CF77604A-0F78-4512-9563-AD2E944353C8| | ------------------------------------------------------------| | APFS Physical Store Disk: disk0s10| | Size: 29194424320 B (29.2 GB)| || +-&gt; Volume disk1s1 12C9B3A9-0D9B-3E75-B0EF-D829FFE4D438| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s1 (No specific role)| | Name: test (Case-insensitive)| | Mount Point: /Volumes/test| | Capacity Consumed: 9848913920 B (9.8 GB)| | Encrypted: No| || +-&gt; Volume disk1s2 2316B0D9-6798-4564-A3CE-5C5D1124AE5B| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s2 (Preboot)| | Name: Preboot (Case-insensitive)| | Mount Point: Not Mounted| | Capacity Consumed: 20631552 B (20.6 MB)| | Encrypted: No| || +-&gt; Volume disk1s3 1B6EBD7A-EE58-48A7-97A8-4E31C18BE5EC| | ---------------------------------------------------| | APFS Volume Disk (Role): disk1s3 (Recovery)| | Name: Recovery (Case-insensitive)| | Mount Point: Not Mounted| | Capacity Consumed: 519573504 B (519.6 MB)| | Encrypted: No| || +-&gt; Volume disk1s4 560E6B74-04B3-4083-8730-A7FB7A0116A2| ---------------------------------------------------| APFS Volume Disk (Role): disk1s4 (VM)| Name: VM (Case-insensitive)| Mount Point: Not Mounted| Capacity Consumed: 1073762304 B (1.1 GB)| Encrypted: No|+-- Container disk2 15E113C0-6AC5-4DA5-960C-A29A3C3B418A ==================================================== APFS Container Reference: disk2 Capacity Ceiling (Size): 100411764736 B (100.4 GB) Capacity In Use By Volumes: 59094196224 B (59.1 GB) (58.9% used) Capacity Available: 41317568512 B (41.3 GB) (41.1% free) | +-&lt; Physical Store disk0s5 987E8152-DD9D-4148-8314-CDA8A28323D5 | ----------------------------------------------------------- | APFS Physical Store Disk: disk0s5 | Size: 100411764736 B (100.4 GB) | +-&gt; Volume disk2s1 931C738D-C5A4-3A43-823A-210C3E9AF123 | --------------------------------------------------- | APFS Volume Disk (Role): disk2s1 (No specific role) | Name: MAC (Case-insensitive) | Mount Point: / | Capacity Consumed: 57355460608 B (57.4 GB) | Encrypted: No | +-&gt; Volume disk2s2 95F73DEF-D85F-4F43-B35F-D8914ED4A95F | --------------------------------------------------- | APFS Volume Disk (Role): disk2s2 (Preboot) | Name: Preboot (Case-insensitive) | Mount Point: Not Mounted | Capacity Consumed: 20959232 B (21.0 MB) | Encrypted: No | +-&gt; Volume disk2s3 CDF460DC-38FE-4E79-A04C-C7A5242BD091 | --------------------------------------------------- | APFS Volume Disk (Role): disk2s3 (Recovery) | Name: Recovery (Case-insensitive) | Mount Point: Not Mounted | Capacity Consumed: 519573504 B (519.6 MB) | Encrypted: No | +-&gt; Volume disk2s4 25CC995F-FB04-4617-900A-955B423A675F --------------------------------------------------- APFS Volume Disk (Role): disk2s4 (VM) Name: VM (Case-insensitive) Mount Point: /private/var/vm Capacity Consumed: 1073762304 B (1.1 GB) Encrypted: No以我的磁盘为例：我的磁盘中存在两个APFS容器，分别是：Container disk1和Container disk2，disk1对应的是我的test卷，它是我测试用的，我演示下使用diskutil命令将apfs转换为hfs+，并且将转换的hfs+分区重新命名为：test[提示:]执行该命令之前请保存你的数据，该命令会直接删除之前该分区存在的数据 命令：1diskutil apfs deleteContainer disk1 test显示结果：1234567891011121314151617Started APFS operation on disk1Deleting APFS Container with all of its APFS VolumesUnmounting VolumesUnmounting Volume "test" on disk1s1Unmounting Volume "Preboot" on disk1s2Unmounting Volume "Recovery" on disk1s3Unmounting Volume "VM" on disk1s4Deleting VolumesDeleting ContainerWiping former APFS disksSwitching content typesReformatting former APFS disksInitialized /dev/rdisk0s10 as a 27 GB case-insensitive HFS Plus volume with a 8192k journalMounting disk1 new disk created or changed due to APFS operationDisk from APFS operation: disk0s10Finished APFS operation on disk1 检查：1diskutil list/dev/disk0(internal, physical):#:TYPENAMESIZEIDENTIFIER0:GUID_partition_scheme512 GBdisk01:EFIEFI200 MBdisk0s12:Apple_HFSMAC128 GBdisk0s2……………8:Apple_HFStest29.1 GBdisk0s10可以看到test的分区格式已经变回hfs+了。本教程结束，更多的命令用法请使用命令：man diskutil 收工 如何开启原生SSD Trim功能1sudo trimforce enable因为是系统原生工具，此方法无需开启rootless=0，更不会改变已有驱动的签名，也就是说不需要kext-dev-mode=1，白果也可用此方法开启Trim。 不使用任何程序教你提取显示器的EDID，解决笔记本显示器内屏黑屏/花屏的问题经常有网友需要解决笔记本显示器内屏黑屏问题，尤其新发布的10.13的系统会出现睡眠唤醒后屏幕花屏问题。目前最简单的方案就是通过clover注入显示器的EDID信息，之前网上的教程都是使用Windows下的应用程序进行操作。其实显示器的EDID信息都会在显卡正确驱动后存在于ioreg中的。 最简单的命令是：1ioreg -lw0 | grep -i "IODisplayEDID" | sed -e 's/.*&lt;//' -e 's/&gt;//' 显示信息如下：00ffffffffffff000daee01500000000161a0104952213780228659759548e271e505400000001010101010101010101010101010101b43b804a713834405036680058c11000001ac32f804a713834405036680058c11000001a000000fe0035324b4636803135364843410a000000000000413196011000000a010a202000e8 接着输入下面的两条命令：12345ioreg -l | grep "DisplayVendorID" "DisplayVendorID" = 3502 ioreg -l | grep "DisplayProductID" "DisplayProductID" = 5600其中&lt;&gt;里面的内容就是显示器的EDID信息，将提取出来的EDID信息粘贴到clover的 config.plist 中，顺便将 VendorID 和 ProductID 填入相应的位置，然后保存重启你的电脑。 MacOS系统下导出man手册内容经常使用shell命令的时候需要翻看man查询命令的用法以及参数，想把使用手册导出来查看。比如我想查看10.13系统下 log show命令的具体用法，使用以下命令：1man log | col -b &gt; ~/Desktop/log_manual.txt命令中 col -b是导出一个纯文本版本格式的手册且显示正常 使用log show检查AppleALC和Lilu是否工作正常(内容暂未添加)命令格式：log show --predicate 'process == &quot;kernel&quot; AND (eventMessage CONTAINS &quot;AppleALC&quot; OR eventMessage CONTAINS &quot;Lilu&quot;)' --style syslog --source 一条命令教你如何确认自己的机型及如何开启 HWPHWP是什么？HWP是Hardware Work Package的简称，翻译过来叫做：硬件标准部件在macOS下,HWP是指Intel SpeedShift，开启全功率的电源管理，更多的解释请参阅原文用到的工具： freqVectorsEdit.sh用法：打开终端，复制下面命令：cd /tmp &amp;&amp; curl -s https://raw.githubusercontent.com/Piker-Alpha/freqVectorsEdit.sh/master/freqVectorsEdit.sh &gt; /tmp/freqVectorsEdit.sh &amp;&amp; chmod +x freqVectorsEdit.sh &amp;&amp; /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/freqVectorsEdit.sh &amp;&amp; sudo rm -rf /tmp/Mac-*.bin注意上面的命令为一条，须全部复制系统会使用 curl 自动下载一个程序，保存到 /tmp ,之后自动执行，期间需要你输入自己的用户密码，程序执行完后会自动清除临时文件；屏幕会输出40个机型，其中亮白加粗为你当时设置的机型，带 绿色 显示的那三行前面括号里的机型为可选机型，带 HWP 字样的为可以开启 HWPEnable输入方括号里面的数字并回车，可以修改相对应的机型，同时开启 HWP本文不讨论开启 HWP 的步骤及用法，更多的信息请参阅其它文章 检查自己的显卡驱动所使用的platform-id打开终端,输入命令:1ioreg -l | grep -y platform-id显示输出信息:1| | | | "AAPL,ig-platform-id" = &lt;00001659&gt;进行一次小端转换,就是:59160000,也就是七代核显Intel HD Graphics 620的显卡注入信息. 笔记本开启插电源出提示音: 开启:打开终端,输入以下命令:1defaults write com.apple.PowerChime ChimeOnAllHardware -bool true; open /System/Library/CoreServices/PowerChime.app &amp; 关闭:打开终端,输入以下命令:1defaults write com.apple.PowerChime ChimeOnAllHardware -bool false; killall PowerChime 如何去掉apfs.efi最新版本的日志调试显示 打开终端，输入以下命令：123cd ~/Desktop # 进入当前用户桌面cp /usr/standalone/i386/apfs.efi . # 复制最新版本的apfs.efi到当前目录perl -i -pe 's|\x00\x74\x07\xb8\xff\xff|\x00\x90\x90\xb8\xff\xff|sg' ./apfs.efi # 去掉日志调试回显 将生成的apfs.efi复制到/EFI/CLOVER/drivers64UEFI目录下，重启测试 查看声卡型号及注入的ID以及ConfigData1ioreg -l | grep ALC | grep HDAConfigDefault屏幕输出：1"HDAConfigDefault" = (&#123;"AFGLowPowerState"=&lt;03000000&gt;,"CodecID"=283902550,"ConfigData"=&lt;01470c02&gt;,"FuncGroup"=1,"Codec"="DalianSky - Realtek ALC256 (3246) for Dell 7000 Series","WakeVerbReinit"=Yes,"LayoutID"=7,"BootConfigData"=&lt;01271c3001271d0101271ea601271f9001371cf001371d0001371e0001371f4001471c1001471d0101471e1701471f9001470c0201871cf001871d0001871e0001871f4001971c4001971d1001971e8101971f0201a71cf001a71d0001a71e0001a71f4001b71cf001b71d0001b71e0001b71f4001d71cf001d71d0001d71e0001d71f4001e71cf001e71d0001e71e0001e71f4002171c2002171d1002171e2102171f0202170c02&gt;&#125;) 一键查询硬件信息：打开终端，输入命令：1sh -c "$(curl -fsSL https://raw.githubusercontent.com/daliansky/dell7000/master/Tools/archey)"输出结果：备注：脚本中调用了bdmesg获取主板型号，所以使用前请勾选安装CLOVER的RC Scripts 收工 ———— 未完待续 ———— 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>diskutil</tag>
        <tag>shell</tag>
        <tag>spctl</tag>
        <tag>trimforce</tag>
        <tag>ioreg</tag>
        <tag>EDID</tag>
        <tag>APFS</tag>
        <tag>HFS+</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[不需要制作安装盘！教你在MacOS系统下安装High Sierra系统到另一个分区]]></title>
    <url>%2FDo-not-need-to-make-installation-disk-Teach-you-to-install-the-High-Sierra-system-on-another-MacOS-system-to-another-partition.html</url>
    <content type="text"><![CDATA[不需要制作安装盘！教你在 MacOS 系统下安装 High Sierra 系统到另一个分区此方法不支持APFS分区。 只有HFS分区才能通过此安装 High Sierra 。 而且，您还需要一个 GUID 分区表来安装它。我无法通过我的安装 USB 启动 macOS High Sierra 安装程序。 尝试了很多方法，但没有一个实际上使其启动，所以我发现一种新的方式通过我现在使用的实际引导的 macOS 在 HFS 日志分区上安装 macOS High Sierra 成功。通过这种方式，您不需要创建可引导的U盘，甚至不需要重新启动。 开始通过 App Store 下载 macOS High Sierra Developer Beta / Public Beta 安装程序。在要使用磁盘实用程序安装测试版的驱动器上创建HFS日志分区（名称不能包含空格）。打开应用程序目录，右键单击macOS Beta安装程序，然后单击显示包内容。 转到 Contents/Shared Support ，然后双击 InstallESD.dmg 和 BaseSystem.dmg 挂载它们。打开安装的 InstallESD.dmg ，打开Packages文件夹，然后打开 OSInstall.mpkg 文件。 这将打开 macOS 安装程序。 是的，现在您可以从启动的 MacOS 系统桌面安装 High Sierra Beta 。 选择您创建的分区以安装它，安装完成后，按照步骤5。备注：如果无法安装请执行(其中 HighSierra 是指卷名)：diskutil umount HighSierradiskutil mount HighSierra打开已安装的 BaseSystem.dmg 并将 boot.efi 从 /System/Library/CoreServices 复制到同一位置的 High Sierra 分区 (/System/Library/CoreServices)虽然安装了HS测试版，但它尚不可启动。 要使其可引导，请打开 终端 并键入以下命令(假设安装分区为：HighSierra)： 命令1：1$ sudo bless --folder "/Volumes/HighSierra/System/Library/CoreServices" 命令2：1$ sudo bless --mount "/Volumes/HighSierra" --setBoot 命令3：检查分区是否可引导。 为此，键入以下命令：1$ bless --info /Volumes/HighSierra 收工 关于打赏如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>High Sierra</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS Sierra 10.12.6 16G29 with Clover 4133原版镜像带多驱动]]></title>
    <url>%2FmacOS-Sierra-10-12-6-16G29-with-Clover-4133-original-mirror-with-multi-drive.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS Sierra 10.12.6 16G29 with Clover 4133原版镜像带多驱动本镜像采用官方原版app制作，集成Clover 4133，支持UEFI启动安装。Clover集成众多配置文件，系统默认config.plist支持原生I5/i7七代移动版CPU，原生支持Intel HD Graphics 620【platforms-id:59160000】；其它显卡配置文件可通过Clover引导界面-Options-config进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；其它驱动位于/EFI/Clover/kexts/Other/backup目录下，请根据自己的机型配置适当的驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决，当然您也可以通过企鹅群：331686786寻求帮助。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像唯一发布站点：远景论坛/ 黑果小兵的小站 下载链接：百度云：https://pan.baidu.com/s/1sloGhCL 密码: yknpMD5 (macOS Sierra 10.12.6 16G29 Installer with Clover 4133.dmg) = 81ecbc29863381097537ec9a40c8e1c6 其它机型EFI下载：https://github.com/daliansky/Hackintosh]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>Sierra</tag>
        <tag>镜像</tag>
        <tag>10.12.6</tag>
        <tag>dmg</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hotpatch详解]]></title>
    <url>%2Fhotpatch-detailed-solution.html</url>
    <content type="text"><![CDATA[hotpatch详解这里阐述hotpatch的作用及各功能详解[TOC] 核心文件名称解释SSDT-ConfigSSDT控制入口文件 系统名称解释SSDT-LPC正确识别LPC总线到系统SSDT-SMBUS正确识别SMBus到系统SSDT-DMAC将DMA控制器公开给系统SSDT-MCHC将内存控制器暴露在系统中 显卡名称解释SSDT-IGPU将属性添加到集成显卡设备，可以实现HDMI音频以及正确显示SSDT-Disable_DGPU在启动时关闭独立显卡，因为Mac OS无法使用它SSDT-ALS0添加假环境光传感器以在重新启动之间保存背光信息SSDT-BRT6将键盘的ACPI管理亮度键映射到VoodooPS2Controller.kext的PS2代码SSDT-Dell_FN将键盘的ACPI管理亮度键映射到VoodooPS2Controller.kext的PS2代码【部分DELL机型】SSDT-PNLF显示器亮度控制，为IntelBacklight.kext或AppleBacklight.kext + AppleBacklightInjector.kext添加PNLF设备 声卡名称解释SSDT-HDAU自动注入HDAU属性 备注：适用于Haswell和Broadwell平台SSDT-HDEF自动注入HDEF属性 声卡layoutid注入点 睡眠相关名称解释SSDT-GPRW通过挂接GPRW或UPRW来解决即时唤醒SSDT-LANC_PRW通过挂接GPRW来解决即时唤醒SSDT-UPRW通过挂接GPRW或UPRW来解决即时唤醒SSDT-IMEI添加IMEI（6系列HD4000，7系HD3000）SSDT-PTSWAK在睡眠之前对离散GPU进行驱动，并在唤醒后将其关闭，以确保系统能够跟踪它 其它杂项名称解释SSDT-Debug用于ACPIDebug该文件是通过将“添加DSDT调试方法”应用于空SSDT创建的，使用“添加SSDT调试外部声明”从其他方式访问这些方法hotpatch SSDT甚至打补丁的OEM ACPI文件SSDT-ESEL关闭ESEL，在DSDT里原生ESEL被重命名为ESEXSSDT-XWAK关闭XWAK，在DSDT里原生的XWAK被重命名为ZWAKSSDT-PluginType1在_PR.CPU0上插入plugin-type = 1可能是所有支持XCPM的SMBIOS只需要这种插件类型的注入SSDT-SATA修复某些不支持的SATA设备SSDT-XHC自动注入XHC属性SSDT-XOSI覆盖主机定义的_OSI来处理“Darwin”…DSDT中的所有_OSI调用都被路由到XOSIXOSI模拟“Windows 2009”（这是Windows 7）XOSI模拟“Windows 2015”（这是Windows 10）这里是关于_OSI中微软操作系统的描述文件 关于打赏您的支持就是我更新的动力！如果不希望看到博主停更的话，请点击下方的 打赏 支持一下，有钱的捧个钱场，没钱的捧个人场，谢谢大家！]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>hotpatch</tag>
        <tag>DSDT</tag>
        <tag>SSDT</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[【黑果小兵】macOS High Sierra 10.13DB6 17A334b with Clover 4160原版镜像]]></title>
    <url>%2FmacOS-High-Sierra-10-13DB6-17A334b-with-Clover-4160-original-mirror.html</url>
    <content type="text"><![CDATA[【黑果小兵】macOS High Sierra 10.13DB6 17A334b with Clover 4160原版镜像本镜像采用官方原版app制作，集成Clover 4160，支持UEFI启动安装。Clover默认config.plist支持原生i5/i7七代移动版CPU，原生支持Intel HD Graphics 620【platforms-id:59160000】；【DELL 燃7000系列可直接安装使用】其它配置文件包括七代6x0 config.plist配置文件，其中spoof的是显卡欺骗，不带spoof字样的是支持原生显卡，本版未放其它型号的config；所有config配置文件都可通过Clover引导界面-Options-configs进行选择；如果无法引导到安装界面，可于Clover主界面-Options-Graphics进行显卡仿冒；集成的AppleALC是ALC256，添加CodecCommander以解决睡眠唤醒无声问题；完整的ALC256驱动请见老朽的另一帖支持BCM94352z无线网卡，支持Realtek8111系列网卡；已加入Lilu、IntelGraphicsFixup、IntelGraphicsDVMTFixup等补丁；其它驱动位于/EFI/Clover/kexts/Other/backup目录下，请根据自己的机型配置适当的驱动；本镜像已经过本人安装测试，若您在使用中遇到问题，可通过爬楼自行解决。本人才疏学浅，所学知识都来自于远景社区，感谢远景各位大咖一直以来对老朽的大力支持，由于人员众多，恕不一一列名致谢！本镜像发布站点：远景论坛/ 我的github小站 特别感谢@宪武 提供的hotpatch的全套方法：适用于CLOVER 的 P-little ；适用于 OpenCore 的 OC-little####下载链接:百度云：https://pan.baidu.com/s/1dFvkYZZ• MD5 (macOS High Sierra 10.13 17A334b Installer with Clover 4160.dmg) = 8b46ab210917be9287ac3a38b4e8eb81]]></content>
      <categories>
        <category>下载</category>
        <category>镜像</category>
      </categories>
      <tags>
        <tag>10.13</tag>
        <tag>High Sierra</tag>
        <tag>镜像</tag>
        <tag>下载</tag>
        <tag>dmg</tag>
        <tag>17A344b</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[出现nginx 405 Not Allowed错误的解决方法]]></title>
    <url>%2Fan-nginx-405-not-allowed-error-solution.html</url>
    <content type="text"><![CDATA[调试网站程序的时候，出现nginx 405 Not Allowed的错误信息，出现405错误的原因是nginx不允许post静态页。修改方法：1nano nginx.conf添加以下内容：123456789101112server &#123; listen 80; server_name localhost; location / &#123; root html; index index.html index.htm; &#125; error_page 404 /404.html; error_page 403 /403.html; # To allow POST on static pages 允许静态页使用POST方法 error_page 405 =200 $uri; &#125;]]></content>
      <categories>
        <category>linux</category>
        <category>网络相关</category>
      </categories>
      <tags>
        <tag>405</tag>
        <tag>error</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[8个好习惯叱咤职场]]></title>
    <url>%2F8-good-habit-chi-zha-in-the-workplace.html</url>
    <content type="text"><![CDATA[8个好习惯叱咤职场守时。这是职场中最重要的一项！守时的乌龟和不守时的兔子做选择，老板更喜欢虽然慢，但是准时到点的乌龟。微笑！长得好或者不好都不少很重要，重要的是自己有才气；如果才气也没有，那就总是微笑。尊敬不喜欢你的人。职场中不喜欢的也许只是他做事的风格与你有出入，不要期望所有人你都喜欢或者不要期望所有人都喜欢你，那是不可能的，让大多数人喜欢只是是成功的表现。那么就大度点，提供一个马斯洛较高级别的需求给他吧。办公要做到对事不对人。或对事无情，对人要有情；或做人第一，做事其次。女人最容易对人不对事了这点要特别注意！职场复杂多变，做事讲原则，做人变规则。学习。活到老学到老，不耻下问等都是用来形容学习的。在变化莫测的职场中，固步自封的知识是很容易被淘汰的，我们需要的是一种永不停息的学习态度。并且最好是向身边的人学习。说话的时候记得常用“我们”开头。这样能让大家感觉到这是一个团队，有着团队的精神！拥有一个好身体。经常锻炼，健康饮食保持一个良好的健康状态，才能面对重重的工作，才能有一个好的心态去工作学习。不要吝惜你的喝彩声。每天适当的给予别人赞美是激励的好方法，赞扬他们的每一点成就和进步，或许因为你的赞美，这一天阳光也灿烂了许多。至少要给予可观的评价而减少不必要的负面影响。]]></content>
      <categories>
        <category>人生感悟</category>
      </categories>
      <tags>
        <tag>职场</tag>
        <tag>习惯</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10个 Google 有意思的事情]]></title>
    <url>%2F10-interesting-things-that-google.html</url>
    <content type="text"><![CDATA[10个Google有意思的事情我想大部分人都已经知道 Google 最开始是2个斯坦福大学的 Ph.D. 学生 Larry Page 和 Sergey Brin的研究课题。但你可否知道 Google 最初的储存设备其实只是一个乐高玩具积木所拼搭起来的机器？或者 Google 正式成立之前，就已经有人签了一张 10万美金的支票送给这两位学生？还有 Google 甚至还有自己的官方狗？如果都不知道，那就继续看下去吧。 Google 之前被叫做 BackRub在1996年，已经毕业的 Larry Page 和 Sergey Brin 一起研究万维网（World Wide Web）之中每一个连接和每一个连接之间的关系。他们发现一个很有趣的现象就是通过知道有多少连接指向某一网站可以估计出这个网站在万维网上的重要性（这 就是我们现在所熟知的 Page Rank 的原形）。这项研究课题被命名为 BackRub，其实就是 Backlink 的意思。这里还有一个当年他们在 斯坦福大学保存下来的网页。而 BackRub 的 Logo 其实就是一只手反着放在扫描仪里扫描出来的图像。 最初 Google 存储设备Larry 和 Sergey 当时需要非常非常多的容量（40Gb）来研究他们的 PageRank，而当时世界上最大的硬盘只有4Gb，于是他们找到10个硬盘并组装在一起。机箱就是 Larry 用 Lego 积木拼出来的。 Google 的第一位投资者Sun Microsystem 的协助创始人 Andy Bechtolsheim 一眼就看出了 Google 的潜力，他于 Larry 和 Sergey 简短的谈了30分钟，就抽出自己的支票夹（有钱人出门都不带现金），直接签上10万美金，交给 Larry 和 Sergey 做 Google Inc. 的资金。可当时 Google 都还没有存在呢。 Google 的车库 如果说世界上最幸福的房东是谁的话，那我们要先回到1998年的某一天。那一天Susan Wojcicki 为因还不起房贷，把自己没用的存车库以1700美金一个月组给了两个陌生的学生。但没等太久，她的生活就彻底被颠覆了。 Google 成立后聘请她在其中担当一个很重要的职位，从此之后她在 Google 中成为了一个必不可少的核心人物，在工作的同时还顺便给她妹妹找了个好老公，并且慢慢的通过自己的关系，把自己全家人的饭碗问题都给解决了。。。2006年，Google 出钱把那座房子买了下来，从此那里变成了一个 Geeks 的旅游景点。 Google 的狗经常上 Youtube 的人可能会了解，Kitty Cats 小猫咪们现在是互联网上最有影响力的动物。所有人都爱它们，只要视频题目写着猫咪，那一定会火起来（即使我这个大男生还存了几个，如果有女生要的话可以告 诉我哈）。但是对于 Google 来说，狗才是王道。1999年,一个叫做 Yoshka（由丝卡，h不发音）的兰伯格犬来到了 Google， 并且和 Google 的第一位外聘工程师 Urs Hlzle 一起工作。题外话，兰伯格犬是匈牙利的一种长得像狮子的大型犬，但它们非常不适合做看门狗，因为它们都太善良了。 Google 到底有多少个服务器这个问题吗。。。除了少部分 Google 内部人员知道以外，世界没有其他人知道了。Google 非常严谨，严肃的保护他们的数据中心中的秘密（他们有多少个数据中心也没人知道）。例如在 Google 镇里，没有人可以说 Google 这个词，做不到这一点的人都会被遗留在上图的河对面，不得如内，就好像哈里波特里的伏地魔一样敏感，违禁词。虽然不知道 Google 确切到底有多少服务器，但是至少和天网一样多就对了。 搜索&quot;绿色&quot;以 1000 万个服务器为例的话，这些硬件所消耗的电能达到 103 兆瓦，足够为 8万多户美国居民全家的用电（美国人比中国人能用电）。Google 自己也统计过，每一个人每次的搜索会平均消耗掉1千焦的能量（一片面包所含能量是这个的300多倍）。所以这已经算非常非常的节能了。为了更加环保，Google 还安装了9212 片太阳能板，每天提供4500 千瓦时的电能。 Google 三轮车如果 Street View 只限于 Street 那其不是很无趣。为了让宅男腐女们更久的宅在家里，并且同时周游世界，Google 骑着三轮车到世界各地的好玩地方去取景，例如日本旭山动物园，加州乐高乐园 等等。更多资料可以在谷奥找到，这里就不多说了。 I’m Feeling LuckyI’m Feeling Lucky 这个按钮每年花掉 Google 1.1个亿。它的原理是穿过所有搜索的结果，直接带你去第一个搜索到的网站。而这样，Google 就没有机会给你看广告了，因此 Google 每年少进账 1个亿美金。那为什么还非有不可呢？记得 Google 的创始人 Larry 和 Sergey 吧。他们本身是科研人员，不是商人，Google 本身也是一个研究课题，不是赚钱工具。更何况他们现在&quot;不差钱&quot;，他们认为只要还有用户用这个功能，那就值得保持下去，少赚钱没关系的。10）Google 机器人在2005年 Ben Rathbone 给我们解释了他眼中的未来。 他提到，在未来世界将分成2个，一个真实世界，一个数字世界。而 Google 就是联络2个世界的中枢（让我想到 Matrix 黑客帝国，有没有人和我一样？）一个类似于机器人的东西。真实世界需要什么，他就会从另外那个世界找出来给你，同样的，真实世界中有什么事情发生都会被 Google 这个机器人以数字的形式纪录下来。]]></content>
      <categories>
        <category>网络文摘</category>
        <category>网络相关</category>
      </categories>
      <tags>
        <tag>google</tag>
      </tags>
  </entry>
</search>
